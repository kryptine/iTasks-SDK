|| ?module? Control.Applicative


Control.Applicative.unwrapMonad !_x_0 = select _x_0 (Control.Applicative.WrapMonad x_1_0 -> x_1_0) 
Control.Applicative.getConst !_x_0 = select _x_0 (Control.Applicative.Const x_1_0 -> x_1_0) 
Control.Applicative.lift !_vApplicative_0 x_1 = Control.Applicative.get_pure_1 _vApplicative_0 x_1
Control.Applicative.anon_37 x_0 xs_1 = _predefined._Cons x_0 xs_1
Control.Applicative.some !_vAlternative_0 v_1 = let some_v_1_0 = <{Control.Applicative.get_<*>_0}> (Control.Applicative.get_Applicative_5 _vAlternative_0) (<{Data.Functor.<$>}> (Control.Applicative.get_Functor_2 (Control.Applicative.get_Applicative_5 _vAlternative_0)) Control.Applicative.anon_37 v_1) (<{Control.Applicative.get_<|>_3}> _vAlternative_0 some_v_1_0 (Control.Applicative.lift (Control.Applicative.get_Applicative_5 _vAlternative_0) _predefined._Nil)) in some_v_1_0
Control.Applicative.anon_38 x_0 xs_1 = _predefined._Cons x_0 xs_1
Control.Applicative.many !_vAlternative_0 v_1 = let many_v_1_0 = <{Control.Applicative.get_<|>_3}> _vAlternative_0 (<{Control.Applicative.get_<*>_0}> (Control.Applicative.get_Applicative_5 _vAlternative_0) (<{Data.Functor.<$>}> (Control.Applicative.get_Functor_2 (Control.Applicative.get_Applicative_5 _vAlternative_0)) Control.Applicative.anon_38 v_1) many_v_1_0) (Control.Applicative.lift (Control.Applicative.get_Applicative_5 _vAlternative_0) _predefined._Nil) in many_v_1_0
Control.Applicative.liftA2 !_vApplicative_0 f_1 a_2 b_3 = <{Control.Applicative.get_<*>_0}> _vApplicative_0 (<{Data.Functor.<$>}> (Control.Applicative.get_Functor_2 _vApplicative_0) f_1 a_2) b_3
<{Control.Applicative.*>}> !_vApplicative_0 fa_1 fb_2 = Control.Applicative.liftA2 _vApplicative_0 (StdFunc.const StdFunc.id) fa_1 fb_2
<{Control.Applicative.<*}> !_vApplicative_0 fa_1 fb_2 = Control.Applicative.liftA2 _vApplicative_0 StdFunc.const fa_1 fb_2
Control.Applicative.flip_40 !f_0 a_1 b_2 = f_0 b_2 a_1
Control.Applicative.flip_85 !a_0 !b_1 = <{Data.Func.$}> b_1 a_0
<{Control.Applicative.<**>}> !_vApplicative_0 fa_1 fab_2 = Control.Applicative.liftA2 _vApplicative_0 Control.Applicative.flip_85 fa_1 fab_2
Control.Applicative.liftA !_vApplicative_0 f_1 a_2 = <{Control.Applicative.get_<*>_0}> _vApplicative_0 (Control.Applicative.lift _vApplicative_0 f_1) a_2
Control.Applicative.liftA3 !_vApplicative_0 f_1 a_2 b_3 c_4 = <{Control.Applicative.get_<*>_0}> _vApplicative_0 (<{Control.Applicative.get_<*>_0}> _vApplicative_0 (<{Data.Functor.<$>}> (Control.Applicative.get_Functor_2 _vApplicative_0) f_1 a_2) b_3) c_4
Control.Applicative.optional !_vAlternative_0 v_1 = <{Control.Applicative.get_<|>_3}> _vAlternative_0 (<{Data.Functor.<$>}> (Control.Applicative.get_Functor_2 (Control.Applicative.get_Applicative_5 _vAlternative_0)) Data.Maybe.Just v_1) (Control.Applicative.lift (Control.Applicative.get_Applicative_5 _vAlternative_0) Data.Maybe.Nothing)
Control.Applicative.anon_39 !f_0 g_1 x_2 = f_0 x_2 (g_1 x_2)
<{Control.Applicative.<*>_12}> f_0 g_1 = Control.Applicative.anon_39 f_0 g_1
Control.Applicative.pure_13 !x_0 = StdFunc.const x_0
<{Control.Applicative.<*>_14}> !_x_0 _x_1 = select _x_0 (Data.Maybe.Nothing -> Data.Maybe.Nothing) (Data.Maybe.Just f_1_0 -> Data.Maybe.fmap_12 f_1_0 _x_1) 
Control.Applicative.pure_15 x_0 = Data.Maybe.Just x_0
Control.Applicative.pure_17 x_0 = _predefined._Cons x_0 _predefined._Nil
Control.Applicative.liftA2_86 !f_0 !a_1 !b_2 = <{Control.Applicative.<*>_16}> (<{Data.Functor.<$>}> (<{Data.Functor.Functor;}> Data.List.fmap_66) f_0 a_1) b_2
<{Control.Applicative.<*>_16}> !xs_0 !x_1 = Control.Applicative.liftA2_86 StdFunc.id xs_0 x_1
<{Control.Applicative.<|>_18}> !_x_0 r_1 = select _x_0 (Data.Maybe.Nothing -> r_1) (_ -> _x_0)
Control.Applicative.empty_19 = Data.Maybe.Nothing
<{Control.Applicative.<|>_20}> !fa_0 <{fa`_1}> = <{StdList.++}> fa_0 <{fa`_1}>
Control.Applicative.empty_21 = _predefined._Nil
Control.Applicative.fmap_22 _x_0 !_x_1 = select _x_1 (Control.Applicative.Const v_1_0 -> Control.Applicative.Const v_1_0) 
Control.Applicative.fmap_23 !_vMonad_0 f_1 !_x_2 = select _x_2 (Control.Applicative.WrapMonad v_1_0 -> Control.Applicative.WrapMonad (Control.Monad.liftM _vMonad_0 f_1 v_1_0)) 
<{Control.Applicative.<*>_24}> !_vMonoid_0 !_x_1 !_x_2 = select _x_1 (Control.Applicative.Const f_1_0 -> select _x_2 (Control.Applicative.Const v_2_0 -> Control.Applicative.Const (Data.Monoid.get_mappend_0 (Data.Monoid.get_Semigroup_2 _vMonoid_0) f_1_0 v_2_0)) ) 
Control.Applicative.pure_25 !_vMonoid_0 _x_1 = Control.Applicative.Const (Data.Monoid.get_mempty_1 _vMonoid_0)
<{Control.Applicative.<*>_26}> !_vMonad_0 !_x_1 !_x_2 = select _x_1 (Control.Applicative.WrapMonad f_1_0 -> select _x_2 (Control.Applicative.WrapMonad v_2_0 -> Control.Applicative.WrapMonad (Control.Monad.ap _vMonad_0 f_1_0 v_2_0)) ) 
Control.Applicative.pure_27 !_vMonad_0 x_1 = Control.Applicative.WrapMonad (Control.Applicative.get_pure_1 (Control.Monad.get_Applicative_1 _vMonad_0) x_1)
Control.Applicative.anon_41 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Control.Applicative.anon_87 !g_0 x_1 = Control.Applicative.unwrapMonad (g_0 x_1)
Control.Applicative.bind_28 !_vMonad_0 a_1 f_2 = Control.Applicative.WrapMonad (<{Control.Monad.>>=}> _vMonad_0 (Control.Applicative.unwrapMonad a_1) (Control.Applicative.anon_87 f_2))
<{Control.Applicative.<|>_29}> !_vMonadPlus_0 !_x_1 !_x_2 = select _x_1 (Control.Applicative.WrapMonad u_1_0 -> select _x_2 (Control.Applicative.WrapMonad v_2_0 -> Control.Applicative.WrapMonad (Control.Monad.get_mplus_2 _vMonadPlus_0 u_1_0 v_2_0)) ) 
Control.Applicative.empty_30 !_vMonadPlus_0 = Control.Applicative.WrapMonad (Control.Monad.get_mzero_3 _vMonadPlus_0)
Control.Applicative.mappend_31 !_vSemigroup_0 !_x_1 !_x_2 = select _x_1 (Control.Applicative.Const a_1_0 -> select _x_2 (Control.Applicative.Const b_2_0 -> Control.Applicative.Const (Data.Monoid.get_mappend_0 _vSemigroup_0 a_1_0 b_2_0)) ) 
Control.Applicative.mempty_32 !_vMonoid_0 = Control.Applicative.Const (Data.Monoid.get_mempty_1 _vMonoid_0)
<{Control.Applicative.TD;Const}> _x_0 = _predefined._Nil
<{Control.Applicative.TD;WrappedMonad}> _x_0 = _predefined._Nil
<{Control.Applicative.TD;Applicative;}> _x_0 = _predefined._Nil
<{Control.Applicative.TD;Alternative;}> _x_0 = _predefined._Nil

:: Control.Applicative.Const = Control.Applicative.Const a1
:: Control.Applicative.WrappedMonad = Control.Applicative.WrapMonad a1

|| Converted Records
:: <{Control.Applicative.Applicative;}> = {!<{Control.Applicative.<*>}>, !Control.Applicative.pure, !Control.Applicative.Functor}
<{Control.Applicative.get_<*>_0}> rec = select rec (<{Control.Applicative.Applicative;}> a1 a2 a3 -> a1)
Control.Applicative.get_pure_1 rec = select rec (<{Control.Applicative.Applicative;}> a1 a2 a3 -> a2)
Control.Applicative.get_Functor_2 rec = select rec (<{Control.Applicative.Applicative;}> a1 a2 a3 -> a3)
<{Control.Applicative.set_<*>_0}> rec !val = select rec (<{Control.Applicative.Applicative;}>  a1 a2 a3 -> <{Control.Applicative.Applicative;}> val a2 a3)
Control.Applicative.set_pure_1 rec !val = select rec (<{Control.Applicative.Applicative;}>  a1 a2 a3 -> <{Control.Applicative.Applicative;}> a1 val a3)
Control.Applicative.set_Functor_2 rec !val = select rec (<{Control.Applicative.Applicative;}>  a1 a2 a3 -> <{Control.Applicative.Applicative;}> a1 a2 val)

:: <{Control.Applicative.Alternative;}> = {<{Control.Applicative.<|>}>, Control.Applicative.empty, Control.Applicative.Applicative}
<{Control.Applicative.get_<|>_3}> rec = select rec (<{Control.Applicative.Alternative;}> a1 a2 a3 -> a1)
Control.Applicative.get_empty_4 rec = select rec (<{Control.Applicative.Alternative;}> a1 a2 a3 -> a2)
Control.Applicative.get_Applicative_5 rec = select rec (<{Control.Applicative.Alternative;}> a1 a2 a3 -> a3)
<{Control.Applicative.set_<|>_3}> rec val = select rec (<{Control.Applicative.Alternative;}>  a1 a2 a3 -> <{Control.Applicative.Alternative;}> val a2 a3)
Control.Applicative.set_empty_4 rec val = select rec (<{Control.Applicative.Alternative;}>  a1 a2 a3 -> <{Control.Applicative.Alternative;}> a1 val a3)
Control.Applicative.set_Applicative_5 rec val = select rec (<{Control.Applicative.Alternative;}>  a1 a2 a3 -> <{Control.Applicative.Alternative;}> a1 a2 val)

:: <{Control.Applicative.bimap_s;}> = {Control.Applicative.bimap_s}
Control.Applicative.get_bimap_s_6 rec = select rec (<{Control.Applicative.bimap_s;}> a1 -> a1)
Control.Applicative.set_bimap_s_6 rec val = select rec (<{Control.Applicative.bimap_s;}>  a1 -> <{Control.Applicative.bimap_s;}> val)

:: <{Control.Applicative.bimap_ss;}> = {Control.Applicative.bimap_ss}
Control.Applicative.get_bimap_ss_7 rec = select rec (<{Control.Applicative.bimap_ss;}> a1 -> a1)
Control.Applicative.set_bimap_ss_7 rec val = select rec (<{Control.Applicative.bimap_ss;}>  a1 -> <{Control.Applicative.bimap_ss;}> val)

:: <{Control.Applicative.bimap_sss;}> = {Control.Applicative.bimap_sss}
Control.Applicative.get_bimap_sss_8 rec = select rec (<{Control.Applicative.bimap_sss;}> a1 -> a1)
Control.Applicative.set_bimap_sss_8 rec val = select rec (<{Control.Applicative.bimap_sss;}>  a1 -> <{Control.Applicative.bimap_sss;}> val)

:: <{Control.Applicative.gEq_s;}> = {Control.Applicative.gEq_s}
Control.Applicative.get_gEq_s_9 rec = select rec (<{Control.Applicative.gEq_s;}> a1 -> a1)
Control.Applicative.set_gEq_s_9 rec val = select rec (<{Control.Applicative.gEq_s;}>  a1 -> <{Control.Applicative.gEq_s;}> val)

:: <{Control.Applicative.gEq_ss;}> = {Control.Applicative.gEq_ss}
Control.Applicative.get_gEq_ss_10 rec = select rec (<{Control.Applicative.gEq_ss;}> a1 -> a1)
Control.Applicative.set_gEq_ss_10 rec val = select rec (<{Control.Applicative.gEq_ss;}>  a1 -> <{Control.Applicative.gEq_ss;}> val)

:: <{Control.Applicative.gEq_sss;}> = {Control.Applicative.gEq_sss}
Control.Applicative.get_gEq_sss_11 rec = select rec (<{Control.Applicative.gEq_sss;}> a1 -> a1)
Control.Applicative.set_gEq_sss_11 rec val = select rec (<{Control.Applicative.gEq_sss;}>  a1 -> <{Control.Applicative.gEq_sss;}> val)

:: <{Control.Applicative.gEq_ssss;}> = {Control.Applicative.gEq_ssss}
Control.Applicative.get_gEq_ssss_12 rec = select rec (<{Control.Applicative.gEq_ssss;}> a1 -> a1)
Control.Applicative.set_gEq_ssss_12 rec val = select rec (<{Control.Applicative.gEq_ssss;}>  a1 -> <{Control.Applicative.gEq_ssss;}> val)

:: <{Control.Applicative.gEq_sssss;}> = {Control.Applicative.gEq_sssss}
Control.Applicative.get_gEq_sssss_13 rec = select rec (<{Control.Applicative.gEq_sssss;}> a1 -> a1)
Control.Applicative.set_gEq_sssss_13 rec val = select rec (<{Control.Applicative.gEq_sssss;}>  a1 -> <{Control.Applicative.gEq_sssss;}> val)

:: <{Control.Applicative.gEq_ssssss;}> = {Control.Applicative.gEq_ssssss}
Control.Applicative.get_gEq_ssssss_14 rec = select rec (<{Control.Applicative.gEq_ssssss;}> a1 -> a1)
Control.Applicative.set_gEq_ssssss_14 rec val = select rec (<{Control.Applicative.gEq_ssssss;}>  a1 -> <{Control.Applicative.gEq_ssssss;}> val)

:: <{Control.Applicative.gEq_sssssss;}> = {Control.Applicative.gEq_sssssss}
Control.Applicative.get_gEq_sssssss_15 rec = select rec (<{Control.Applicative.gEq_sssssss;}> a1 -> a1)
Control.Applicative.set_gEq_sssssss_15 rec val = select rec (<{Control.Applicative.gEq_sssssss;}>  a1 -> <{Control.Applicative.gEq_sssssss;}> val)

:: <{Control.Applicative.gEq_ssssssss;}> = {Control.Applicative.gEq_ssssssss}
Control.Applicative.get_gEq_ssssssss_16 rec = select rec (<{Control.Applicative.gEq_ssssssss;}> a1 -> a1)
Control.Applicative.set_gEq_ssssssss_16 rec val = select rec (<{Control.Applicative.gEq_ssssssss;}>  a1 -> <{Control.Applicative.gEq_ssssssss;}> val)

:: <{Control.Applicative.gEq_sssssssss;}> = {Control.Applicative.gEq_sssssssss}
Control.Applicative.get_gEq_sssssssss_17 rec = select rec (<{Control.Applicative.gEq_sssssssss;}> a1 -> a1)
Control.Applicative.set_gEq_sssssssss_17 rec val = select rec (<{Control.Applicative.gEq_sssssssss;}>  a1 -> <{Control.Applicative.gEq_sssssssss;}> val)

