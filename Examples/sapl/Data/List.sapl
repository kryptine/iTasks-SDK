|| ?module? Data.List


Data.List.head !xs_0 = StdList.hd xs_0
Data.List.tail !xs_0 = StdList.tl xs_0
Data.List.isnull !xs_0 = StdList.isEmpty xs_0
Data.List.keep !n_0 !xs_1 = StdList.drop (<{StdInt.-_7}> (StdList.length_47 xs_1) n_0) xs_1
Data.List.unzip3 !_x_0 = select _x_0 (_predefined._Nil -> _Tuple3 _predefined._Nil _predefined._Nil _predefined._Nil) (_predefined._Cons _x_1_0 xyzs_1_1 -> select _x_1_0 (_Tuple3 x_2_0 y_2_1 z_2_2 -> let _x_3_0 = Data.List.unzip3 xyzs_1_1 in _Tuple3 (_predefined._Cons x_2_0 (_predefined.tupsels3v0 _x_3_0)) (_predefined._Cons y_2_1 (_predefined.tupsels3v1 _x_3_0)) (_predefined._Cons z_2_2 (_predefined.tupsels3v2 _x_3_0))) ) 
Data.List.unzip4 !_x_0 = select _x_0 (_predefined._Nil -> _Tuple4 _predefined._Nil _predefined._Nil _predefined._Nil _predefined._Nil) (_predefined._Cons _x_1_0 wxyzs_1_1 -> select _x_1_0 (_Tuple4 w_2_0 x_2_1 y_2_2 z_2_3 -> let _x_3_0 = Data.List.unzip4 wxyzs_1_1 in _Tuple4 (_predefined._Cons w_2_0 (_predefined.tupsels4v0 _x_3_0)) (_predefined._Cons x_2_1 (_predefined.tupsels4v1 _x_3_0)) (_predefined._Cons y_2_2 (_predefined.tupsels4v2 _x_3_0)) (_predefined._Cons z_2_3 (_predefined.tupsels4v3 _x_3_0))) ) 
Data.List.unzip5 !_x_0 = select _x_0 (_predefined._Nil -> _Tuple5 _predefined._Nil _predefined._Nil _predefined._Nil _predefined._Nil _predefined._Nil) (_predefined._Cons _x_1_0 vwxyzs_1_1 -> select _x_1_0 (_Tuple5 v_2_0 w_2_1 x_2_2 y_2_3 z_2_4 -> let _x_3_0 = Data.List.unzip5 vwxyzs_1_1 in _Tuple5 (_predefined._Cons v_2_0 (_predefined.tupsels5v0 _x_3_0)) (_predefined._Cons w_2_1 (_predefined.tupsels5v1 _x_3_0)) (_predefined._Cons x_2_2 (_predefined.tupsels5v2 _x_3_0)) (_predefined._Cons y_2_3 (_predefined.tupsels5v3 _x_3_0)) (_predefined._Cons z_2_4 (_predefined.tupsels5v4 _x_3_0))) ) 
Data.List.replaceInList !cond_0 !new_1 !_x_2 = select _x_2 (_predefined._Nil -> _predefined._Cons new_1 _predefined._Nil) (_predefined._Cons x_1_0 xs_1_1 -> if (cond_0 new_1 x_1_0) (_predefined._Cons new_1 xs_1_1) (_predefined._Cons x_1_0 (Data.List.replaceInList cond_0 new_1 xs_1_1))) 
Data.List.splitWith !f_0 !_x_1 = select _x_1 (_predefined._Nil -> <{_Tuple2!3}> _predefined._Nil _predefined._Nil) (_predefined._Cons x_1_0 xs_1_1 -> if (f_0 x_1_0) (let _x_2_0 = Data.List.splitWith f_0 xs_1_1 in <{_Tuple2!3}> (_predefined._Cons x_1_0 (_predefined.tupsels2v0 _x_2_0)) (_predefined.tupsels2v1 _x_2_0)) (let _x_2_0 = Data.List.splitWith f_0 xs_1_1 in <{_Tuple2!3}> (_predefined.tupsels2v0 _x_2_0) (_predefined._Cons x_1_0 (_predefined.tupsels2v1 _x_2_0)))) 
Data.List.snd_87 !tuple_0 = _predefined.tupsels2v1 tuple_0
Data.List.anon_69 !<{_v<_0}> !_x_1 !_x_2 = select _x_1 (_Tuple2 a_1_0 _x_1_1 -> select _x_2 (_Tuple2 b_2_0 _x_2_1 -> <{StdOverloaded.get_<_7}> <{_v<_0}> a_1_0 b_2_0) ) 
Data.List.anon_146 !_x_0 !_x_1 = select _x_0 (_Tuple2 a_1_0 _x_1_1 -> select _x_1 (_Tuple2 b_2_0 _x_2_1 -> <{StdInt.<_17}> a_1_0 b_2_0) ) 
Data.List.sortByIndex !l_0 = StdList.map Data.List.snd_87 (StdOrdList.sortBy Data.List.anon_146 l_0)
Data.List.intersperse !i_0 !_x_1 = select _x_1 (_predefined._Nil -> _predefined._Nil) (_predefined._Cons x_1_0 _x_1_1 -> select _x_1_1 (_predefined._Nil -> _predefined._Cons x_1_0 _predefined._Nil) (_ -> _predefined._Cons x_1_0 (_predefined._Cons i_0 (Data.List.intersperse i_0 _x_1_1)))) 
Data.List.intercalate !xs_0 !xss_1 = StdList.flatten (Data.List.intersperse xs_0 xss_1)
<{Data.List.c;68;76_71}> !g_l_0 = <{Data.List.g_c1;68;85_166}> g_l_0
<{Data.List.g_c1;68;85_166}> !g_l_0 = select g_l_0 (_predefined._Cons g_h_1_0 g_t_1_1 -> <{Data.List.g_c2;68;85_165}> g_h_1_0 g_t_1_1) (_ -> _predefined._Nil)
<{Data.List.g_c2;68;85_165}> !g_h_0 g_t_1 = select g_h_0 (_predefined._Cons h_1_0 t_1_1 -> _predefined._Cons t_1_1 (<{Data.List.c;68;76_71}> g_t_1)) (_ -> <{Data.List.c;68;76_71}> g_t_1)
<{Data.List.c;68;37_70}> !g_l_0 = <{Data.List.g_c1;68;46_168}> g_l_0
<{Data.List.g_c1;68;46_168}> !g_l_0 = select g_l_0 (_predefined._Cons g_h_1_0 g_t_1_1 -> <{Data.List.g_c2;68;46_167}> g_h_1_0 g_t_1_1) (_ -> _predefined._Nil)
<{Data.List.g_c2;68;46_167}> !g_h_0 g_t_1 = select g_h_0 (_predefined._Cons h_1_0 t_1_1 -> _predefined._Cons h_1_0 (<{Data.List.c;68;37_70}> g_t_1)) (_ -> <{Data.List.c;68;37_70}> g_t_1)
Data.List.transpose !_x_0 = select _x_0 (_predefined._Nil -> _predefined._Nil) (_predefined._Cons _x_1_0 xss_1_1 -> select _x_1_0 (_predefined._Nil -> Data.List.transpose xss_1_1) (_predefined._Cons x_2_0 xs_2_1 -> _predefined._Cons (_predefined._Cons x_2_0 (<{Data.List.c;68;37_70}> xss_1_1)) (Data.List.transpose (_predefined._Cons xs_2_1 (<{Data.List.c;68;76_71}> xss_1_1)))) ) 
Data.List.foldr_88 op_0 r_1 !_x_2 = select _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> op_0 a_1_0 (Data.List.foldr_88 op_0 r_1 x_1_1)) 
Data.List.f_72 x_0 ys_1 r_2 = _predefined._Cons ys_1 (_predefined._Cons (_predefined._Cons x_0 ys_1) r_2)
Data.List.foldr_147 x_0 r_1 !_x_2 = select _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> Data.List.f_72 x_0 a_1_0 (Data.List.foldr_147 x_0 r_1 x_1_1)) 
Data.List.nonEmptySubsequences !_x_0 = select _x_0 (_predefined._Nil -> _predefined._Nil) (_predefined._Cons x_1_0 xs_1_1 -> _predefined._Cons (_predefined._Cons x_1_0 _predefined._Nil) (Data.List.foldr_147 x_1_0 _predefined._Nil (Data.List.nonEmptySubsequences xs_1_1))) 
Data.List.subsequences xs_0 = _predefined._Cons _predefined._Nil (Data.List.nonEmptySubsequences xs_0)
Data.List.foldr_90 op_0 r_1 !_x_2 = select _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> op_0 a_1_0 (Data.List.foldr_90 op_0 r_1 x_1_1)) 
Data.List.anon_89 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Data.List.anon_73 y_0 xs_1 = _predefined._Cons y_0 xs_1
Data.List.anon_148 !f_0 y_1 x_2 = f_0 (Data.List.anon_73 y_1 x_2)
<{Data.List.interleave`_75}> t_0 ts_1 _x_2 !_x_3 r_4 = select _x_3 (_predefined._Nil -> _Tuple2 ts_1 r_4) (_predefined._Cons y_1_0 ys_1_1 -> let _x_2_0 = <{Data.List.interleave`_75}> t_0 ts_1 (Data.List.anon_148 _x_2 y_1_0) ys_1_1 r_4, us_2_1 = _predefined.tupsels2v0 _x_2_0 in _Tuple2 (_predefined._Cons y_1_0 us_2_1) (_predefined._Cons (_x_2 (_predefined._Cons t_0 (_predefined._Cons y_1_0 us_2_1))) (_predefined.tupsels2v1 _x_2_0))) 
Data.List.interleave_74 t_0 ts_1 !xs_2 r_3 = _predefined.tupsels2v1 (<{Data.List.interleave`_75}> t_0 ts_1 StdFunc.id xs_2 r_3)
Data.List.foldr_149 t_0 ts_1 r_2 !_x_3 = select _x_3 (_predefined._Nil -> r_2) (_predefined._Cons a_1_0 x_1_1 -> Data.List.interleave_74 t_0 ts_1 a_1_0 (Data.List.foldr_149 t_0 ts_1 r_2 x_1_1)) 
Data.List.perms_76 !_x_0 _x_1 = select _x_0 (_predefined._Nil -> _predefined._Nil) (_predefined._Cons t_1_0 ts_1_1 -> Data.List.foldr_149 t_1_0 ts_1_1 (Data.List.perms_76 ts_1_1 (_predefined._Cons t_1_0 _x_1)) (Data.List.permutations _x_1)) 
Data.List.permutations xs0_0 = _predefined._Cons xs0_0 (Data.List.perms_76 xs0_0 _predefined._Nil)
Data.List.foldl_91 op_0 r_1 !_x_2 = select _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> Data.List.foldl_91 op_0 (op_0 r_1 a_1_0) x_1_1) 
Data.List.foldl1 f_0 !_x_1 = select _x_1 (_predefined._Cons x_1_0 xs_1_1 -> Data.List.foldl_91 f_0 x_1_0 xs_1_1) 
Data.List.concatMap f_0 !ls_1 = StdList.flatten (StdList.map f_0 ls_1)
Data.List.maximum !<{_v<_0}> !_x_1 = select _x_1 (_predefined._Cons x_1_0 _x_1_1 -> select _x_1_1 (_predefined._Nil -> x_1_0) (_ -> let y_2_0 = Data.List.maximum <{_v<_0}> _x_1_1 in if (<{StdOverloaded.get_<_7}> <{_v<_0}> x_1_0 y_2_0) y_2_0 x_1_0)) 
Data.List.min_92 !_vOrd_0 !x_1 !y_2 = if (<{StdOverloaded.get_<_7}> (<{StdClass.get_<_18}> _vOrd_0) x_1 y_2) x_1 y_2
Data.List.minimum !_vOrd_0 !xs_1 = Data.List.foldl1 (Data.List.min_92 _vOrd_0) xs_1
<{Data.List.c;102;41_77}> !_vEq_0 !_vone_1 !<{_v+_2}> indexes_3 !g_l_4 g_i_5 = <{Data.List.g_c1;102;33_169}> g_l_4 _vEq_0 g_i_5 indexes_3 _vone_1 <{_v+_2}>
<{Data.List.g_c1;102;33_169}> !g_l_0 _vEq_1 g_i_2 indexes_3 _vone_4 <{_v+_5}> = select g_l_0 (_predefined._Cons g_h_1_0 g_t_1_1 -> if (StdList.isMember _vEq_1 g_i_2 indexes_3) (_predefined._Cons g_h_1_0 (<{Data.List.c;102;41_77}> _vEq_1 _vone_4 <{_v+_5}> indexes_3 g_t_1_1 (<{StdOverloaded.get_+_0}> <{_v+_5}> g_i_2 (StdOverloaded.get_one_5 _vone_4)))) (<{Data.List.c;102;41_77}> _vEq_1 _vone_4 <{_v+_5}> indexes_3 g_t_1_1 (<{StdOverloaded.get_+_0}> <{_v+_5}> g_i_2 (StdOverloaded.get_one_5 _vone_4)))) (_ -> _predefined._Nil)
<{Data.List.c;102;41_150}> !_vone_0 !<{_v+_1}> indexes_2 !g_l_3 g_i_4 = <{Data.List.g_c1;102;33_170}> g_l_3 g_i_4 indexes_2 _vone_0 <{_v+_1}>
<{Data.List.g_c1;102;33_170}> !g_l_0 g_i_1 indexes_2 _vone_3 <{_v+_4}> = select g_l_0 (_predefined._Cons g_h_1_0 g_t_1_1 -> if (StdList.isMember_51 g_i_1 indexes_2) (_predefined._Cons g_h_1_0 (<{Data.List.c;102;41_150}> _vone_3 <{_v+_4}> indexes_2 g_t_1_1 (<{StdOverloaded.get_+_0}> <{_v+_4}> g_i_1 (StdOverloaded.get_one_5 _vone_3)))) (<{Data.List.c;102;41_150}> _vone_3 <{_v+_4}> indexes_2 g_t_1_1 (<{StdOverloaded.get_+_0}> <{_v+_4}> g_i_1 (StdOverloaded.get_one_5 _vone_3)))) (_ -> _predefined._Nil)
<{Data.List.c;102;41_151}> !<{_v+_0}> indexes_1 !g_l_2 g_i_3 = <{Data.List.g_c1;102;33_171}> g_l_2 g_i_3 indexes_1 <{_v+_0}>
<{Data.List.g_c1;102;33_171}> !g_l_0 g_i_1 indexes_2 <{_v+_3}> = select g_l_0 (_predefined._Cons g_h_1_0 g_t_1_1 -> if (StdList.isMember_51 g_i_1 indexes_2) (_predefined._Cons g_h_1_0 (<{Data.List.c;102;41_151}> <{_v+_3}> indexes_2 g_t_1_1 (<{StdOverloaded.get_+_0}> <{_v+_3}> g_i_1 StdInt.one_11))) (<{Data.List.c;102;41_151}> <{_v+_3}> indexes_2 g_t_1_1 (<{StdOverloaded.get_+_0}> <{_v+_3}> g_i_1 StdInt.one_11))) (_ -> _predefined._Nil)
<{Data.List.c;102;41_152}> indexes_0 !g_l_1 g_i_2 = <{Data.List.g_c1;102;33_172}> g_l_1 g_i_2 indexes_0
<{Data.List.g_c1;102;33_172}> !g_l_0 g_i_1 indexes_2 = select g_l_0 (_predefined._Cons g_h_1_0 g_t_1_1 -> if (StdList.isMember_51 g_i_1 indexes_2) (_predefined._Cons g_h_1_0 (<{Data.List.c;102;41_152}> indexes_2 g_t_1_1 (<{StdInt.+_6}> g_i_1 StdInt.one_11))) (<{Data.List.c;102;41_152}> indexes_2 g_t_1_1 (<{StdInt.+_6}> g_i_1 StdInt.one_11))) (_ -> _predefined._Nil)
Data.List.getItems !list_0 !indexes_1 = <{Data.List.c;102;41_152}> indexes_1 list_0 0
Data.List.scanl f_0 q_1 ls_2 = _predefined._Cons q_1 (<{Data.List._c;109;34_173}> ls_2 f_0 q_1)
<{Data.List._c;109;34_173}> !ls_0 f_1 q_2 = select ls_0 (_predefined._Nil -> _predefined._Nil) (_predefined._Cons x_1_0 xs_1_1 -> Data.List.scanl f_1 (f_1 q_2 x_1_0) xs_1_1) 
Data.List.scanl1 f_0 !_x_1 = select _x_1 (_predefined._Cons x_1_0 xs_1_1 -> Data.List.scanl f_0 x_1_0 xs_1_1) (_predefined._Nil -> _predefined._Nil) 
Data.List.foldr1 _x_0 !_x_1 = select _x_1 (_predefined._Cons x_1_0 _x_1_1 -> select _x_1_1 (_predefined._Nil -> x_1_0) (_ -> _x_0 x_1_0 (Data.List.foldr1 _x_0 _x_1_1))) 
Data.List.replicate !n_0 x_1 = StdList.take n_0 (StdList.repeat x_1)
Data.List.cycle !xs_0 = let <{xs`_1_0}> = <{StdList.++}> xs_0 <{xs`_1_0}> in <{xs`_1_0}>
Data.List.unfoldr !f_0 b_1 = <{Data.List._c;130;3_174}> (f_0 b_1) f_0
<{Data.List._c;130;3_174}> !_x_0 f_1 = select _x_0 (Data.Maybe.Just _x_1_0 -> select _x_1_0 (_Tuple2 a_2_0 new_b_2_1 -> _predefined._Cons a_2_0 (Data.List.unfoldr f_1 new_b_2_1)) ) (Data.Maybe.Nothing -> _predefined._Nil) 
Data.List.break _x_0 !xs_1 = select xs_1 (_predefined._Nil -> _Tuple2 xs_1 xs_1) (_predefined._Cons x_1_0 xs`_1_1 -> if (_x_0 x_1_0) (_Tuple2 _predefined._Nil xs_1) (let _x_2_0 = Data.List.break _x_0 <{xs`_1_1}> in _Tuple2 (_predefined._Cons x_1_0 (_predefined.tupsels2v0 _x_2_0)) (_predefined.tupsels2v1 _x_2_0))) 
Data.List.stripPrefix !<{_v==_0}> !_x_1 ys_2 = select _x_1 (_predefined._Nil -> Data.Maybe.Just ys_2) (_predefined._Cons x_1_0 xs_1_1 -> select ys_2 (_predefined._Cons y_2_0 ys_2_1 -> select (<{StdOverloaded.get_==_6}> <{_v==_0}> x_1_0 y_2_0) (True -> Data.List.stripPrefix <{_v==_0}> xs_1_1 ys_2_1) ) ) (_ -> Data.Maybe.Nothing)
Data.List.groupBy _x_0 !_x_1 = select _x_1 (_predefined._Nil -> _predefined._Nil) (_predefined._Cons x_1_0 xs_1_1 -> let _x_2_0 = StdList.span (_x_0 x_1_0) xs_1_1 in _predefined._Cons (_predefined._Cons x_1_0 (_predefined.tupsels2v0 _x_2_0)) (Data.List.groupBy _x_0 (_predefined.tupsels2v1 _x_2_0))) 
Data.List.group !<{_v==_0}> = Data.List.groupBy (<{StdOverloaded.get_==_6}> <{_v==_0}>)
Data.List.anon_78 x_0 ys_1 = _predefined._Cons x_0 ys_1
Data.List.inits xs_0 = _predefined._Cons _predefined._Nil (<{Data.List._c;155;34_175}> xs_0)
<{Data.List._c;155;34_175}> !xs_0 = select xs_0 (_predefined._Nil -> _predefined._Nil) (_predefined._Cons x_1_0 xs`_1_1 -> StdList.map (Data.List.anon_78 x_1_0) (Data.List.inits <{xs`_1_1}>)) 
Data.List.tails xs_0 = _predefined._Cons xs_0 (<{Data.List._c;160;34_176}> xs_0)
<{Data.List._c;160;34_176}> !xs_0 = select xs_0 (_predefined._Nil -> _predefined._Nil) (_predefined._Cons _x_1_0 xs`_1_1 -> Data.List.tails <{xs`_1_1}>) 
Data.List.isPrefixOf !<{_v==_0}> !_x_1 _x_2 = select _x_1 (_predefined._Nil -> True) (_ -> select _x_2 (_predefined._Nil -> False) (_predefined._Cons y_1_0 ys_1_1 -> select _x_1 (_predefined._Cons x_2_0 xs_2_1 -> if (<{StdOverloaded.get_==_6}> <{_v==_0}> x_2_0 y_1_0) (Data.List.isPrefixOf <{_v==_0}> xs_2_1 ys_1_1) False) ) )
Data.List.isSuffixOf !<{_v==_0}> !x_1 y_2 = Data.List.isPrefixOf <{_v==_0}> (StdList.reverse x_1) (StdList.reverse y_2)
Data.List.isInfixOf !<{_v==_0}> needle_1 haystack_2 = StdList.any (Data.List.isPrefixOf <{_v==_0}> needle_1) (Data.List.tails haystack_2)
Data.List.elem !<{_v==_0}> _x_1 !_x_2 = select _x_2 (_predefined._Nil -> False) (_predefined._Cons y_1_0 ys_1_1 -> if (<{StdOverloaded.get_==_6}> <{_v==_0}> _x_1 y_1_0) True (Data.List.elem <{_v==_0}> _x_1 ys_1_1)) 
Data.List.notElem !<{_v==_0}> _x_1 !_x_2 = select _x_2 (_predefined._Nil -> True) (_predefined._Cons y_1_0 ys_1_1 -> if (StdBool.not (<{StdOverloaded.get_==_6}> <{_v==_0}> _x_1 y_1_0)) (Data.List.notElem <{_v==_0}> _x_1 ys_1_1) False) 
Data.List.lookup !<{_v==_0}> _x_1 !_x_2 = select _x_2 (_predefined._Nil -> Data.Maybe.Nothing) (_predefined._Cons _x_1_0 xys_1_1 -> select _x_1_0 (_Tuple2 x_2_0 y_2_1 -> if (<{StdOverloaded.get_==_6}> <{_v==_0}> _x_1 x_2_0) (Data.Maybe.Just y_2_1) (Data.List.lookup <{_v==_0}> _x_1 xys_1_1)) ) 
Data.List.anon_93 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Data.List.anon_153 !g_0 x_1 = Data.Maybe.listToMaybe (g_0 x_1)
Data.List.anon_154 _x_0 !x_1 = Data.Maybe.listToMaybe (StdList.filter _x_0 x_1)
Data.List.find p_0 = Data.List.anon_154 p_0
Data.List.foldr_94 op_0 r_1 !_x_2 = select _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> op_0 a_1_0 (Data.List.foldr_94 op_0 r_1 x_1_1)) 
Data.List.select_79 !p_0 x_1 t_2 = if (p_0 x_1) (_Tuple2 (_predefined._Cons x_1 (_predefined.tupsels2v0 t_2)) (_predefined.tupsels2v1 t_2)) (_Tuple2 (_predefined.tupsels2v0 t_2) (_predefined._Cons x_1 (_predefined.tupsels2v1 t_2)))
Data.List.foldr_155 p_0 r_1 !_x_2 = select _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> Data.List.select_79 p_0 a_1_0 (Data.List.foldr_155 p_0 r_1 x_1_1)) 
Data.List.partition p_0 !xs_1 = Data.List.foldr_155 p_0 (_Tuple2 _predefined._Nil _predefined._Nil) xs_1
Data.List.anon_80 !<{_v==_0}> x_1 y_2 = <{StdOverloaded.get_==_6}> <{_v==_0}> x_1 y_2
Data.List.anon_95 !f_0 g_1 x_2 = f_0 (g_1 x_2)
<{Data.List.c;209;24_82}> p_0 !g_l_1 = <{Data.List.g_c1;209;33_178}> g_l_1 p_0
<{Data.List.g_c1;209;33_178}> !g_l_0 p_1 = select g_l_0 (_predefined._Cons g_h_1_0 g_t_1_1 -> <{Data.List.g_c2;209;33_177}> g_h_1_0 p_1 g_t_1_1) (_ -> _predefined._Nil)
<{Data.List.g_c2;209;33_177}> !g_h_0 !p_1 g_t_2 = select g_h_0 (_Tuple2 x_1_0 i_1_1 -> select (p_1 x_1_0) (True -> _predefined._Cons i_1_1 (<{Data.List.c;209;24_82}> p_1 g_t_2)) ) (_ -> <{Data.List.c;209;24_82}> p_1 g_t_2)
Data.List.findIndices p_0 !xs_1 = <{Data.List.c;209;24_82}> p_0 (StdList.zip2 xs_1 (_SystemEnum._from_4 0))
Data.List.anon_156 !g_0 x_1 = Data.Maybe.listToMaybe (g_0 x_1)
Data.List.anon_157 p_0 !x_1 = Data.Maybe.listToMaybe (Data.List.findIndices p_0 x_1)
Data.List.findIndex p_0 = Data.List.anon_157 p_0
Data.List.elemIndex !<{_v==_0}> x_1 = Data.List.findIndex (Data.List.anon_80 <{_v==_0}> x_1)
Data.List.anon_81 !<{_v==_0}> x_1 y_2 = <{StdOverloaded.get_==_6}> <{_v==_0}> x_1 y_2
Data.List.elemIndices !<{_v==_0}> x_1 = Data.List.findIndices (Data.List.anon_81 <{_v==_0}> x_1)
Data.List.zip3 !_x_0 _x_1 _x_2 = select _x_0 (_predefined._Cons a_1_0 as_1_1 -> select _x_1 (_predefined._Cons b_2_0 bs_2_1 -> select _x_2 (_predefined._Cons c_3_0 cs_3_1 -> _predefined._Cons (_Tuple3 a_1_0 b_2_0 c_3_0) (Data.List.zip3 as_1_1 bs_2_1 cs_3_1)) ) ) (_ -> _predefined._Nil)
Data.List.zip4 !_x_0 _x_1 _x_2 _x_3 = select _x_0 (_predefined._Cons a_1_0 as_1_1 -> select _x_1 (_predefined._Cons b_2_0 bs_2_1 -> select _x_2 (_predefined._Cons c_3_0 cs_3_1 -> select _x_3 (_predefined._Cons d_4_0 ds_4_1 -> _predefined._Cons (_Tuple4 a_1_0 b_2_0 c_3_0 d_4_0) (Data.List.zip4 as_1_1 bs_2_1 cs_3_1 ds_4_1)) ) ) ) (_ -> _predefined._Nil)
Data.List.zip5 !_x_0 _x_1 _x_2 _x_3 _x_4 = select _x_0 (_predefined._Cons a_1_0 as_1_1 -> select _x_1 (_predefined._Cons b_2_0 bs_2_1 -> select _x_2 (_predefined._Cons c_3_0 cs_3_1 -> select _x_3 (_predefined._Cons d_4_0 ds_4_1 -> select _x_4 (_predefined._Cons e_5_0 es_5_1 -> _predefined._Cons (_Tuple5 a_1_0 b_2_0 c_3_0 d_4_0 e_5_0) (Data.List.zip5 as_1_1 bs_2_1 cs_3_1 ds_4_1 es_5_1)) ) ) ) ) (_ -> _predefined._Nil)
Data.List.zipSt z_0 !_x_1 _x_2 st_3 = select _x_1 (_predefined._Cons a_1_0 as_1_1 -> select _x_2 (_predefined._Cons b_2_0 bs_2_1 -> Data.List.zipSt z_0 as_1_1 bs_2_1 (z_0 a_1_0 b_2_0 st_3)) ) (_ -> st_3)
Data.List.zipWith z_0 !_x_1 _x_2 = select _x_1 (_predefined._Cons a_1_0 as_1_1 -> select _x_2 (_predefined._Cons b_2_0 bs_2_1 -> _predefined._Cons (z_0 a_1_0 b_2_0) (Data.List.zipWith z_0 as_1_1 bs_2_1)) ) (_ -> _predefined._Nil)
Data.List.zipWithSt z_0 !_x_1 _x_2 st_3 = select _x_1 (_predefined._Cons a_1_0 as_1_1 -> select _x_2 (_predefined._Cons b_2_0 bs_2_1 -> let _x_3_0 = z_0 a_1_0 b_2_0 st_3, _x_3_1 = Data.List.zipWithSt z_0 as_1_1 bs_2_1 (_predefined.tupsels2v1 _x_3_0) in _Tuple2 (_predefined._Cons (_predefined.tupsels2v0 _x_3_0) (_predefined.tupsels2v0 _x_3_1)) (_predefined.tupsels2v1 _x_3_1)) ) (_ -> _Tuple2 _predefined._Nil st_3)
Data.List.zipWith3 z_0 !_x_1 _x_2 _x_3 = select _x_1 (_predefined._Cons a_1_0 as_1_1 -> select _x_2 (_predefined._Cons b_2_0 bs_2_1 -> select _x_3 (_predefined._Cons c_3_0 cs_3_1 -> _predefined._Cons (z_0 a_1_0 b_2_0 c_3_0) (Data.List.zipWith3 z_0 as_1_1 bs_2_1 cs_3_1)) ) ) (_ -> _predefined._Nil)
Data.List.zipWith4 z_0 !_x_1 _x_2 _x_3 _x_4 = select _x_1 (_predefined._Cons a_1_0 as_1_1 -> select _x_2 (_predefined._Cons b_2_0 bs_2_1 -> select _x_3 (_predefined._Cons c_3_0 cs_3_1 -> select _x_4 (_predefined._Cons d_4_0 ds_4_1 -> _predefined._Cons (z_0 a_1_0 b_2_0 c_3_0 d_4_0) (Data.List.zipWith4 z_0 as_1_1 bs_2_1 cs_3_1 ds_4_1)) ) ) ) (_ -> _predefined._Nil)
Data.List.zipWith5 z_0 !_x_1 _x_2 _x_3 _x_4 _x_5 = select _x_1 (_predefined._Cons a_1_0 as_1_1 -> select _x_2 (_predefined._Cons b_2_0 bs_2_1 -> select _x_3 (_predefined._Cons c_3_0 cs_3_1 -> select _x_4 (_predefined._Cons d_4_0 ds_4_1 -> select _x_5 (_predefined._Cons e_5_0 es_5_1 -> _predefined._Cons (z_0 a_1_0 b_2_0 c_3_0 d_4_0 e_5_0) (Data.List.zipWith5 z_0 as_1_1 bs_2_1 cs_3_1 ds_4_1 es_5_1)) ) ) ) ) (_ -> _predefined._Nil)
<{Data.List.nub`_83}> !<{_v==_0}> !_x_1 _x_2 = select _x_1 (_predefined._Nil -> _predefined._Nil) (_predefined._Cons x_1_0 xs_1_1 -> if (Data.List.elem <{_v==_0}> x_1_0 _x_2) (<{Data.List.nub`_83}> <{_v==_0}> xs_1_1 _x_2) (_predefined._Cons x_1_0 (<{Data.List.nub`_83}> <{_v==_0}> xs_1_1 (_predefined._Cons x_1_0 _x_2)))) 
Data.List.nub !<{_v==_0}> !l_1 = <{Data.List.nub`_83}> <{_v==_0}> l_1 _predefined._Nil
Data.List.elem_by _x_0 _x_1 !_x_2 = select _x_2 (_predefined._Nil -> False) (_predefined._Cons x_1_0 xs_1_1 -> if (_x_0 _x_1 x_1_0) True (Data.List.elem_by _x_0 _x_1 xs_1_1)) 
<{Data.List.nubBy`_84}> eq_0 !_x_1 _x_2 = select _x_1 (_predefined._Nil -> _predefined._Nil) (_predefined._Cons y_1_0 ys_1_1 -> if (Data.List.elem_by eq_0 y_1_0 _x_2) (<{Data.List.nubBy`_84}> eq_0 ys_1_1 _x_2) (_predefined._Cons y_1_0 (<{Data.List.nubBy`_84}> eq_0 ys_1_1 (_predefined._Cons y_1_0 _x_2)))) 
Data.List.nubBy eq_0 !l_1 = <{Data.List.nubBy`_84}> eq_0 l_1 _predefined._Nil
Data.List.deleteBy _x_0 _x_1 !_x_2 = select _x_2 (_predefined._Nil -> _predefined._Nil) (_predefined._Cons y_1_0 ys_1_1 -> if (_x_0 _x_1 y_1_0) ys_1_1 (_predefined._Cons y_1_0 (Data.List.deleteBy _x_0 _x_1 ys_1_1))) 
Data.List.delete !<{_v==_0}> = Data.List.deleteBy (<{StdOverloaded.get_==_6}> <{_v==_0}>)
Data.List.foldl_98 op_0 r_1 !_x_2 = select _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> Data.List.foldl_98 op_0 (op_0 r_1 a_1_0) x_1_1) 
Data.List.foldl_97 op_0 r_1 !l_2 = Data.List.foldl_98 op_0 r_1 l_2
Data.List.flip_96 !f_0 a_1 b_2 = f_0 b_2 a_1
Data.List.flip_158 _x_0 !a_1 b_2 = Data.List.deleteBy _x_0 b_2 a_1
Data.List.foldl_160 _x_0 !r_1 !_x_2 = select _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> Data.List.foldl_160 _x_0 (Data.List.flip_158 _x_0 r_1 a_1_0) x_1_1) 
Data.List.foldl_159 _x_0 !r_1 !l_2 = Data.List.foldl_160 _x_0 r_1 l_2
Data.List.deleteFirstsBy eq_0 = Data.List.foldl_159 eq_0
Data.List.foldl_100 op_0 r_1 !_x_2 = select _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> Data.List.foldl_100 op_0 (op_0 r_1 a_1_0) x_1_1) 
Data.List.flip_99 !f_0 a_1 b_2 = f_0 b_2 a_1
Data.List.flip_161 _x_0 !a_1 b_2 = Data.List.deleteBy _x_0 b_2 a_1
Data.List.foldl_162 _x_0 !r_1 !_x_2 = select _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> Data.List.foldl_162 _x_0 (Data.List.flip_161 _x_0 r_1 a_1_0) x_1_1) 
Data.List.differenceBy eq_0 !as_1 !bs_2 = Data.List.foldl_162 eq_0 as_1 bs_2
Data.List.difference !<{_v==_0}> = Data.List.differenceBy (<{StdOverloaded.get_==_6}> <{_v==_0}>)
<{Data.List.c;306;31_85}> eq_0 ys_1 !g_l_2 = <{Data.List.g_c1;306;36_179}> g_l_2 eq_0 ys_1
<{Data.List.g_c1;306;36_179}> !g_l_0 eq_1 ys_2 = select g_l_0 (_predefined._Cons g_h_1_0 g_t_1_1 -> if (StdList.any (eq_1 g_h_1_0) ys_2) (_predefined._Cons g_h_1_0 (<{Data.List.c;306;31_85}> eq_1 ys_2 g_t_1_1)) (<{Data.List.c;306;31_85}> eq_1 ys_2 g_t_1_1)) (_ -> _predefined._Nil)
Data.List.intersectBy _x_0 !_x_1 _x_2 = select _x_1 (_predefined._Nil -> _predefined._Nil) (_ -> select _x_2 (_predefined._Nil -> _predefined._Nil) (_ -> <{Data.List.c;306;31_85}> _x_0 _x_2 _x_1))
Data.List.intersect !<{_v==_0}> = Data.List.intersectBy (<{StdOverloaded.get_==_6}> <{_v==_0}>)
Data.List.foldl_102 op_0 r_1 !_x_2 = select _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> Data.List.foldl_102 op_0 (op_0 r_1 a_1_0) x_1_1) 
Data.List.flip_101 !f_0 a_1 b_2 = f_0 b_2 a_1
Data.List.flip_163 _x_0 !a_1 b_2 = Data.List.deleteBy _x_0 b_2 a_1
Data.List.foldl_164 _x_0 !r_1 !_x_2 = select _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> Data.List.foldl_164 _x_0 (Data.List.flip_163 _x_0 r_1 a_1_0) x_1_1) 
Data.List.unionBy eq_0 !xs_1 ys_2 = <{StdList.++}> xs_1 (Data.List.foldl_164 eq_0 (Data.List.nubBy eq_0 ys_2) xs_1)
Data.List.union !<{_v==_0}> = Data.List.unionBy (<{StdOverloaded.get_==_6}> <{_v==_0}>)
Data.List.isMemberGen !<{_vgEq*_0}> !x_1 !_x_2 = select _x_2 (_predefined._Cons hd_1_0 tl_1_1 -> if (<{GenEq.===}> <{_vgEq*_0}> hd_1_0 x_1) True (Data.List.isMemberGen <{_vgEq*_0}> x_1 tl_1_1)) (_predefined._Nil -> False) 
Data.List.product !<{_v*_0}> !_vone_1 !xs_2 = StdList.prod <{_v*_0}> _vone_1 xs_2
<{Data.List.c;106;19_86}> f_0 !g_l_1 = <{Data.List.g_c1;106;24_180}> g_l_1 f_0
<{Data.List.g_c1;106;24_180}> !g_l_0 f_1 = select g_l_0 (_predefined._Cons g_h_1_0 g_t_1_1 -> _predefined._Cons (f_1 g_h_1_0) (<{Data.List.c;106;19_86}> f_1 g_t_1_1)) (_ -> _predefined._Nil)
Data.List.fmap_66 f_0 !l_1 = <{Data.List.c;106;19_86}> f_0 l_1


|| Converted Records
:: <{Data.List.bimap_s;}> = {!Data.List.bimap_s}
Data.List.get_bimap_s_0 rec = select rec (<{Data.List.bimap_s;}> a1 -> a1)
Data.List.set_bimap_s_0 rec !val = select rec (<{Data.List.bimap_s;}>  a1 -> <{Data.List.bimap_s;}> val)

:: <{Data.List.bimap_ss;}> = {Data.List.bimap_ss}
Data.List.get_bimap_ss_1 rec = select rec (<{Data.List.bimap_ss;}> a1 -> a1)
Data.List.set_bimap_ss_1 rec val = select rec (<{Data.List.bimap_ss;}>  a1 -> <{Data.List.bimap_ss;}> val)

:: <{Data.List.bimap_sss;}> = {Data.List.bimap_sss}
Data.List.get_bimap_sss_2 rec = select rec (<{Data.List.bimap_sss;}> a1 -> a1)
Data.List.set_bimap_sss_2 rec val = select rec (<{Data.List.bimap_sss;}>  a1 -> <{Data.List.bimap_sss;}> val)

:: <{Data.List.gEq_s;}> = {Data.List.gEq_s}
Data.List.get_gEq_s_3 rec = select rec (<{Data.List.gEq_s;}> a1 -> a1)
Data.List.set_gEq_s_3 rec val = select rec (<{Data.List.gEq_s;}>  a1 -> <{Data.List.gEq_s;}> val)

:: <{Data.List.gEq_ss;}> = {Data.List.gEq_ss}
Data.List.get_gEq_ss_4 rec = select rec (<{Data.List.gEq_ss;}> a1 -> a1)
Data.List.set_gEq_ss_4 rec val = select rec (<{Data.List.gEq_ss;}>  a1 -> <{Data.List.gEq_ss;}> val)

:: <{Data.List.gEq_sss;}> = {Data.List.gEq_sss}
Data.List.get_gEq_sss_5 rec = select rec (<{Data.List.gEq_sss;}> a1 -> a1)
Data.List.set_gEq_sss_5 rec val = select rec (<{Data.List.gEq_sss;}>  a1 -> <{Data.List.gEq_sss;}> val)

:: <{Data.List.gEq_ssss;}> = {Data.List.gEq_ssss}
Data.List.get_gEq_ssss_6 rec = select rec (<{Data.List.gEq_ssss;}> a1 -> a1)
Data.List.set_gEq_ssss_6 rec val = select rec (<{Data.List.gEq_ssss;}>  a1 -> <{Data.List.gEq_ssss;}> val)

:: <{Data.List.gEq_sssss;}> = {Data.List.gEq_sssss}
Data.List.get_gEq_sssss_7 rec = select rec (<{Data.List.gEq_sssss;}> a1 -> a1)
Data.List.set_gEq_sssss_7 rec val = select rec (<{Data.List.gEq_sssss;}>  a1 -> <{Data.List.gEq_sssss;}> val)

:: <{Data.List.gEq_ssssss;}> = {Data.List.gEq_ssssss}
Data.List.get_gEq_ssssss_8 rec = select rec (<{Data.List.gEq_ssssss;}> a1 -> a1)
Data.List.set_gEq_ssssss_8 rec val = select rec (<{Data.List.gEq_ssssss;}>  a1 -> <{Data.List.gEq_ssssss;}> val)

:: <{Data.List.gEq_sssssss;}> = {Data.List.gEq_sssssss}
Data.List.get_gEq_sssssss_9 rec = select rec (<{Data.List.gEq_sssssss;}> a1 -> a1)
Data.List.set_gEq_sssssss_9 rec val = select rec (<{Data.List.gEq_sssssss;}>  a1 -> <{Data.List.gEq_sssssss;}> val)

:: <{Data.List.gEq_ssssssss;}> = {Data.List.gEq_ssssssss}
Data.List.get_gEq_ssssssss_10 rec = select rec (<{Data.List.gEq_ssssssss;}> a1 -> a1)
Data.List.set_gEq_ssssssss_10 rec val = select rec (<{Data.List.gEq_ssssssss;}>  a1 -> <{Data.List.gEq_ssssssss;}> val)

:: <{Data.List.gEq_sssssssss;}> = {Data.List.gEq_sssssssss}
Data.List.get_gEq_sssssssss_11 rec = select rec (<{Data.List.gEq_sssssssss;}> a1 -> a1)
Data.List.set_gEq_sssssssss_11 rec val = select rec (<{Data.List.gEq_sssssssss;}>  a1 -> <{Data.List.gEq_sssssssss;}> val)

