|| ?module? Data.Maybe


Data.Maybe.maybe x_0 _x_1 !_x_2 = select _x_2 (Data.Maybe.Nothing -> x_0) (Data.Maybe.Just x_1_0 -> _x_1 x_1_0) 
Data.Maybe.maybeSt st_0 _x_1 !_x_2 = select _x_2 (Data.Maybe.Nothing -> st_0) (Data.Maybe.Just x_1_0 -> _x_1 x_1_0 st_0) 
Data.Maybe.fromMaybe x_0 !mb_1 = Data.Maybe.maybe x_0 StdFunc.id mb_1
Data.Maybe.isNothing !_x_0 = select _x_0 (Data.Maybe.Nothing -> True) (_ -> False)
Data.Maybe.isNothingU !_x_0 = select _x_0 (Data.Maybe.Nothing -> <{_Tuple2!3}> True Data.Maybe.Nothing) (_ -> <{_Tuple2!3}> False _x_0)
Data.Maybe.isJust !_x_0 = select _x_0 (Data.Maybe.Just _x_1_0 -> True) (_ -> False)
Data.Maybe.isJustU !_x_0 = select _x_0 (Data.Maybe.Just x_1_0 -> <{_Tuple2!3}> True (Data.Maybe.Just x_1_0)) (_ -> <{_Tuple2!3}> False _x_0)
Data.Maybe.fromJust !_x_0 = select _x_0 (Data.Maybe.Nothing -> StdMisc.abort "Data.Maybe.fromJust: argument is Nothing") (Data.Maybe.Just x_1_0 -> x_1_0) 
Data.Maybe.maybeToList !_x_0 = select _x_0 (Data.Maybe.Nothing -> _predefined._Nil) (Data.Maybe.Just x_1_0 -> _predefined._Cons x_1_0 _predefined._Nil) 
Data.Maybe.listToMaybe !_x_0 = select _x_0 (_predefined._Nil -> Data.Maybe.Nothing) (_predefined._Cons x_1_0 _x_1_1 -> Data.Maybe.Just x_1_0) 
<{Data.Maybe.c;66;19_15}> !g_l_0 = <{Data.Maybe.g_c1;66;29_69}> g_l_0
<{Data.Maybe.g_c1;66;29_69}> !g_l_0 = select g_l_0 (_predefined._Cons g_h_1_0 g_t_1_1 -> <{Data.Maybe.g_c2;66;29_68}> g_h_1_0 g_t_1_1) (_ -> _predefined._Nil)
<{Data.Maybe.g_c2;66;29_68}> !g_h_0 g_t_1 = select g_h_0 (Data.Maybe.Just x_1_0 -> _predefined._Cons x_1_0 (<{Data.Maybe.c;66;19_15}> g_t_1)) (_ -> <{Data.Maybe.c;66;19_15}> g_t_1)
Data.Maybe.catMaybes !xs_0 = <{Data.Maybe.c;66;19_15}> xs_0
<{Data.Maybe.==_11}> !<{_v==_0}> !_x_1 !maybe_2 = select _x_1 (Data.Maybe.Nothing -> <{Data.Maybe._c;14;27_70}> maybe_2) (Data.Maybe.Just a_1_0 -> <{Data.Maybe._c;17;27_71}> maybe_2 <{_v==_0}> a_1_0) 
<{Data.Maybe._c;17;27_71}> !maybe_0 <{_v==_1}> a_2 = select maybe_0 (Data.Maybe.Just b_1_0 -> <{StdOverloaded.get_==_6}> <{_v==_1}> a_2 b_1_0) (_ -> False)
<{Data.Maybe._c;14;27_70}> !maybe_0 = select maybe_0 (Data.Maybe.Nothing -> True) (_ -> False)
Data.Maybe.fmap_12 f_0 !_x_1 = select _x_1 (Data.Maybe.Nothing -> Data.Maybe.Nothing) (Data.Maybe.Just a_1_0 -> Data.Maybe.Just (f_0 a_1_0)) 
Data.Maybe.toGenericMaybe_23 !x_0 = select x_0 (Data.Maybe.Nothing -> StdGeneric.OBJECT (StdGeneric.LEFT (StdGeneric.CONS StdGeneric.UNIT))) (Data.Maybe.Just x21_1_0 -> StdGeneric.OBJECT (StdGeneric.RIGHT (StdGeneric.CONS x21_1_0))) 
Data.Maybe.gEq_Maybe_13 <{gEq_a_26-0_a_0}> x1_1 x2_2 = GenEq.gEq_OBJECT_13 (GenEq.gEq_EITHER_9 (GenEq.gEq_CONS_10 GenEq.gEq_UNIT_7) (GenEq.gEq_CONS_10 <{gEq_a_26-0_a_0}>)) (Data.Maybe.toGenericMaybe_23 x1_1) (Data.Maybe.toGenericMaybe_23 x2_2)
<{Data.Maybe.TD;Maybe}> _x_0 = _predefined._Nil

:: Data.Maybe.Maybe = Data.Maybe.Nothing | Data.Maybe.Just a1

|| Converted Records
:: <{Data.Maybe.bimap_s;}> = {!Data.Maybe.bimap_s}
Data.Maybe.get_bimap_s_0 rec = select rec (<{Data.Maybe.bimap_s;}> a1 -> a1)
Data.Maybe.set_bimap_s_0 rec !val = select rec (<{Data.Maybe.bimap_s;}>  a1 -> <{Data.Maybe.bimap_s;}> val)

:: <{Data.Maybe.bimap_ss;}> = {Data.Maybe.bimap_ss}
Data.Maybe.get_bimap_ss_1 rec = select rec (<{Data.Maybe.bimap_ss;}> a1 -> a1)
Data.Maybe.set_bimap_ss_1 rec val = select rec (<{Data.Maybe.bimap_ss;}>  a1 -> <{Data.Maybe.bimap_ss;}> val)

:: <{Data.Maybe.bimap_sss;}> = {Data.Maybe.bimap_sss}
Data.Maybe.get_bimap_sss_2 rec = select rec (<{Data.Maybe.bimap_sss;}> a1 -> a1)
Data.Maybe.set_bimap_sss_2 rec val = select rec (<{Data.Maybe.bimap_sss;}>  a1 -> <{Data.Maybe.bimap_sss;}> val)

:: <{Data.Maybe.gEq_s;}> = {Data.Maybe.gEq_s}
Data.Maybe.get_gEq_s_3 rec = select rec (<{Data.Maybe.gEq_s;}> a1 -> a1)
Data.Maybe.set_gEq_s_3 rec val = select rec (<{Data.Maybe.gEq_s;}>  a1 -> <{Data.Maybe.gEq_s;}> val)

:: <{Data.Maybe.gEq_ss;}> = {Data.Maybe.gEq_ss}
Data.Maybe.get_gEq_ss_4 rec = select rec (<{Data.Maybe.gEq_ss;}> a1 -> a1)
Data.Maybe.set_gEq_ss_4 rec val = select rec (<{Data.Maybe.gEq_ss;}>  a1 -> <{Data.Maybe.gEq_ss;}> val)

:: <{Data.Maybe.gEq_sss;}> = {Data.Maybe.gEq_sss}
Data.Maybe.get_gEq_sss_5 rec = select rec (<{Data.Maybe.gEq_sss;}> a1 -> a1)
Data.Maybe.set_gEq_sss_5 rec val = select rec (<{Data.Maybe.gEq_sss;}>  a1 -> <{Data.Maybe.gEq_sss;}> val)

:: <{Data.Maybe.gEq_ssss;}> = {Data.Maybe.gEq_ssss}
Data.Maybe.get_gEq_ssss_6 rec = select rec (<{Data.Maybe.gEq_ssss;}> a1 -> a1)
Data.Maybe.set_gEq_ssss_6 rec val = select rec (<{Data.Maybe.gEq_ssss;}>  a1 -> <{Data.Maybe.gEq_ssss;}> val)

:: <{Data.Maybe.gEq_sssss;}> = {Data.Maybe.gEq_sssss}
Data.Maybe.get_gEq_sssss_7 rec = select rec (<{Data.Maybe.gEq_sssss;}> a1 -> a1)
Data.Maybe.set_gEq_sssss_7 rec val = select rec (<{Data.Maybe.gEq_sssss;}>  a1 -> <{Data.Maybe.gEq_sssss;}> val)

:: <{Data.Maybe.gEq_ssssss;}> = {Data.Maybe.gEq_ssssss}
Data.Maybe.get_gEq_ssssss_8 rec = select rec (<{Data.Maybe.gEq_ssssss;}> a1 -> a1)
Data.Maybe.set_gEq_ssssss_8 rec val = select rec (<{Data.Maybe.gEq_ssssss;}>  a1 -> <{Data.Maybe.gEq_ssssss;}> val)

:: <{Data.Maybe.gEq_sssssss;}> = {Data.Maybe.gEq_sssssss}
Data.Maybe.get_gEq_sssssss_9 rec = select rec (<{Data.Maybe.gEq_sssssss;}> a1 -> a1)
Data.Maybe.set_gEq_sssssss_9 rec val = select rec (<{Data.Maybe.gEq_sssssss;}>  a1 -> <{Data.Maybe.gEq_sssssss;}> val)

:: <{Data.Maybe.gEq_ssssssss;}> = {Data.Maybe.gEq_ssssssss}
Data.Maybe.get_gEq_ssssssss_10 rec = select rec (<{Data.Maybe.gEq_ssssssss;}> a1 -> a1)
Data.Maybe.set_gEq_ssssssss_10 rec val = select rec (<{Data.Maybe.gEq_ssssssss;}>  a1 -> <{Data.Maybe.gEq_ssssssss;}> val)

:: <{Data.Maybe.gEq_sssssssss;}> = {Data.Maybe.gEq_sssssssss}
Data.Maybe.get_gEq_sssssssss_11 rec = select rec (<{Data.Maybe.gEq_sssssssss;}> a1 -> a1)
Data.Maybe.set_gEq_sssssssss_11 rec val = select rec (<{Data.Maybe.gEq_sssssssss;}>  a1 -> <{Data.Maybe.gEq_sssssssss;}> val)

