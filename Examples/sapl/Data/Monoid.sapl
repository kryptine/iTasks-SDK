|| ?module? Data.Monoid


Data.Monoid.foldr_56 op_0 r_1 !_x_2 = select _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> op_0 a_1_0 (Data.Monoid.foldr_56 op_0 r_1 x_1_1)) 
Data.Monoid.mconcat !_vMonoid_0 !xs_1 = Data.Monoid.foldr_56 (Data.Monoid.get_mappend_0 (Data.Monoid.get_Semigroup_2 _vMonoid_0)) (Data.Monoid.get_mempty_1 _vMonoid_0) xs_1
<{Data.Monoid.<++>}> !_vSemigroup_0 ma_1 mb_2 = Data.Monoid.get_mappend_0 _vSemigroup_0 ma_1 mb_2
Data.Monoid.getDual !_x_0 = select _x_0 (Data.Monoid.Dual x_1_0 -> x_1_0) 
Data.Monoid.appEndo !_x_0 = select _x_0 (Data.Monoid.Endo f_1_0 -> f_1_0) 
Data.Monoid.getAll !_x_0 = select _x_0 (Data.Monoid.All b_1_0 -> b_1_0) 
Data.Monoid.getAny !_x_0 = select _x_0 (Data.Monoid.Any b_1_0 -> b_1_0) 
Data.Monoid.getSum !_x_0 = select _x_0 (Data.Monoid.Sum x_1_0 -> x_1_0) 
Data.Monoid.getProduct !_x_0 = select _x_0 (Data.Monoid.Product x_1_0 -> x_1_0) 
Data.Monoid.getFirst !_x_0 = select _x_0 (Data.Monoid.First x_1_0 -> x_1_0) 
Data.Monoid.getLast !_x_0 = select _x_0 (Data.Monoid.Last x_1_0 -> x_1_0) 
Data.Monoid.mappend_10 !xs_0 ys_1 = <{StdList.++}> xs_0 ys_1
Data.Monoid.anon_54 !_vSemigroup_0 f_1 g_2 x_3 = Data.Monoid.get_mappend_0 _vSemigroup_0 (f_1 x_3) (g_2 x_3)
Data.Monoid.mappend_11 !_vSemigroup_0 f_1 g_2 = Data.Monoid.anon_54 _vSemigroup_0 f_1 g_2
Data.Monoid.mappend_12 _x_0 _x_1 = _predefined._Unit
Data.Monoid.mappend_13 _x_0 _x_1 = Data.Void.Void
Data.Monoid.mappend_14 !_vSemigroup_0 !_vSemigroup_1 !_x_2 !_x_3 = select _x_2 (_Tuple2 a1_1_0 b1_1_1 -> select _x_3 (_Tuple2 a2_2_0 b2_2_1 -> _Tuple2 (Data.Monoid.get_mappend_0 _vSemigroup_0 a1_1_0 a2_2_0) (Data.Monoid.get_mappend_0 _vSemigroup_1 b1_1_1 b2_2_1)) ) 
Data.Monoid.mappend_15 !_vSemigroup_0 !_vSemigroup_1 !_vSemigroup_2 !_x_3 !_x_4 = select _x_3 (_Tuple3 a1_1_0 b1_1_1 c1_1_2 -> select _x_4 (_Tuple3 a2_2_0 b2_2_1 c2_2_2 -> _Tuple3 (Data.Monoid.get_mappend_0 _vSemigroup_0 a1_1_0 a2_2_0) (Data.Monoid.get_mappend_0 _vSemigroup_1 b1_1_1 b2_2_1) (Data.Monoid.get_mappend_0 _vSemigroup_2 c1_1_2 c2_2_2)) ) 
Data.Monoid.mappend_16 !_vSemigroup_0 !_vSemigroup_1 !_vSemigroup_2 !_vSemigroup_3 !_x_4 !_x_5 = select _x_4 (_Tuple4 a1_1_0 b1_1_1 c1_1_2 d1_1_3 -> select _x_5 (_Tuple4 a2_2_0 b2_2_1 c2_2_2 d2_2_3 -> _Tuple4 (Data.Monoid.get_mappend_0 _vSemigroup_0 a1_1_0 a2_2_0) (Data.Monoid.get_mappend_0 _vSemigroup_1 b1_1_1 b2_2_1) (Data.Monoid.get_mappend_0 _vSemigroup_2 c1_1_2 c2_2_2) (Data.Monoid.get_mappend_0 _vSemigroup_3 d1_1_3 d2_2_3)) ) 
Data.Monoid.mappend_17 !_vSemigroup_0 !_vSemigroup_1 !_vSemigroup_2 !_vSemigroup_3 !_vSemigroup_4 !_x_5 !_x_6 = select _x_5 (_Tuple5 a1_1_0 b1_1_1 c1_1_2 d1_1_3 e1_1_4 -> select _x_6 (_Tuple5 a2_2_0 b2_2_1 c2_2_2 d2_2_3 e2_2_4 -> _Tuple5 (Data.Monoid.get_mappend_0 _vSemigroup_0 a1_1_0 a2_2_0) (Data.Monoid.get_mappend_0 _vSemigroup_1 b1_1_1 b2_2_1) (Data.Monoid.get_mappend_0 _vSemigroup_2 c1_1_2 c2_2_2) (Data.Monoid.get_mappend_0 _vSemigroup_3 d1_1_3 d2_2_3) (Data.Monoid.get_mappend_0 _vSemigroup_4 e1_1_4 e2_2_4)) ) 
Data.Monoid.mappend_18 !_vSemigroup_0 !_x_1 !m_2 = select _x_1 (Data.Maybe.Nothing -> m_2) (_ -> select m_2 (Data.Maybe.Nothing -> _x_1) (Data.Maybe.Just m2_1_0 -> select _x_1 (Data.Maybe.Just m1_2_0 -> Data.Maybe.Just (Data.Monoid.get_mappend_0 _vSemigroup_0 m1_2_0 m2_1_0)) ) )
Data.Monoid.mempty_19 = _predefined._Nil
Data.Monoid.anon_55 !_vMonoid_0 _x_1 = Data.Monoid.get_mempty_1 _vMonoid_0
Data.Monoid.mempty_20 !_vMonoid_0 = Data.Monoid.anon_55 _vMonoid_0
Data.Monoid.mempty_21 = _predefined._Unit
Data.Monoid.mempty_22 = Data.Void.Void
Data.Monoid.mempty_23 !_vMonoid_0 !_vMonoid_1 = _Tuple2 (Data.Monoid.get_mempty_1 _vMonoid_0) (Data.Monoid.get_mempty_1 _vMonoid_1)
Data.Monoid.mempty_24 !_vMonoid_0 !_vMonoid_1 !_vMonoid_2 = _Tuple3 (Data.Monoid.get_mempty_1 _vMonoid_0) (Data.Monoid.get_mempty_1 _vMonoid_1) (Data.Monoid.get_mempty_1 _vMonoid_2)
Data.Monoid.mempty_25 !_vMonoid_0 !_vMonoid_1 !_vMonoid_2 !_vMonoid_3 = _Tuple4 (Data.Monoid.get_mempty_1 _vMonoid_0) (Data.Monoid.get_mempty_1 _vMonoid_1) (Data.Monoid.get_mempty_1 _vMonoid_2) (Data.Monoid.get_mempty_1 _vMonoid_3)
Data.Monoid.mempty_26 !_vMonoid_0 !_vMonoid_1 !_vMonoid_2 !_vMonoid_3 !_vMonoid_4 = _Tuple5 (Data.Monoid.get_mempty_1 _vMonoid_0) (Data.Monoid.get_mempty_1 _vMonoid_1) (Data.Monoid.get_mempty_1 _vMonoid_2) (Data.Monoid.get_mempty_1 _vMonoid_3) (Data.Monoid.get_mempty_1 _vMonoid_4)
Data.Monoid.mempty_27 = Data.Maybe.Nothing
Data.Monoid.mappend_28 !_vSemigroup_0 !_x_1 !_x_2 = select _x_1 (Data.Monoid.Dual x_1_0 -> select _x_2 (Data.Monoid.Dual y_2_0 -> Data.Monoid.Dual (Data.Monoid.get_mappend_0 _vSemigroup_0 y_2_0 x_1_0)) ) 
Data.Monoid.anon_57 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Data.Monoid.mappend_29 !_x_0 !_x_1 = select _x_0 (Data.Monoid.Endo f_1_0 -> select _x_1 (Data.Monoid.Endo g_2_0 -> Data.Monoid.Endo (Data.Monoid.anon_57 f_1_0 g_2_0)) ) 
Data.Monoid.mappend_30 !_x_0 !_x_1 = select _x_0 (Data.Monoid.All x_1_0 -> select _x_1 (Data.Monoid.All y_2_0 -> Data.Monoid.All (Data.Monoid._f101_101 x_1_0 y_2_0)) ) 
Data.Monoid._f101_101 !x_0 y_1 = select x_0 (True -> y_1) (_ -> False)
Data.Monoid.mappend_31 !_x_0 !_x_1 = select _x_0 (Data.Monoid.Any x_1_0 -> select _x_1 (Data.Monoid.Any y_2_0 -> Data.Monoid.Any (Data.Monoid._f102_102 x_1_0 y_2_0)) ) 
Data.Monoid._f102_102 !x_0 y_1 = select x_0 (True -> True) (_ -> y_1)
Data.Monoid.mappend_32 !<{_v+_0}> !_vzero_1 !_x_2 !_x_3 = select _x_2 (Data.Monoid.Sum x_1_0 -> select _x_3 (Data.Monoid.Sum y_2_0 -> Data.Monoid.Sum (<{StdOverloaded.get_+_0}> <{_v+_0}> x_1_0 y_2_0)) ) 
Data.Monoid.mappend_33 !<{_v*_0}> !_vone_1 !_x_2 !_x_3 = select _x_2 (Data.Monoid.Product x_1_0 -> select _x_3 (Data.Monoid.Product y_2_0 -> Data.Monoid.Product (<{StdOverloaded.get_*_3}> <{_v*_0}> x_1_0 y_2_0)) ) 
Data.Monoid.mappend_34 !r_0 _x_1 = select r_0 (Data.Monoid.First _x_1_0 -> select _x_1_0 (Data.Maybe.Just _x_2_0 -> r_0) (Data.Maybe.Nothing -> _x_1) ) 
Data.Monoid.mappend_35 _x_0 !r_1 = select r_1 (Data.Monoid.Last _x_1_0 -> select _x_1_0 (Data.Maybe.Just _x_2_0 -> r_1) (Data.Maybe.Nothing -> _x_0) ) 
Data.Monoid.mempty_36 !_vMonoid_0 = Data.Monoid.Dual (Data.Monoid.get_mempty_1 _vMonoid_0)
Data.Monoid.mempty_37 = Data.Monoid.Endo StdFunc.id
Data.Monoid.mempty_38 = Data.Monoid.All True
Data.Monoid.mempty_39 = Data.Monoid.Any False
Data.Monoid.mempty_40 !<{_v+_0}> !_vzero_1 = Data.Monoid.Sum (StdOverloaded.get_zero_2 _vzero_1)
Data.Monoid.mempty_41 !<{_v*_0}> !_vone_1 = Data.Monoid.Product (StdOverloaded.get_one_5 _vone_1)
Data.Monoid.mempty_42 = Data.Monoid.First Data.Maybe.Nothing
Data.Monoid.mempty_43 = Data.Monoid.Last Data.Maybe.Nothing
<{Data.Monoid.TD;Dual}> _x_0 = _predefined._Nil
<{Data.Monoid.TD;Endo}> _x_0 = _predefined._Nil
<{Data.Monoid.TD;All}> _x_0 = _predefined._Nil
<{Data.Monoid.TD;Any}> _x_0 = _predefined._Nil
<{Data.Monoid.TD;Sum}> _x_0 = _predefined._Nil
<{Data.Monoid.TD;Product}> _x_0 = _predefined._Nil
<{Data.Monoid.TD;First}> _x_0 = _predefined._Nil
<{Data.Monoid.TD;Last}> _x_0 = _predefined._Nil
<{Data.Monoid.TD;Semigroup;}> _x_0 = _predefined._Nil
<{Data.Monoid.TD;Monoid;}> _x_0 = _predefined._Nil

:: Data.Monoid.Dual = Data.Monoid.Dual a1
:: Data.Monoid.Endo = Data.Monoid.Endo a1
:: Data.Monoid.All = Data.Monoid.All a1
:: Data.Monoid.Any = Data.Monoid.Any a1
:: Data.Monoid.Sum = Data.Monoid.Sum a1
:: Data.Monoid.Product = Data.Monoid.Product a1
:: Data.Monoid.First = Data.Monoid.First a1
:: Data.Monoid.Last = Data.Monoid.Last a1

|| Converted Records
:: <{Data.Monoid.Semigroup;}> = {!Data.Monoid.mappend}
Data.Monoid.get_mappend_0 rec = select rec (<{Data.Monoid.Semigroup;}> a1 -> a1)
Data.Monoid.set_mappend_0 rec !val = select rec (<{Data.Monoid.Semigroup;}>  a1 -> <{Data.Monoid.Semigroup;}> val)

:: <{Data.Monoid.Monoid;}> = {!Data.Monoid.mempty, Data.Monoid.Semigroup}
Data.Monoid.get_mempty_1 rec = select rec (<{Data.Monoid.Monoid;}> a1 a2 -> a1)
Data.Monoid.get_Semigroup_2 rec = select rec (<{Data.Monoid.Monoid;}> a1 a2 -> a2)
Data.Monoid.set_mempty_1 rec !val = select rec (<{Data.Monoid.Monoid;}>  a1 a2 -> <{Data.Monoid.Monoid;}> val a2)
Data.Monoid.set_Semigroup_2 rec val = select rec (<{Data.Monoid.Monoid;}>  a1 a2 -> <{Data.Monoid.Monoid;}> a1 val)

:: <{Data.Monoid.bimap_s;}> = {Data.Monoid.bimap_s}
Data.Monoid.get_bimap_s_3 rec = select rec (<{Data.Monoid.bimap_s;}> a1 -> a1)
Data.Monoid.set_bimap_s_3 rec val = select rec (<{Data.Monoid.bimap_s;}>  a1 -> <{Data.Monoid.bimap_s;}> val)

:: <{Data.Monoid.bimap_ss;}> = {Data.Monoid.bimap_ss}
Data.Monoid.get_bimap_ss_4 rec = select rec (<{Data.Monoid.bimap_ss;}> a1 -> a1)
Data.Monoid.set_bimap_ss_4 rec val = select rec (<{Data.Monoid.bimap_ss;}>  a1 -> <{Data.Monoid.bimap_ss;}> val)

:: <{Data.Monoid.bimap_sss;}> = {Data.Monoid.bimap_sss}
Data.Monoid.get_bimap_sss_5 rec = select rec (<{Data.Monoid.bimap_sss;}> a1 -> a1)
Data.Monoid.set_bimap_sss_5 rec val = select rec (<{Data.Monoid.bimap_sss;}>  a1 -> <{Data.Monoid.bimap_sss;}> val)

:: <{Data.Monoid.gEq_s;}> = {Data.Monoid.gEq_s}
Data.Monoid.get_gEq_s_6 rec = select rec (<{Data.Monoid.gEq_s;}> a1 -> a1)
Data.Monoid.set_gEq_s_6 rec val = select rec (<{Data.Monoid.gEq_s;}>  a1 -> <{Data.Monoid.gEq_s;}> val)

:: <{Data.Monoid.gEq_ss;}> = {Data.Monoid.gEq_ss}
Data.Monoid.get_gEq_ss_7 rec = select rec (<{Data.Monoid.gEq_ss;}> a1 -> a1)
Data.Monoid.set_gEq_ss_7 rec val = select rec (<{Data.Monoid.gEq_ss;}>  a1 -> <{Data.Monoid.gEq_ss;}> val)

:: <{Data.Monoid.gEq_sss;}> = {Data.Monoid.gEq_sss}
Data.Monoid.get_gEq_sss_8 rec = select rec (<{Data.Monoid.gEq_sss;}> a1 -> a1)
Data.Monoid.set_gEq_sss_8 rec val = select rec (<{Data.Monoid.gEq_sss;}>  a1 -> <{Data.Monoid.gEq_sss;}> val)

:: <{Data.Monoid.gEq_ssss;}> = {Data.Monoid.gEq_ssss}
Data.Monoid.get_gEq_ssss_9 rec = select rec (<{Data.Monoid.gEq_ssss;}> a1 -> a1)
Data.Monoid.set_gEq_ssss_9 rec val = select rec (<{Data.Monoid.gEq_ssss;}>  a1 -> <{Data.Monoid.gEq_ssss;}> val)

:: <{Data.Monoid.gEq_sssss;}> = {Data.Monoid.gEq_sssss}
Data.Monoid.get_gEq_sssss_10 rec = select rec (<{Data.Monoid.gEq_sssss;}> a1 -> a1)
Data.Monoid.set_gEq_sssss_10 rec val = select rec (<{Data.Monoid.gEq_sssss;}>  a1 -> <{Data.Monoid.gEq_sssss;}> val)

:: <{Data.Monoid.gEq_ssssss;}> = {Data.Monoid.gEq_ssssss}
Data.Monoid.get_gEq_ssssss_11 rec = select rec (<{Data.Monoid.gEq_ssssss;}> a1 -> a1)
Data.Monoid.set_gEq_ssssss_11 rec val = select rec (<{Data.Monoid.gEq_ssssss;}>  a1 -> <{Data.Monoid.gEq_ssssss;}> val)

:: <{Data.Monoid.gEq_sssssss;}> = {Data.Monoid.gEq_sssssss}
Data.Monoid.get_gEq_sssssss_12 rec = select rec (<{Data.Monoid.gEq_sssssss;}> a1 -> a1)
Data.Monoid.set_gEq_sssssss_12 rec val = select rec (<{Data.Monoid.gEq_sssssss;}>  a1 -> <{Data.Monoid.gEq_sssssss;}> val)

:: <{Data.Monoid.gEq_ssssssss;}> = {Data.Monoid.gEq_ssssssss}
Data.Monoid.get_gEq_ssssssss_13 rec = select rec (<{Data.Monoid.gEq_ssssssss;}> a1 -> a1)
Data.Monoid.set_gEq_ssssssss_13 rec val = select rec (<{Data.Monoid.gEq_ssssssss;}>  a1 -> <{Data.Monoid.gEq_ssssssss;}> val)

:: <{Data.Monoid.gEq_sssssssss;}> = {Data.Monoid.gEq_sssssssss}
Data.Monoid.get_gEq_sssssssss_14 rec = select rec (<{Data.Monoid.gEq_sssssssss;}> a1 -> a1)
Data.Monoid.set_gEq_sssssssss_14 rec val = select rec (<{Data.Monoid.gEq_sssssssss;}>  a1 -> <{Data.Monoid.gEq_sssssssss;}> val)

