|| ?module? Data.Set


Data.Set.member !<{_v<_0}> !<{_v==_1}> !x_2 !_x_3 = select _x_3 (Data.Set.Tip -> False) (Data.Set.Bin _x_1_0 y_1_1 l_1_2 r_1_3 -> <{Data.Set._c;67;11_113}> (<{Data.Set._if;18;17_112}> (<{StdOverloaded.get_<_7}> <{_v<_0}> x_2 y_1_1) <{_v<_0}> y_1_1 x_2) <{_v<_0}> <{_v==_1}> x_2 l_1_2 r_1_3) 
<{Data.Set._c;67;11_113}> !_x_0 <{_v<_1}> <{_v==_2}> x_3 l_4 r_5 = select _x_0 (Data.Set.LT -> Data.Set.member <{_v<_1}> <{_v==_2}> x_3 l_4) (Data.Set.GT -> Data.Set.member <{_v<_1}> <{_v==_2}> x_3 r_5) (Data.Set.EQ -> True) 
<{Data.Set._if;18;17_112}> !_x_0 <{_v<_1}> y_2 x_3 = select _x_0 (True -> Data.Set.LT) (_ -> if (<{StdOverloaded.get_<_7}> <{_v<_1}> y_2 x_3) Data.Set.GT Data.Set.EQ)
Data.Set.singleton !x_0 = Data.Set.Bin 1 x_0 Data.Set.Tip Data.Set.Tip
Data.Set.balanceL !x_0 !l_1 !r_2 = <{Data.Set._c;560;18_121}> r_2 l_1 x_0
<{Data.Set._c;560;18_121}> !r_0 !l_1 !x_2 = select r_0 (Data.Set.Tip -> <{Data.Set._c;561;10_116}> l_1 x_2) (Data.Set.Bin rs_1_0 _x_1_1 _x_1_2 _x_1_3 -> <{Data.Set._c;570;21_120}> l_1 rs_1_0 x_2 r_0) 
<{Data.Set._c;570;21_120}> !l_0 !rs_1 !x_2 !r_3 = select l_0 (Data.Set.Tip -> Data.Set.Bin (<{StdInt.+_6}> 1 rs_1) x_2 Data.Set.Tip r_3) (Data.Set.Bin ls_1_0 lx_1_1 ll_1_2 lr_1_3 -> if (<{StdInt.<_17}> (<{StdInt.*_9}> 4 rs_1) ls_1_0) (<{Data.Set._c;574;35_119}> (_Tuple2 ll_1_2 lr_1_3) ls_1_0 rs_1 lx_1_1 ll_1_2 x_2 lr_1_3 r_3) (Data.Set.Bin (<{StdInt.+_6}> (<{StdInt.+_6}> 1 ls_1_0) rs_1) x_2 l_0 r_3)) 
<{Data.Set._c;574;35_119}> !_x_0 !ls_1 !rs_2 !lx_3 !ll_4 !x_5 lr_6 !r_7 = select _x_0 (_Tuple2 _x_1_0 _x_1_1 -> select _x_1_0 (Data.Set.Bin lls_2_0 _x_2_1 _x_2_2 _x_2_3 -> select _x_1_1 (Data.Set.Bin lrs_3_0 lrx_3_1 lrl_3_2 lrr_3_3 -> if (<{StdInt.<_17}> lrs_3_0 (<{StdInt.*_9}> 2 lls_2_0)) (Data.Set.Bin (<{StdInt.+_6}> (<{StdInt.+_6}> 1 ls_1) rs_2) lx_3 ll_4 (Data.Set.Bin (<{StdInt.+_6}> (<{StdInt.+_6}> 1 rs_2) lrs_3_0) x_5 lr_6 r_7)) (Data.Set.Bin (<{StdInt.+_6}> (<{StdInt.+_6}> 1 ls_1) rs_2) lrx_3_1 (Data.Set.Bin (<{StdInt.+_6}> (<{StdInt.+_6}> 1 lls_2_0) (<{Data.Set._c;61;12_117}> lrl_3_2)) lx_3 ll_4 lrl_3_2) (Data.Set.Bin (<{StdInt.+_6}> (<{StdInt.+_6}> 1 rs_2) (<{Data.Set._c;61;12_118}> lrr_3_3)) x_5 lrr_3_3 r_7))) ) (_ -> StdMisc.abort "Failure in Data.Map.balanceL")) 
<{Data.Set._c;61;12_118}> !lrr_0 = select lrr_0 (Data.Set.Tip -> 0) (Data.Set.Bin sz_1_0 _x_1_1 _x_1_2 _x_1_3 -> sz_1_0) 
<{Data.Set._c;61;12_117}> !lrl_0 = select lrl_0 (Data.Set.Tip -> 0) (Data.Set.Bin sz_1_0 _x_1_1 _x_1_2 _x_1_3 -> sz_1_0) 
<{Data.Set._c;561;10_116}> !l_0 !x_1 = select l_0 (Data.Set.Tip -> Data.Set.Bin 1 x_1 Data.Set.Tip Data.Set.Tip) (Data.Set.Bin _x_1_0 _x_1_1 _x_1_2 _x_1_3 -> select _x_1_2 (Data.Set.Tip -> select _x_1_3 (Data.Set.Tip -> Data.Set.Bin 2 x_1 l_0 Data.Set.Tip) (Data.Set.Bin _x_3_0 lrx_3_1 _x_3_2 _x_3_3 -> Data.Set.Bin 3 lrx_3_1 (Data.Set.Bin 1 _x_1_1 Data.Set.Tip Data.Set.Tip) (Data.Set.Bin 1 x_1 Data.Set.Tip Data.Set.Tip)) ) (Data.Set.Bin _x_2_0 _x_2_1 _x_2_2 _x_2_3 -> select _x_1_3 (Data.Set.Tip -> Data.Set.Bin 3 _x_1_1 _x_1_2 (Data.Set.Bin 1 x_1 Data.Set.Tip Data.Set.Tip)) (Data.Set.Bin lrs_3_0 lrx_3_1 lrl_3_2 lrr_3_3 -> if (<{StdInt.<_17}> lrs_3_0 (<{StdInt.*_9}> 2 _x_2_0)) (Data.Set.Bin (<{StdInt.+_6}> 1 _x_1_0) _x_1_1 _x_1_2 (Data.Set.Bin (<{StdInt.+_6}> 1 lrs_3_0) x_1 _x_1_3 Data.Set.Tip)) (Data.Set.Bin (<{StdInt.+_6}> 1 _x_1_0) lrx_3_1 (Data.Set.Bin (<{StdInt.+_6}> (<{StdInt.+_6}> 1 _x_2_0) (<{Data.Set._c;61;12_114}> lrl_3_2)) _x_1_1 _x_1_2 lrl_3_2) (Data.Set.Bin (<{StdInt.+_6}> 1 (<{Data.Set._c;61;12_115}> lrr_3_3)) x_1 lrr_3_3 Data.Set.Tip))) ) ) 
<{Data.Set._c;61;12_115}> !lrr_0 = select lrr_0 (Data.Set.Tip -> 0) (Data.Set.Bin sz_1_0 _x_1_1 _x_1_2 _x_1_3 -> sz_1_0) 
<{Data.Set._c;61;12_114}> !lrl_0 = select lrl_0 (Data.Set.Tip -> 0) (Data.Set.Bin sz_1_0 _x_1_1 _x_1_2 _x_1_3 -> sz_1_0) 
Data.Set.insertMin !x_0 !_x_1 = select _x_1 (Data.Set.Tip -> Data.Set.singleton x_0) (Data.Set.Bin _x_1_0 y_1_1 l_1_2 r_1_3 -> Data.Set.balanceL y_1_1 (Data.Set.insertMin x_0 l_1_2) r_1_3) 
Data.Set.balanceR !x_0 !l_1 !r_2 = <{Data.Set._c;584;18_129}> l_1 r_2 x_0
<{Data.Set._c;584;18_129}> !l_0 !r_1 !x_2 = select l_0 (Data.Set.Tip -> <{Data.Set._c;585;10_124}> r_1 x_2) (Data.Set.Bin ls_1_0 _x_1_1 _x_1_2 _x_1_3 -> <{Data.Set._c;594;21_128}> r_1 ls_1_0 x_2 l_0) 
<{Data.Set._c;594;21_128}> !r_0 !ls_1 !x_2 !l_3 = select r_0 (Data.Set.Tip -> Data.Set.Bin (<{StdInt.+_6}> 1 ls_1) x_2 l_3 Data.Set.Tip) (Data.Set.Bin rs_1_0 rx_1_1 rl_1_2 rr_1_3 -> if (<{StdInt.<_17}> (<{StdInt.*_9}> 4 ls_1) rs_1_0) (<{Data.Set._c;598;35_127}> (_Tuple2 rl_1_2 rr_1_3) ls_1 rs_1_0 rx_1_1 x_2 l_3 rl_1_2 rr_1_3) (Data.Set.Bin (<{StdInt.+_6}> (<{StdInt.+_6}> 1 ls_1) rs_1_0) x_2 l_3 r_0)) 
<{Data.Set._c;598;35_127}> !_x_0 !ls_1 !rs_2 !rx_3 !x_4 !l_5 rl_6 !rr_7 = select _x_0 (_Tuple2 _x_1_0 _x_1_1 -> select _x_1_0 (Data.Set.Bin rls_2_0 rlx_2_1 rll_2_2 rlr_2_3 -> select _x_1_1 (Data.Set.Bin rrs_3_0 _x_3_1 _x_3_2 _x_3_3 -> if (<{StdInt.<_17}> rls_2_0 (<{StdInt.*_9}> 2 rrs_3_0)) (Data.Set.Bin (<{StdInt.+_6}> (<{StdInt.+_6}> 1 ls_1) rs_2) rx_3 (Data.Set.Bin (<{StdInt.+_6}> (<{StdInt.+_6}> 1 ls_1) rls_2_0) x_4 l_5 rl_6) rr_7) (Data.Set.Bin (<{StdInt.+_6}> (<{StdInt.+_6}> 1 ls_1) rs_2) rlx_2_1 (Data.Set.Bin (<{StdInt.+_6}> (<{StdInt.+_6}> 1 ls_1) (<{Data.Set._c;61;12_125}> rll_2_2)) x_4 l_5 rll_2_2) (Data.Set.Bin (<{StdInt.+_6}> (<{StdInt.+_6}> 1 rrs_3_0) (<{Data.Set._c;61;12_126}> rlr_2_3)) rx_3 rlr_2_3 rr_7))) ) (_ -> StdMisc.abort "Failure in Data.Map.balanceR")) 
<{Data.Set._c;61;12_126}> !rlr_0 = select rlr_0 (Data.Set.Tip -> 0) (Data.Set.Bin sz_1_0 _x_1_1 _x_1_2 _x_1_3 -> sz_1_0) 
<{Data.Set._c;61;12_125}> !rll_0 = select rll_0 (Data.Set.Tip -> 0) (Data.Set.Bin sz_1_0 _x_1_1 _x_1_2 _x_1_3 -> sz_1_0) 
<{Data.Set._c;585;10_124}> !r_0 !x_1 = select r_0 (Data.Set.Tip -> Data.Set.Bin 1 x_1 Data.Set.Tip Data.Set.Tip) (Data.Set.Bin _x_1_0 _x_1_1 _x_1_2 _x_1_3 -> select _x_1_2 (Data.Set.Tip -> select _x_1_3 (Data.Set.Tip -> Data.Set.Bin 2 x_1 Data.Set.Tip r_0) (Data.Set.Bin _x_3_0 _x_3_1 _x_3_2 _x_3_3 -> Data.Set.Bin 3 _x_1_1 (Data.Set.Bin 1 x_1 Data.Set.Tip Data.Set.Tip) _x_1_3) ) (Data.Set.Bin _x_2_0 rlx_2_1 _x_2_2 _x_2_3 -> select _x_1_3 (Data.Set.Tip -> Data.Set.Bin 3 rlx_2_1 (Data.Set.Bin 1 x_1 Data.Set.Tip Data.Set.Tip) (Data.Set.Bin 1 _x_1_1 Data.Set.Tip Data.Set.Tip)) (Data.Set.Bin rrs_3_0 _x_3_1 _x_3_2 _x_3_3 -> if (<{StdInt.<_17}> _x_2_0 (<{StdInt.*_9}> 2 rrs_3_0)) (Data.Set.Bin (<{StdInt.+_6}> 1 _x_1_0) _x_1_1 (Data.Set.Bin (<{StdInt.+_6}> 1 _x_2_0) x_1 Data.Set.Tip _x_1_2) _x_1_3) (Data.Set.Bin (<{StdInt.+_6}> 1 _x_1_0) rlx_2_1 (Data.Set.Bin (<{StdInt.+_6}> 1 (<{Data.Set._c;61;12_122}> _x_2_2)) x_1 Data.Set.Tip _x_2_2) (Data.Set.Bin (<{StdInt.+_6}> (<{StdInt.+_6}> 1 rrs_3_0) (<{Data.Set._c;61;12_123}> _x_2_3)) _x_1_1 _x_2_3 _x_1_3))) ) ) 
<{Data.Set._c;61;12_123}> !_x_0 = select _x_0 (Data.Set.Tip -> 0) (Data.Set.Bin sz_1_0 _x_1_1 _x_1_2 _x_1_3 -> sz_1_0) 
<{Data.Set._c;61;12_122}> !_x_0 = select _x_0 (Data.Set.Tip -> 0) (Data.Set.Bin sz_1_0 _x_1_1 _x_1_2 _x_1_3 -> sz_1_0) 
Data.Set.insertMax !x_0 !_x_1 = select _x_1 (Data.Set.Tip -> Data.Set.singleton x_0) (Data.Set.Bin _x_1_0 y_1_1 l_1_2 r_1_3 -> Data.Set.balanceR y_1_1 l_1_2 (Data.Set.insertMax x_0 r_1_3)) 
Data.Set.link !x_0 !_x_1 !r_2 = select _x_1 (Data.Set.Tip -> Data.Set.insertMin x_0 r_2) (_ -> select r_2 (Data.Set.Tip -> Data.Set.insertMax x_0 _x_1) (Data.Set.Bin sizeR_1_0 z_1_1 lz_1_2 rz_1_3 -> select _x_1 (Data.Set.Bin sizeL_2_0 y_2_1 ly_2_2 ry_2_3 -> if (<{StdInt.<_17}> (<{StdInt.*_9}> 4 sizeL_2_0) sizeR_1_0) (Data.Set.balanceL z_1_1 (Data.Set.link x_0 _x_1 lz_1_2) rz_1_3) (if (<{StdInt.<_17}> (<{StdInt.*_9}> 4 sizeR_1_0) sizeL_2_0) (Data.Set.balanceR y_2_1 ly_2_2 (Data.Set.link x_0 ry_2_3 r_2)) (Data.Set.Bin (<{StdInt.+_6}> (<{StdInt.+_6}> (<{Data.Set._c;61;12_130}> _x_1) (<{Data.Set._c;61;12_131}> r_2)) 1) x_0 _x_1 r_2))) ) )
<{Data.Set._c;61;12_131}> !r_0 = select r_0 (Data.Set.Tip -> 0) (Data.Set.Bin sz_1_0 _x_1_1 _x_1_2 _x_1_3 -> sz_1_0) 
<{Data.Set._c;61;12_130}> !_x_0 = select _x_0 (Data.Set.Tip -> 0) (Data.Set.Bin sz_1_0 _x_1_1 _x_1_2 _x_1_3 -> sz_1_0) 
Data.Set.splitMember !<{_v<_0}> !<{_v==_1}> !_x_2 !_x_3 = select _x_3 (Data.Set.Tip -> <{_Tuple3!7}> Data.Set.Tip False Data.Set.Tip) (Data.Set.Bin _x_1_0 y_1_1 l_1_2 r_1_3 -> <{Data.Set._c;387;5_133}> (<{Data.Set._if;18;17_132}> (<{StdOverloaded.get_<_7}> <{_v<_0}> _x_2 y_1_1) <{_v<_0}> y_1_1 _x_2) <{_v<_0}> <{_v==_1}> _x_2 l_1_2 y_1_1 r_1_3) 
<{Data.Set._c;387;5_133}> !_x_0 <{_v<_1}> <{_v==_2}> _x_3 l_4 y_5 r_6 = select _x_0 (Data.Set.LT -> let !_x_2_0 = Data.Set.splitMember <{_v<_1}> <{_v==_2}> _x_3 l_4 in <{_Tuple3!7}> (_predefined.tupsels3v0 _x_2_0) (_predefined.tupsels3v1 _x_2_0) (Data.Set.link y_5 (_predefined.tupsels3v2 _x_2_0) r_6)) (Data.Set.GT -> let !_x_2_0 = Data.Set.splitMember <{_v<_1}> <{_v==_2}> _x_3 r_6 in <{_Tuple3!7}> (Data.Set.link y_5 l_4 (_predefined.tupsels3v0 _x_2_0)) (_predefined.tupsels3v1 _x_2_0) (_predefined.tupsels3v2 _x_2_0)) (Data.Set.EQ -> <{_Tuple3!7}> l_4 True r_6) 
<{Data.Set._if;18;17_132}> !_x_0 <{_v<_1}> y_2 _x_3 = select _x_0 (True -> Data.Set.LT) (_ -> if (<{StdOverloaded.get_<_7}> <{_v<_1}> y_2 _x_3) Data.Set.GT Data.Set.EQ)
Data.Set.isSubsetOfX !<{_v<_0}> !<{_v==_1}> !_x_2 !_x_3 = select _x_2 (Data.Set.Tip -> True) (_ -> select _x_3 (Data.Set.Tip -> False) (_ -> select _x_2 (Data.Set.Bin _x_1_0 x_1_1 l_1_2 r_1_3 -> let !_x_2_0 = Data.Set.splitMember <{_v<_0}> <{_v==_1}> x_1_1 _x_3 in if (_predefined.tupsels3v1 _x_2_0) (if (Data.Set.isSubsetOfX <{_v<_0}> <{_v==_1}> l_1_2 (_predefined.tupsels3v0 _x_2_0)) (Data.Set.isSubsetOfX <{_v<_0}> <{_v==_1}> r_1_3 (_predefined.tupsels3v2 _x_2_0)) False) False) ))
Data.Set.newSet = Data.Set.Tip
Data.Set.insert !<{_v<_0}> !<{_v==_1}> !x_2 !_x_3 = select _x_3 (Data.Set.Tip -> Data.Set.singleton x_2) (Data.Set.Bin sz_1_0 y_1_1 l_1_2 r_1_3 -> if (<{StdOverloaded.get_<_7}> <{_v<_0}> x_2 y_1_1) (Data.Set.balanceL y_1_1 (Data.Set.insert <{_v<_0}> <{_v==_1}> x_2 l_1_2) r_1_3) (if (<{StdOverloaded.get_<_7}> <{_v<_0}> y_1_1 x_2) (Data.Set.balanceR y_1_1 l_1_2 (Data.Set.insert <{_v<_0}> <{_v==_1}> x_2 r_1_3)) (Data.Set.Bin sz_1_0 x_2 l_1_2 r_1_3))) 
Data.Set.deleteFindMax !_x_0 = select _x_0 (Data.Set.Bin _x_1_0 x_1_1 l_1_2 _x_1_3 -> select _x_1_3 (Data.Set.Tip -> <{_Tuple2!3}> x_1_1 l_1_2) (_ -> let !_x_2_0 = Data.Set.deleteFindMax _x_1_3 in <{_Tuple2!3}> (_predefined.tupsels2v0 _x_2_0) (Data.Set.balanceL x_1_1 l_1_2 (_predefined.tupsels2v1 _x_2_0)))) (Data.Set.Tip -> <{_Tuple2!3}> (StdMisc.abort "Set.deleteFindMax: can not return the maximal element of an empty set") Data.Set.Tip) 
Data.Set.deleteFindMin !_x_0 = select _x_0 (Data.Set.Bin _x_1_0 x_1_1 _x_1_2 r_1_3 -> select _x_1_2 (Data.Set.Tip -> <{_Tuple2!3}> x_1_1 r_1_3) (_ -> let !_x_2_0 = Data.Set.deleteFindMin _x_1_2 in <{_Tuple2!3}> (_predefined.tupsels2v0 _x_2_0) (Data.Set.balanceR x_1_1 (_predefined.tupsels2v1 _x_2_0) r_1_3))) (Data.Set.Tip -> <{_Tuple2!3}> (StdMisc.abort "Set.deleteFindMin: can not return the minimal element of an empty set") Data.Set.Tip) 
Data.Set.glue !_x_0 !r_1 = select _x_0 (Data.Set.Tip -> r_1) (_ -> select r_1 (Data.Set.Tip -> _x_0) (_ -> if (<{StdInt.<_17}> (<{Data.Set._c;61;12_134}> r_1) (<{Data.Set._c;61;12_135}> _x_0)) (let !_x_1_0 = Data.Set.deleteFindMax _x_0 in Data.Set.balanceR (_predefined.tupsels2v0 _x_1_0) (_predefined.tupsels2v1 _x_1_0) r_1) (let !_x_1_0 = Data.Set.deleteFindMin r_1 in Data.Set.balanceL (_predefined.tupsels2v0 _x_1_0) _x_0 (_predefined.tupsels2v1 _x_1_0))))
<{Data.Set._c;61;12_135}> !_x_0 = select _x_0 (Data.Set.Tip -> 0) (Data.Set.Bin sz_1_0 _x_1_1 _x_1_2 _x_1_3 -> sz_1_0) 
<{Data.Set._c;61;12_134}> !r_0 = select r_0 (Data.Set.Tip -> 0) (Data.Set.Bin sz_1_0 _x_1_1 _x_1_2 _x_1_3 -> sz_1_0) 
Data.Set.delete !<{_v<_0}> !<{_v==_1}> !x_2 !_x_3 = select _x_3 (Data.Set.Tip -> Data.Set.Tip) (Data.Set.Bin _x_1_0 y_1_1 l_1_2 r_1_3 -> <{Data.Set._c;115;3_137}> (<{Data.Set._if;18;17_136}> (<{StdOverloaded.get_<_7}> <{_v<_0}> x_2 y_1_1) <{_v<_0}> y_1_1 x_2) y_1_1 <{_v<_0}> <{_v==_1}> x_2 l_1_2 r_1_3) 
<{Data.Set._c;115;3_137}> !_x_0 y_1 <{_v<_2}> <{_v==_3}> x_4 !l_5 r_6 = select _x_0 (Data.Set.LT -> Data.Set.balanceR y_1 (Data.Set.delete <{_v<_2}> <{_v==_3}> x_4 l_5) r_6) (Data.Set.GT -> Data.Set.balanceL y_1 l_5 (Data.Set.delete <{_v<_2}> <{_v==_3}> x_4 r_6)) (Data.Set.EQ -> Data.Set.glue l_5 r_6) 
<{Data.Set._if;18;17_136}> !_x_0 <{_v<_1}> y_2 x_3 = select _x_0 (True -> Data.Set.LT) (_ -> if (<{StdOverloaded.get_<_7}> <{_v<_1}> y_2 x_3) Data.Set.GT Data.Set.EQ)
Data.Set.findMin !_x_0 = select _x_0 (Data.Set.Bin _x_1_0 x_1_1 _x_1_2 _x_1_3 -> select _x_1_2 (Data.Set.Tip -> x_1_1) (_ -> Data.Set.findMin _x_1_2)) (Data.Set.Tip -> StdMisc.abort "Set.findMin: empty set has no minimal element") 
Data.Set.findMax !_x_0 = select _x_0 (Data.Set.Bin _x_1_0 x_1_1 _x_1_2 _x_1_3 -> select _x_1_3 (Data.Set.Tip -> x_1_1) (_ -> Data.Set.findMax _x_1_3)) (Data.Set.Tip -> StdMisc.abort "Set.findMax: empty set has no maximal element") 
Data.Set.deleteMin !_x_0 = select _x_0 (Data.Set.Bin _x_1_0 _x_1_1 _x_1_2 r_1_3 -> select _x_1_2 (Data.Set.Tip -> r_1_3) (_ -> Data.Set.balanceR _x_1_1 (Data.Set.deleteMin _x_1_2) r_1_3)) (Data.Set.Tip -> Data.Set.Tip) 
Data.Set.deleteMax !_x_0 = select _x_0 (Data.Set.Bin _x_1_0 _x_1_1 l_1_2 _x_1_3 -> select _x_1_3 (Data.Set.Tip -> l_1_2) (_ -> Data.Set.balanceL _x_1_1 l_1_2 (Data.Set.deleteMax _x_1_3))) (Data.Set.Tip -> Data.Set.Tip) 
Data.Set.minView !_x_0 = select _x_0 (Data.Set.Tip -> Data.Maybe.Nothing) (_ -> Data.Maybe.Just (Data.Set.deleteFindMin _x_0))
Data.Set.maxView !_x_0 = select _x_0 (Data.Set.Tip -> Data.Maybe.Nothing) (_ -> Data.Maybe.Just (Data.Set.deleteFindMax _x_0))
<{Data.Set.filter`_53}> !<{_v<_0}> _x_1 !_x_2 = select _x_2 (Data.Set.Tip -> Data.Set.Tip) (Data.Set.Bin _x_1_0 x_1_1 l_1_2 r_1_3 -> <{Data.Set._c;358;11_139}> (<{Data.Set._if;18;17_138}> (<{StdOverloaded.get_<_7}> <{_v<_0}> x_1_1 _x_1) <{_v<_0}> _x_1 x_1_1) x_1_1 l_1_2 <{_v<_0}> _x_1 r_1_3) 
<{Data.Set._c;358;11_139}> !_x_0 x_1 !l_2 <{_v<_3}> _x_4 r_5 = select _x_0 (Data.Set.LT -> Data.Set.link x_1 l_2 (<{Data.Set.filter`_53}> <{_v<_3}> _x_4 r_5)) (Data.Set.EQ -> l_2) (Data.Set.GT -> <{Data.Set.filter`_53}> <{_v<_3}> _x_4 l_2) 
<{Data.Set._if;18;17_138}> !_x_0 <{_v<_1}> _x_2 x_3 = select _x_0 (True -> Data.Set.LT) (_ -> if (<{StdOverloaded.get_<_7}> <{_v<_1}> _x_2 x_3) Data.Set.GT Data.Set.EQ)
Data.Set.filterLt !<{_v<_0}> !<{_v==_1}> !_x_2 !t_3 = select _x_2 (Data.Set.NothingS -> t_3) (Data.Set.JustS b_1_0 -> <{Data.Set.filter`_53}> <{_v<_0}> b_1_0 t_3) 
<{Data.Set.filter`_52}> !<{_v<_0}> _x_1 !_x_2 = select _x_2 (Data.Set.Tip -> Data.Set.Tip) (Data.Set.Bin _x_1_0 x_1_1 l_1_2 r_1_3 -> <{Data.Set._c;349;11_141}> (<{Data.Set._if;18;17_140}> (<{StdOverloaded.get_<_7}> <{_v<_0}> _x_1 x_1_1) <{_v<_0}> x_1_1 _x_1) x_1_1 <{_v<_0}> _x_1 l_1_2 r_1_3) 
<{Data.Set._c;349;11_141}> !_x_0 x_1 <{_v<_2}> _x_3 l_4 r_5 = select _x_0 (Data.Set.LT -> Data.Set.link x_1 (<{Data.Set.filter`_52}> <{_v<_2}> _x_3 l_4) r_5) (Data.Set.EQ -> r_5) (Data.Set.GT -> <{Data.Set.filter`_52}> <{_v<_2}> _x_3 r_5) 
<{Data.Set._if;18;17_140}> !_x_0 <{_v<_1}> x_2 _x_3 = select _x_0 (True -> Data.Set.LT) (_ -> if (<{StdOverloaded.get_<_7}> <{_v<_1}> x_2 _x_3) Data.Set.GT Data.Set.EQ)
Data.Set.filterGt !<{_v<_0}> !<{_v==_1}> !_x_2 !t_3 = select _x_2 (Data.Set.NothingS -> t_3) (Data.Set.JustS b_1_0 -> <{Data.Set.filter`_52}> <{_v<_0}> b_1_0 t_3) 
Data.Set.insertR !<{_v<_0}> !<{_v==_1}> !x_2 !_x_3 = select _x_3 (Data.Set.Tip -> Data.Set.singleton x_2) (Data.Set.Bin _x_1_0 y_1_1 l_1_2 r_1_3 -> <{Data.Set._c;106;30_143}> (<{Data.Set._if;18;17_142}> (<{StdOverloaded.get_<_7}> <{_v<_0}> x_2 y_1_1) <{_v<_0}> y_1_1 x_2) y_1_1 <{_v<_0}> <{_v==_1}> x_2 l_1_2 r_1_3 _x_3) 
<{Data.Set._c;106;30_143}> !_x_0 y_1 <{_v<_2}> <{_v==_3}> x_4 l_5 r_6 _x_7 = select _x_0 (Data.Set.LT -> Data.Set.balanceL y_1 (Data.Set.insertR <{_v<_2}> <{_v==_3}> x_4 l_5) r_6) (Data.Set.GT -> Data.Set.balanceR y_1 l_5 (Data.Set.insertR <{_v<_2}> <{_v==_3}> x_4 r_6)) (Data.Set.EQ -> _x_7) 
<{Data.Set._if;18;17_142}> !_x_0 <{_v<_1}> y_2 x_3 = select _x_0 (True -> Data.Set.LT) (_ -> if (<{StdOverloaded.get_<_7}> <{_v<_1}> y_2 x_3) Data.Set.GT Data.Set.EQ)
Data.Set.greater_49 !<{_v<_0}> lo_1 !_x_2 = select _x_2 (Data.Set.Bin _x_1_0 x_1_1 _x_1_2 r_1_3 -> select (StdBool.not (<{StdOverloaded.get_<_7}> <{_v<_0}> lo_1 x_1_1)) (True -> Data.Set.greater_49 <{_v<_0}> lo_1 r_1_3) ) (_ -> _x_2)
Data.Set.lesser_50 !<{_v<_0}> hi_1 !_x_2 = select _x_2 (Data.Set.Bin _x_1_0 x_1_1 l_1_2 _x_1_3 -> select (StdBool.not (<{StdOverloaded.get_<_7}> <{_v<_0}> x_1_1 hi_1)) (True -> Data.Set.lesser_50 <{_v<_0}> hi_1 l_1_2) ) (_ -> _x_2)
Data.Set.middle_51 !<{_v<_0}> lo_1 hi_2 !_x_3 = select _x_3 (Data.Set.Bin _x_1_0 x_1_1 _x_1_2 r_1_3 -> if (StdBool.not (<{StdOverloaded.get_<_7}> <{_v<_0}> lo_1 x_1_1)) (Data.Set.middle_51 <{_v<_0}> lo_1 hi_2 r_1_3) (select (StdBool.not (<{StdOverloaded.get_<_7}> <{_v<_0}> x_1_1 hi_2)) (True -> Data.Set.middle_51 <{_v<_0}> lo_1 hi_2 _x_1_2) )) (_ -> _x_3)
Data.Set.trim !<{_v<_0}> !<{_v==_1}> !_x_2 !_x_3 !t_4 = select _x_2 (Data.Set.NothingS -> select _x_3 (Data.Set.NothingS -> t_4) (Data.Set.JustS hx_2_0 -> Data.Set.lesser_50 <{_v<_0}> hx_2_0 t_4) ) (Data.Set.JustS lx_1_0 -> select _x_3 (Data.Set.NothingS -> Data.Set.greater_49 <{_v<_0}> lx_1_0 t_4) (Data.Set.JustS hx_2_0 -> Data.Set.middle_51 <{_v<_0}> lx_1_0 hx_2_0 t_4) ) 
Data.Set.hedgeUnion !<{_v<_0}> !<{_v==_1}> !_x_2 !_x_3 !t1_4 !_x_5 = select _x_5 (Data.Set.Tip -> t1_4) (Data.Set.Bin _x_1_0 x_1_1 l_1_2 r_1_3 -> select t1_4 (Data.Set.Tip -> Data.Set.link x_1_1 (Data.Set.filterGt <{_v<_0}> <{_v==_1}> _x_2 l_1_2) (Data.Set.filterLt <{_v<_0}> <{_v==_1}> _x_3 r_1_3)) (_ -> select l_1_2 (Data.Set.Tip -> select r_1_3 (Data.Set.Tip -> Data.Set.insertR <{_v<_0}> <{_v==_1}> x_1_1 t1_4) ) )) (_ -> select t1_4 (Data.Set.Bin _x_1_0 x_1_1 l_1_2 r_1_3 -> let bmi_2_0 = Data.Set.JustS x_1_1 in Data.Set.link x_1_1 (Data.Set.hedgeUnion <{_v<_0}> <{_v==_1}> _x_2 bmi_2_0 l_1_2 (Data.Set.trim <{_v<_0}> <{_v==_1}> _x_2 bmi_2_0 _x_5)) (Data.Set.hedgeUnion <{_v<_0}> <{_v==_1}> bmi_2_0 _x_3 r_1_3 (Data.Set.trim <{_v<_0}> <{_v==_1}> bmi_2_0 _x_3 _x_5))) )
Data.Set.union !<{_v<_0}> !<{_v==_1}> !_x_2 !t2_3 = select _x_2 (Data.Set.Tip -> t2_3) (_ -> select t2_3 (Data.Set.Tip -> _x_2) (_ -> Data.Set.hedgeUnion <{_v<_0}> <{_v==_1}> Data.Set.NothingS Data.Set.NothingS _x_2 t2_3))
Data.Set.merge !_x_0 !r_1 = select _x_0 (Data.Set.Tip -> r_1) (_ -> select r_1 (Data.Set.Tip -> _x_0) (Data.Set.Bin sizeR_1_0 y_1_1 ly_1_2 ry_1_3 -> select _x_0 (Data.Set.Bin sizeL_2_0 x_2_1 lx_2_2 rx_2_3 -> if (<{StdInt.<_17}> (<{StdInt.*_9}> 4 sizeL_2_0) sizeR_1_0) (Data.Set.balanceL y_1_1 (Data.Set.merge _x_0 ly_1_2) ry_1_3) (if (<{StdInt.<_17}> (<{StdInt.*_9}> 4 sizeR_1_0) sizeL_2_0) (Data.Set.balanceR x_2_1 lx_2_2 (Data.Set.merge rx_2_3 r_1)) (Data.Set.glue _x_0 r_1))) ) )
Data.Set.hedgeDiff !<{_v<_0}> !<{_v==_1}> !_x_2 !_x_3 !_x_4 !_x_5 = select _x_4 (Data.Set.Tip -> Data.Set.Tip) (Data.Set.Bin _x_1_0 x_1_1 l_1_2 r_1_3 -> select _x_5 (Data.Set.Tip -> Data.Set.link x_1_1 (Data.Set.filterGt <{_v<_0}> <{_v==_1}> _x_2 l_1_2) (Data.Set.filterLt <{_v<_0}> <{_v==_1}> _x_3 r_1_3)) ) (_ -> select _x_5 (Data.Set.Bin _x_1_0 x_1_1 l_1_2 r_1_3 -> let bmi_2_0 = Data.Set.JustS x_1_1 in Data.Set.merge (Data.Set.hedgeDiff <{_v<_0}> <{_v==_1}> _x_2 bmi_2_0 (Data.Set.trim <{_v<_0}> <{_v==_1}> _x_2 bmi_2_0 _x_4) l_1_2) (Data.Set.hedgeDiff <{_v<_0}> <{_v==_1}> bmi_2_0 _x_3 (Data.Set.trim <{_v<_0}> <{_v==_1}> bmi_2_0 _x_3 _x_4) r_1_3)) )
Data.Set.difference !<{_v<_0}> !<{_v==_1}> !_x_2 !_x_3 = select _x_2 (Data.Set.Tip -> Data.Set.Tip) (_ -> select _x_3 (Data.Set.Tip -> _x_2) (_ -> Data.Set.hedgeDiff <{_v<_0}> <{_v==_1}> Data.Set.NothingS Data.Set.NothingS _x_2 _x_3))
Data.Set.hedgeInt !<{_v<_0}> !<{_v==_1}> !_x_2 !_x_3 !_x_4 !_x_5 = select _x_5 (Data.Set.Tip -> Data.Set.Tip) (_ -> select _x_4 (Data.Set.Tip -> Data.Set.Tip) (Data.Set.Bin _x_1_0 x_1_1 l_1_2 r_1_3 -> let !bmi_2_0 = Data.Set.JustS x_1_1, !<{l`_2_1}> = Data.Set.hedgeInt <{_v<_0}> <{_v==_1}> _x_2 bmi_2_0 l_1_2 (Data.Set.trim <{_v<_0}> <{_v==_1}> _x_2 bmi_2_0 _x_5), !<{r`_2_2}> = Data.Set.hedgeInt <{_v<_0}> <{_v==_1}> bmi_2_0 _x_3 r_1_3 (Data.Set.trim <{_v<_0}> <{_v==_1}> bmi_2_0 _x_3 _x_5) in if (Data.Set.member <{_v<_0}> <{_v==_1}> x_1_1 _x_5) (Data.Set.link x_1_1 <{l`_2_1}> <{r`_2_2}>) (Data.Set.merge <{l`_2_1}> <{r`_2_2}>)) )
Data.Set.intersection !<{_v<_0}> !<{_v==_1}> !_x_2 !_x_3 = select _x_2 (Data.Set.Tip -> Data.Set.Tip) (_ -> select _x_3 (Data.Set.Tip -> Data.Set.Tip) (_ -> Data.Set.hedgeInt <{_v<_0}> <{_v==_1}> Data.Set.NothingS Data.Set.NothingS _x_2 _x_3))
Data.Set.foldl_61 op_0 r_1 !_x_2 = select _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> Data.Set.foldl_61 op_0 (op_0 r_1 a_1_0) x_1_1) 
Data.Set.foldl_110 <{_v<_0}> <{_v==_1}> !r_2 !_x_3 = select _x_3 (_predefined._Nil -> r_2) (_predefined._Cons a_1_0 x_1_1 -> Data.Set.foldl_110 <{_v<_0}> <{_v==_1}> (Data.Set.intersection <{_v<_0}> <{_v==_1}> r_2 a_1_0) x_1_1) 
Data.Set.intersections !<{_v<_0}> !<{_v==_1}> !_x_2 = select _x_2 (_predefined._Cons t_1_0 _x_1_1 -> select _x_1_1 (_predefined._Nil -> t_1_0) (_ -> Data.Set.foldl_110 <{_v<_0}> <{_v==_1}> t_1_0 _x_1_1)) 
Data.Set.filter !<{_v<_0}> !<{_v==_1}> !_x_2 !_x_3 = select _x_3 (Data.Set.Tip -> Data.Set.Tip) (Data.Set.Bin _x_1_0 x_1_1 l_1_2 r_1_3 -> if (_x_2 x_1_1) (Data.Set.link x_1_1 (Data.Set.filter <{_v<_0}> <{_v==_1}> _x_2 l_1_2) (Data.Set.filter <{_v<_0}> <{_v==_1}> _x_2 r_1_3)) (Data.Set.merge (Data.Set.filter <{_v<_0}> <{_v==_1}> _x_2 l_1_2) (Data.Set.filter <{_v<_0}> <{_v==_1}> _x_2 r_1_3))) 
Data.Set.partition !<{_v<_0}> !<{_v==_1}> !_x_2 !_x_3 = select _x_3 (Data.Set.Tip -> <{_Tuple2!3}> Data.Set.Tip Data.Set.Tip) (Data.Set.Bin _x_1_0 x_1_1 l_1_2 r_1_3 -> let !_x_2_0 = Data.Set.partition <{_v<_0}> <{_v==_1}> _x_2 l_1_2, !_x_2_1 = Data.Set.partition <{_v<_0}> <{_v==_1}> _x_2 r_1_3 in if (_x_2 x_1_1) (<{_Tuple2!3}> (Data.Set.link x_1_1 (_predefined.tupsels2v0 _x_2_0) (_predefined.tupsels2v0 _x_2_1)) (Data.Set.merge (_predefined.tupsels2v1 _x_2_0) (_predefined.tupsels2v1 _x_2_1))) (<{_Tuple2!3}> (Data.Set.merge (_predefined.tupsels2v0 _x_2_0) (_predefined.tupsels2v0 _x_2_1)) (Data.Set.link x_1_1 (_predefined.tupsels2v1 _x_2_0) (_predefined.tupsels2v1 _x_2_1)))) 
Data.Set.split !<{_v<_0}> !<{_v==_1}> !_x_2 !_x_3 = select _x_3 (Data.Set.Tip -> <{_Tuple2!3}> Data.Set.Tip Data.Set.Tip) (Data.Set.Bin _x_1_0 y_1_1 l_1_2 r_1_3 -> <{Data.Set._c;372;5_145}> (<{Data.Set._if;18;17_144}> (<{StdOverloaded.get_<_7}> <{_v<_0}> _x_2 y_1_1) <{_v<_0}> y_1_1 _x_2) <{_v<_0}> <{_v==_1}> _x_2 l_1_2 y_1_1 r_1_3) 
<{Data.Set._c;372;5_145}> !_x_0 <{_v<_1}> <{_v==_2}> _x_3 l_4 y_5 r_6 = select _x_0 (Data.Set.LT -> let !_x_2_0 = Data.Set.split <{_v<_1}> <{_v==_2}> _x_3 l_4 in <{_Tuple2!3}> (_predefined.tupsels2v0 _x_2_0) (Data.Set.link y_5 (_predefined.tupsels2v1 _x_2_0) r_6)) (Data.Set.GT -> let !_x_2_0 = Data.Set.split <{_v<_1}> <{_v==_2}> _x_3 r_6 in <{_Tuple2!3}> (Data.Set.link y_5 l_4 (_predefined.tupsels2v0 _x_2_0)) (_predefined.tupsels2v1 _x_2_0)) (Data.Set.EQ -> <{_Tuple2!3}> l_4 r_6) 
<{Data.Set._if;18;17_144}> !_x_0 <{_v<_1}> y_2 _x_3 = select _x_0 (True -> Data.Set.LT) (_ -> if (<{StdOverloaded.get_<_7}> <{_v<_1}> y_2 _x_3) Data.Set.GT Data.Set.EQ)
Data.Set.fold !_x_0 !z_1 !_x_2 = select _x_2 (Data.Set.Tip -> z_1) (Data.Set.Bin _x_1_0 x_1_1 l_1_2 r_1_3 -> Data.Set.fold _x_0 (_x_0 x_1_1 (Data.Set.fold _x_0 z_1 r_1_3)) l_1_2) 
Data.Set.foldl_62 op_0 r_1 !_x_2 = select _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> Data.Set.foldl_62 op_0 (op_0 r_1 a_1_0) x_1_1) 
Data.Set.ins_48 !<{_v<_0}> !<{_v==_1}> !t_2 !x_3 = Data.Set.insert <{_v<_0}> <{_v==_1}> x_3 t_2
Data.Set.foldl_111 <{_v<_0}> <{_v==_1}> !r_2 !_x_3 = select _x_3 (_predefined._Nil -> r_2) (_predefined._Cons a_1_0 x_1_1 -> Data.Set.foldl_111 <{_v<_0}> <{_v==_1}> (Data.Set.ins_48 <{_v<_0}> <{_v==_1}> r_2 a_1_0) x_1_1) 
Data.Set.fromList !<{_v<_0}> !<{_v==_1}> !xs_2 = Data.Set.foldl_111 <{_v<_0}> <{_v==_1}> Data.Set.newSet xs_2
Data.Set.mapSetMonotonic !_x_0 !_x_1 = select _x_1 (Data.Set.Tip -> Data.Set.Tip) (Data.Set.Bin n_1_0 x_1_1 l_1_2 r_1_3 -> Data.Set.Bin n_1_0 (_x_0 x_1_1) (Data.Set.mapSetMonotonic _x_0 l_1_2) (Data.Set.mapSetMonotonic _x_0 r_1_3)) 
Data.Set.singleL !x1_0 !t1_1 !_x_2 = select _x_2 (Data.Set.Bin _x_1_0 x2_1_1 t2_1_2 t3_1_3 -> let l_2_0 = Data.Set.Bin (<{StdInt.+_6}> (<{StdInt.+_6}> (<{Data.Set._c;61;12_146}> t1_1) (<{Data.Set._c;61;12_147}> t2_1_2)) 1) x1_0 t1_1 t2_1_2 in Data.Set.Bin (<{StdInt.+_6}> (<{StdInt.+_6}> (<{Data.Set._c;61;12_148}> l_2_0) (<{Data.Set._c;61;12_149}> t3_1_3)) 1) x2_1_1 l_2_0 t3_1_3) (Data.Set.Tip -> StdMisc.abort "singleL") 
<{Data.Set._c;61;12_149}> !t3_0 = select t3_0 (Data.Set.Tip -> 0) (Data.Set.Bin sz_1_0 _x_1_1 _x_1_2 _x_1_3 -> sz_1_0) 
<{Data.Set._c;61;12_148}> !l_0 = select l_0 (Data.Set.Tip -> 0) (Data.Set.Bin sz_1_0 _x_1_1 _x_1_2 _x_1_3 -> sz_1_0) 
<{Data.Set._c;61;12_147}> !t2_0 = select t2_0 (Data.Set.Tip -> 0) (Data.Set.Bin sz_1_0 _x_1_1 _x_1_2 _x_1_3 -> sz_1_0) 
<{Data.Set._c;61;12_146}> !t1_0 = select t1_0 (Data.Set.Tip -> 0) (Data.Set.Bin sz_1_0 _x_1_1 _x_1_2 _x_1_3 -> sz_1_0) 
Data.Set.doubleL !x1_0 !t1_1 !_x_2 = select _x_2 (Data.Set.Bin _x_1_0 x2_1_1 _x_1_2 t4_1_3 -> select _x_1_2 (Data.Set.Bin _x_2_0 x3_2_1 t2_2_2 t3_2_3 -> let l_3_0 = Data.Set.Bin (<{StdInt.+_6}> (<{StdInt.+_6}> (<{Data.Set._c;61;12_152}> t1_1) (<{Data.Set._c;61;12_153}> t2_2_2)) 1) x1_0 t1_1 t2_2_2, r_3_1 = Data.Set.Bin (<{StdInt.+_6}> (<{StdInt.+_6}> (<{Data.Set._c;61;12_150}> t3_2_3) (<{Data.Set._c;61;12_151}> t4_1_3)) 1) x2_1_1 t3_2_3 t4_1_3 in Data.Set.Bin (<{StdInt.+_6}> (<{StdInt.+_6}> (<{Data.Set._c;61;12_154}> l_3_0) (<{Data.Set._c;61;12_155}> r_3_1)) 1) x3_2_1 l_3_0 r_3_1) ) (_ -> StdMisc.abort "doubleL")
<{Data.Set._c;61;12_155}> !r_0 = select r_0 (Data.Set.Tip -> 0) (Data.Set.Bin sz_1_0 _x_1_1 _x_1_2 _x_1_3 -> sz_1_0) 
<{Data.Set._c;61;12_154}> !l_0 = select l_0 (Data.Set.Tip -> 0) (Data.Set.Bin sz_1_0 _x_1_1 _x_1_2 _x_1_3 -> sz_1_0) 
<{Data.Set._c;61;12_153}> !t2_0 = select t2_0 (Data.Set.Tip -> 0) (Data.Set.Bin sz_1_0 _x_1_1 _x_1_2 _x_1_3 -> sz_1_0) 
<{Data.Set._c;61;12_152}> !t1_0 = select t1_0 (Data.Set.Tip -> 0) (Data.Set.Bin sz_1_0 _x_1_1 _x_1_2 _x_1_3 -> sz_1_0) 
<{Data.Set._c;61;12_151}> !t4_0 = select t4_0 (Data.Set.Tip -> 0) (Data.Set.Bin sz_1_0 _x_1_1 _x_1_2 _x_1_3 -> sz_1_0) 
<{Data.Set._c;61;12_150}> !t3_0 = select t3_0 (Data.Set.Tip -> 0) (Data.Set.Bin sz_1_0 _x_1_1 _x_1_2 _x_1_3 -> sz_1_0) 
Data.Set.rotateL !x_0 !l_1 !r_2 = select r_2 (Data.Set.Bin _x_1_0 _x_1_1 ly_1_2 ry_1_3 -> if (<{StdInt.<_17}> (<{Data.Set._c;61;12_156}> ly_1_2) (<{StdInt.*_9}> 2 (<{Data.Set._c;61;12_157}> ry_1_3))) (Data.Set.singleL x_0 l_1 r_2) (Data.Set.doubleL x_0 l_1 r_2)) (Data.Set.Tip -> StdMisc.abort "rotateL Tip") 
<{Data.Set._c;61;12_157}> !ry_0 = select ry_0 (Data.Set.Tip -> 0) (Data.Set.Bin sz_1_0 _x_1_1 _x_1_2 _x_1_3 -> sz_1_0) 
<{Data.Set._c;61;12_156}> !ly_0 = select ly_0 (Data.Set.Tip -> 0) (Data.Set.Bin sz_1_0 _x_1_1 _x_1_2 _x_1_3 -> sz_1_0) 
Data.Set.singleR !x1_0 !_x_1 !t3_2 = select _x_1 (Data.Set.Bin _x_1_0 x2_1_1 t1_1_2 t2_1_3 -> let r_2_0 = Data.Set.Bin (<{StdInt.+_6}> (<{StdInt.+_6}> (<{Data.Set._c;61;12_158}> t2_1_3) (<{Data.Set._c;61;12_159}> t3_2)) 1) x1_0 t2_1_3 t3_2 in Data.Set.Bin (<{StdInt.+_6}> (<{StdInt.+_6}> (<{Data.Set._c;61;12_160}> t1_1_2) (<{Data.Set._c;61;12_161}> r_2_0)) 1) x2_1_1 t1_1_2 r_2_0) (Data.Set.Tip -> StdMisc.abort "singleR") 
<{Data.Set._c;61;12_161}> !r_0 = select r_0 (Data.Set.Tip -> 0) (Data.Set.Bin sz_1_0 _x_1_1 _x_1_2 _x_1_3 -> sz_1_0) 
<{Data.Set._c;61;12_160}> !t1_0 = select t1_0 (Data.Set.Tip -> 0) (Data.Set.Bin sz_1_0 _x_1_1 _x_1_2 _x_1_3 -> sz_1_0) 
<{Data.Set._c;61;12_159}> !t3_0 = select t3_0 (Data.Set.Tip -> 0) (Data.Set.Bin sz_1_0 _x_1_1 _x_1_2 _x_1_3 -> sz_1_0) 
<{Data.Set._c;61;12_158}> !t2_0 = select t2_0 (Data.Set.Tip -> 0) (Data.Set.Bin sz_1_0 _x_1_1 _x_1_2 _x_1_3 -> sz_1_0) 
Data.Set.doubleR !x1_0 !_x_1 !t4_2 = select _x_1 (Data.Set.Bin _x_1_0 x2_1_1 t1_1_2 _x_1_3 -> select _x_1_3 (Data.Set.Bin _x_2_0 x3_2_1 t2_2_2 t3_2_3 -> let l_3_0 = Data.Set.Bin (<{StdInt.+_6}> (<{StdInt.+_6}> (<{Data.Set._c;61;12_164}> t1_1_2) (<{Data.Set._c;61;12_165}> t2_2_2)) 1) x2_1_1 t1_1_2 t2_2_2, r_3_1 = Data.Set.Bin (<{StdInt.+_6}> (<{StdInt.+_6}> (<{Data.Set._c;61;12_162}> t3_2_3) (<{Data.Set._c;61;12_163}> t4_2)) 1) x1_0 t3_2_3 t4_2 in Data.Set.Bin (<{StdInt.+_6}> (<{StdInt.+_6}> (<{Data.Set._c;61;12_166}> l_3_0) (<{Data.Set._c;61;12_167}> r_3_1)) 1) x3_2_1 l_3_0 r_3_1) ) (_ -> StdMisc.abort "doubleR")
<{Data.Set._c;61;12_167}> !r_0 = select r_0 (Data.Set.Tip -> 0) (Data.Set.Bin sz_1_0 _x_1_1 _x_1_2 _x_1_3 -> sz_1_0) 
<{Data.Set._c;61;12_166}> !l_0 = select l_0 (Data.Set.Tip -> 0) (Data.Set.Bin sz_1_0 _x_1_1 _x_1_2 _x_1_3 -> sz_1_0) 
<{Data.Set._c;61;12_165}> !t2_0 = select t2_0 (Data.Set.Tip -> 0) (Data.Set.Bin sz_1_0 _x_1_1 _x_1_2 _x_1_3 -> sz_1_0) 
<{Data.Set._c;61;12_164}> !t1_0 = select t1_0 (Data.Set.Tip -> 0) (Data.Set.Bin sz_1_0 _x_1_1 _x_1_2 _x_1_3 -> sz_1_0) 
<{Data.Set._c;61;12_163}> !t4_0 = select t4_0 (Data.Set.Tip -> 0) (Data.Set.Bin sz_1_0 _x_1_1 _x_1_2 _x_1_3 -> sz_1_0) 
<{Data.Set._c;61;12_162}> !t3_0 = select t3_0 (Data.Set.Tip -> 0) (Data.Set.Bin sz_1_0 _x_1_1 _x_1_2 _x_1_3 -> sz_1_0) 
Data.Set.rotateR !x_0 !l_1 !r_2 = select l_1 (Data.Set.Bin _x_1_0 _x_1_1 ly_1_2 ry_1_3 -> if (<{StdInt.<_17}> (<{Data.Set._c;61;12_168}> ry_1_3) (<{StdInt.*_9}> 2 (<{Data.Set._c;61;12_169}> ly_1_2))) (Data.Set.singleR x_0 l_1 r_2) (Data.Set.doubleR x_0 l_1 r_2)) (Data.Set.Tip -> StdMisc.abort "rotateL Tip") 
<{Data.Set._c;61;12_169}> !ly_0 = select ly_0 (Data.Set.Tip -> 0) (Data.Set.Bin sz_1_0 _x_1_1 _x_1_2 _x_1_3 -> sz_1_0) 
<{Data.Set._c;61;12_168}> !ry_0 = select ry_0 (Data.Set.Tip -> 0) (Data.Set.Bin sz_1_0 _x_1_1 _x_1_2 _x_1_3 -> sz_1_0) 
Data.Set.anon_64 a_0 as_1 = _predefined._Cons a_0 as_1
Data.Set.anon_63 a_0 as_1 = _predefined._Cons a_0 as_1
<{Data.Set.==_25}> !<{_v==_0}> !t1_1 !t2_2 = if (<{StdInt.==_16}> (<{Data.Set._c;61;12_170}> t1_1) (<{Data.Set._c;61;12_171}> t2_2)) (<{StdList.==_45}> <{_v==_0}> (Data.Set.fold Data.Set.anon_63 _predefined._Nil t1_1) (Data.Set.fold Data.Set.anon_64 _predefined._Nil t2_2)) False
<{Data.Set._c;61;12_171}> !t2_0 = select t2_0 (Data.Set.Tip -> 0) (Data.Set.Bin sz_1_0 _x_1_1 _x_1_2 _x_1_3 -> sz_1_0) 
<{Data.Set._c;61;12_170}> !t1_0 = select t1_0 (Data.Set.Tip -> 0) (Data.Set.Bin sz_1_0 _x_1_1 _x_1_2 _x_1_3 -> sz_1_0) 
Data.Set.anon_66 a_0 as_1 = _predefined._Cons a_0 as_1
Data.Set.anon_65 a_0 as_1 = _predefined._Cons a_0 as_1
Data.Set.compare_54 !<{_v<_0}> !_x_1 !_x_2 = select _x_1 (_predefined._Nil -> select _x_2 (_predefined._Nil -> False) (_ -> True)) (_predefined._Cons _x_1_0 _x_1_1 -> select _x_2 (_predefined._Nil -> False) (_predefined._Cons b_2_0 bs_2_1 -> if (<{StdOverloaded.get_<_7}> <{_v<_0}> _x_1_0 b_2_0) True (if (<{StdOverloaded.get_<_7}> <{_v<_0}> b_2_0 _x_1_0) False (Data.Set.compare_54 <{_v<_0}> _x_1_1 bs_2_1))) ) 
<{Data.Set.<_26}> !<{_v<_0}> !s1_1 !s2_2 = Data.Set.compare_54 <{_v<_0}> (Data.Set.fold Data.Set.anon_65 _predefined._Nil s1_1) (Data.Set.fold Data.Set.anon_66 _predefined._Nil s2_2)
<{Data.Set.TD;Set}> _x_0 = _predefined._Nil
<{Data.Set.TD;Ordering}> _x_0 = _predefined._Nil
<{Data.Set.TD;MaybeS}> _x_0 = _predefined._Nil

:: Data.Set.Set = Data.Set.Tip | Data.Set.Bin !a1 !a2 !a3 !a4
:: Data.Set.Ordering = Data.Set.LT | Data.Set.GT | Data.Set.EQ
:: Data.Set.MaybeS = Data.Set.NothingS | Data.Set.JustS !a1

|| Converted Records
:: <{Data.Set.bimap_s;}> = {!Data.Set.bimap_s}
Data.Set.get_bimap_s_0 rec = select rec (<{Data.Set.bimap_s;}> a1 -> a1)
Data.Set.set_bimap_s_0 rec !val = select rec (<{Data.Set.bimap_s;}>  a1 -> <{Data.Set.bimap_s;}> val)

:: <{Data.Set.bimap_ss;}> = {Data.Set.bimap_ss}
Data.Set.get_bimap_ss_1 rec = select rec (<{Data.Set.bimap_ss;}> a1 -> a1)
Data.Set.set_bimap_ss_1 rec val = select rec (<{Data.Set.bimap_ss;}>  a1 -> <{Data.Set.bimap_ss;}> val)

:: <{Data.Set.bimap_sss;}> = {Data.Set.bimap_sss}
Data.Set.get_bimap_sss_2 rec = select rec (<{Data.Set.bimap_sss;}> a1 -> a1)
Data.Set.set_bimap_sss_2 rec val = select rec (<{Data.Set.bimap_sss;}>  a1 -> <{Data.Set.bimap_sss;}> val)

:: <{Data.Set.gEq_s;}> = {Data.Set.gEq_s}
Data.Set.get_gEq_s_3 rec = select rec (<{Data.Set.gEq_s;}> a1 -> a1)
Data.Set.set_gEq_s_3 rec val = select rec (<{Data.Set.gEq_s;}>  a1 -> <{Data.Set.gEq_s;}> val)

:: <{Data.Set.gEq_ss;}> = {Data.Set.gEq_ss}
Data.Set.get_gEq_ss_4 rec = select rec (<{Data.Set.gEq_ss;}> a1 -> a1)
Data.Set.set_gEq_ss_4 rec val = select rec (<{Data.Set.gEq_ss;}>  a1 -> <{Data.Set.gEq_ss;}> val)

:: <{Data.Set.gEq_sss;}> = {Data.Set.gEq_sss}
Data.Set.get_gEq_sss_5 rec = select rec (<{Data.Set.gEq_sss;}> a1 -> a1)
Data.Set.set_gEq_sss_5 rec val = select rec (<{Data.Set.gEq_sss;}>  a1 -> <{Data.Set.gEq_sss;}> val)

:: <{Data.Set.gEq_ssss;}> = {Data.Set.gEq_ssss}
Data.Set.get_gEq_ssss_6 rec = select rec (<{Data.Set.gEq_ssss;}> a1 -> a1)
Data.Set.set_gEq_ssss_6 rec val = select rec (<{Data.Set.gEq_ssss;}>  a1 -> <{Data.Set.gEq_ssss;}> val)

:: <{Data.Set.gEq_sssss;}> = {Data.Set.gEq_sssss}
Data.Set.get_gEq_sssss_7 rec = select rec (<{Data.Set.gEq_sssss;}> a1 -> a1)
Data.Set.set_gEq_sssss_7 rec val = select rec (<{Data.Set.gEq_sssss;}>  a1 -> <{Data.Set.gEq_sssss;}> val)

:: <{Data.Set.gEq_ssssss;}> = {Data.Set.gEq_ssssss}
Data.Set.get_gEq_ssssss_8 rec = select rec (<{Data.Set.gEq_ssssss;}> a1 -> a1)
Data.Set.set_gEq_ssssss_8 rec val = select rec (<{Data.Set.gEq_ssssss;}>  a1 -> <{Data.Set.gEq_ssssss;}> val)

:: <{Data.Set.gEq_sssssss;}> = {Data.Set.gEq_sssssss}
Data.Set.get_gEq_sssssss_9 rec = select rec (<{Data.Set.gEq_sssssss;}> a1 -> a1)
Data.Set.set_gEq_sssssss_9 rec val = select rec (<{Data.Set.gEq_sssssss;}>  a1 -> <{Data.Set.gEq_sssssss;}> val)

:: <{Data.Set.gEq_ssssssss;}> = {Data.Set.gEq_ssssssss}
Data.Set.get_gEq_ssssssss_10 rec = select rec (<{Data.Set.gEq_ssssssss;}> a1 -> a1)
Data.Set.set_gEq_ssssssss_10 rec val = select rec (<{Data.Set.gEq_ssssssss;}>  a1 -> <{Data.Set.gEq_ssssssss;}> val)

:: <{Data.Set.gEq_sssssssss;}> = {Data.Set.gEq_sssssssss}
Data.Set.get_gEq_sssssssss_11 rec = select rec (<{Data.Set.gEq_sssssssss;}> a1 -> a1)
Data.Set.set_gEq_sssssssss_11 rec val = select rec (<{Data.Set.gEq_sssssssss;}>  a1 -> <{Data.Set.gEq_sssssssss;}> val)

