|| ?module? Sapl.SaplParser


Sapl.SaplParser.anon_107 !_x_0 = select _x_0 (Sapl.SaplTokenizer.PosToken _x_1_0 _x_1_1 t_1_2 -> t_1_2) 
Sapl.SaplParser.defaultState = Sapl.SaplParser._ParserState 0 Data.Map.newMap Data.Map.newMap Data.Map.newMap _predefined._Nil
Sapl.SaplParser.anon_219 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_31 g_0 !f_1 st0_2 = <{Sapl.SaplParser._c;8;9_312}> (f_1 st0_2) g_0
<{Sapl.SaplParser._c;8;9_312}> !_x_0 g_1 = select _x_0 (Data.Error.Ok _x_1_0 -> select _x_1_0 (_Tuple2 r_2_0 st1_2_1 -> g_1 r_2_0 st1_2_1) ) (Data.Error.Error str_1_0 -> Data.Error.Error str_1_0) 
<{Sapl.SaplParser.>>=}> f_0 g_1 = Sapl.SaplParser.anon_31 g_1 f_0
Sapl.SaplParser.anon_132 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.skip_newlines !_x_0 = select _x_0 (_predefined._Cons _x_1_0 ts_1_1 -> select _x_1_0 (Sapl.SaplTokenizer.TEndOfLine -> Sapl.SaplParser.skip_newlines ts_1_1) ) (_ -> Sapl.SaplParser.anon_132 _x_0)
Sapl.SaplParser.anon_218 e_0 s_1 = Data.Error.Error e_0
Sapl.SaplParser.anon_217 s_0 = Data.Error.Ok (_Tuple2 (Sapl.SaplParser.get_ps_level_0 s_0) s_0)
Sapl.SaplParser.anon_216 s_0 = Data.Error.Ok (_Tuple2 (Sapl.SaplParser.get_ps_level_0 s_0) s_0)
Sapl.SaplParser.anon_215 name_0 s_1 = Data.Error.Ok (_Tuple2 name_0 (Sapl.SaplParser.set_ps_CAFs_3 s_1 (Data.Map.put (<{StdOverloaded.<;}> <{StdString.<_3}>) (Sapl.SaplStruct.unpackVar name_0) Data.Void.Void (Sapl.SaplParser.get_ps_CAFs_3 s_1))))
Sapl.SaplParser.anon_214 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_94 ts_0 t_1 tname_2 = Sapl.SaplParser.anon_214 (_Tuple2 (Sapl.SaplStruct.FTCAF tname_2 t_1) ts_0)
Sapl.SaplParser.anon_95 name_0 level_1 !_x_2 = select _x_2 (_Tuple2 t_1_0 ts_1_1 -> <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.anon_215 (Sapl.SaplStruct.NormalVar name_0 level_1)) (Sapl.SaplParser.anon_94 ts_1_1 t_1_0)) 
Sapl.SaplParser.anon_199 a_0 s_1 = Data.Error.Ok (_Tuple2 a_0 (Sapl.SaplParser.set_ps_level_0 s_1 (<{StdInt.+_6}> (Sapl.SaplParser.get_ps_level_0 s_1) 1)))
Sapl.SaplParser.anon_206 e_0 s_1 = Data.Error.Error e_0
Sapl.SaplParser.anon_205 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_198 a_0 s_1 = Data.Error.Ok (_Tuple2 a_0 (Sapl.SaplParser.set_ps_level_0 s_1 (<{StdInt.-_7}> (Sapl.SaplParser.get_ps_level_0 s_1) 1)))
Sapl.SaplParser.decLevel_197 a_0 = Sapl.SaplParser.anon_198 a_0
Sapl.SaplParser.anon_196 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_61 ds_0 !_x_1 = select _x_1 (_Tuple2 t_1_0 ts_1_1 -> <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.anon_196 (_Tuple2 (Sapl.SaplStruct.SLet t_1_0 ds_0) ts_1_1)) Sapl.SaplParser.decLevel_197) 
Sapl.SaplParser.anon_189 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_181 e_0 s_1 = Data.Error.Error e_0
Sapl.SaplParser.anon_180 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_179 s_0 = Data.Error.Ok (_Tuple2 (Sapl.SaplParser.get_ps_level_0 s_0) s_0)
Sapl.SaplParser.anon_172 e_0 s_1 = Data.Error.Error e_0
Sapl.SaplParser.anon_171 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_44 !_x_0 = select _x_0 (_Tuple2 t_1_0 ts_1_1 -> <{Sapl.SaplParser._c;74;28_313}> (StdList.hd ts_1_1) t_1_0 ts_1_1) 
<{Sapl.SaplParser._c;74;28_313}> !_x_0 t_1 ts_2 = select _x_0 (Sapl.SaplTokenizer.TCloseParenthesis -> Sapl.SaplParser.anon_171 (_Tuple2 t_1 (StdList.tl ts_2))) (_ -> Sapl.SaplParser.anon_172 (_Tuple2 ts_2 "Missing close parenthesis"))
Sapl.SaplParser.anon_182 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_170 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_169 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_45 t_0 !_x_1 = select _x_1 (_Tuple2 as_1_0 ts_1_1 -> <{Sapl.SaplParser._c;83;29_314}> as_1_0 t_0 ts_1_1) 
<{Sapl.SaplParser._c;83;29_314}> !as_0 t_1 ts_2 = select as_0 (_predefined._Nil -> Sapl.SaplParser.anon_169 (_Tuple2 (Sapl.SaplStruct.SVar t_1) ts_2)) (_ -> Sapl.SaplParser.anon_170 (_Tuple2 (Sapl.SaplStruct.SApplication t_1 as_0) ts_2))
Sapl.SaplParser.anon_178 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_177 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_176 s_0 = Data.Error.Ok (_Tuple2 (Sapl.SaplParser.get_ps_level_0 s_0) s_0)
Sapl.SaplParser.anon_175 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_42 ts_0 name_1 level_2 = Sapl.SaplParser.anon_175 (_Tuple2 (Data.Maybe.Just (Sapl.SaplStruct.SVar (Sapl.SaplStruct.NormalVar name_1 level_2))) ts_0)
Sapl.SaplParser.anon_174 e_0 s_1 = Data.Error.Error e_0
Sapl.SaplParser.anon_173 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_43 !_x_0 = select _x_0 (_Tuple2 t_1_0 ts_1_1 -> <{Sapl.SaplParser._c;67;28_315}> (StdList.hd ts_1_1) t_1_0 ts_1_1) 
<{Sapl.SaplParser._c;67;28_315}> !_x_0 t_1 ts_2 = select _x_0 (Sapl.SaplTokenizer.TCloseParenthesis -> Sapl.SaplParser.anon_173 (_Tuple2 (Data.Maybe.Just t_1) (StdList.tl ts_2))) (_ -> Sapl.SaplParser.anon_174 (_Tuple2 ts_2 "Missing close parenthesis"))
Sapl.SaplParser.anon_152 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_66 f_0 as_1 !_x_2 = select _x_2 (_Tuple2 t_1_0 ts_1_1 -> <{Sapl.SaplParser._c;152;32_316}> t_1_0 f_0 ts_1_1 as_1) 
<{Sapl.SaplParser.args`_67}> f_0 ts_1 as_2 = <{Sapl.SaplParser.>>=}> (f_0 ts_1) (Sapl.SaplParser.anon_66 f_0 as_2)
<{Sapl.SaplParser._c;152;32_316}> !t_0 f_1 ts_2 as_3 = select t_0 (Data.Maybe.Just r_1_0 -> <{Sapl.SaplParser.args`_67}> f_1 ts_2 (_predefined._Cons r_1_0 as_3)) (_ -> Sapl.SaplParser.anon_152 (_Tuple2 (StdList.reverse as_3) ts_2))
Sapl.SaplParser.args_ f_0 ts_1 = <{Sapl.SaplParser.args`_67}> f_0 ts_1 _predefined._Nil
Sapl.SaplParser.anon_158 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_157 name_0 s_1 = Data.Error.Ok (_Tuple2 (Data.Maybe.isJust (Data.Map.get (<{StdOverloaded.<;}> <{StdString.<_3}>) name_0 (Sapl.SaplParser.get_ps_constructors_1 s_1))) s_1)
Sapl.SaplParser.anon_156 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_155 fun_0 s_1 = Data.Error.Ok (_Tuple2 fun_0 (Sapl.SaplParser.set_ps_genFuns_4 s_1 (_predefined._Cons fun_0 (Sapl.SaplParser.get_ps_genFuns_4 s_1))))
Sapl.SaplParser.anon_154 def_0 name_1 s_2 = Data.Error.Ok (_Tuple2 name_1 (Sapl.SaplParser.set_ps_constructors_1 s_2 (Data.Map.put (<{StdOverloaded.<;}> <{StdString.<_3}>) (Sapl.SaplStruct.unpackVar name_1) def_0 (Sapl.SaplParser.get_ps_constructors_1 s_2))))
Sapl.SaplParser.anon_153 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_32 !g_0 _x_1 = g_0
<{Sapl.SaplParser.>>|}> f_0 g_1 = <{Sapl.SaplParser.>>=}> f_0 (Sapl.SaplParser.anon_32 g_1)
Sapl.SaplParser.anon_35 name_0 newdef_1 newadt_2 !b_3 = if b_3 (Sapl.SaplParser.anon_153 Data.Void.Void) (<{Sapl.SaplParser.>>|}> (<{Sapl.SaplParser.>>|}> (Sapl.SaplParser.anon_154 newdef_1 (Sapl.SaplStruct.NormalVar name_0 0)) (Sapl.SaplParser.anon_155 newadt_2)) (Sapl.SaplParser.anon_156 Data.Void.Void))
Sapl.SaplParser.genarg_41 !i_0 !s_1 = if (<{StdInt.<_17}> 0 (StdInt.bitand s_1 (<{StdInt.<<}> 1 (<{StdInt.-_7}> i_0 1)))) (Sapl.SaplStruct.StrictVar "_" 0) (Sapl.SaplStruct.NormalVar "_" 0)
<{Sapl.SaplParser.c;55;98_37}> s_0 !g_i_1 !g_s_2 = if (StdBool.not (<{StdInt.<_17}> g_s_2 g_i_1)) (_predefined._Cons (Sapl.SaplParser.genarg_41 g_i_1 s_0) (<{Sapl.SaplParser.c;55;98_37}> s_0 (<{StdInt.+_6}> g_i_1 StdInt.one_11) g_s_2)) _predefined._Nil
Sapl.SaplParser.genadt_40 name_0 nrargs_1 s_2 = Sapl.SaplStruct.FTADT (Sapl.SaplStruct.NormalVar name_0 0) (_predefined._Cons (Sapl.SaplStruct.SaplConstructor (Sapl.SaplStruct.NormalVar name_0 0) 0 (<{Sapl.SaplParser.c;55;98_37}> s_2 1 nrargs_1)) _predefined._Nil)
<{Sapl.SaplParser.c;54;85_36}> s_0 !g_i_1 !g_s_2 = if (StdBool.not (<{StdInt.<_17}> g_s_2 g_i_1)) (_predefined._Cons (Sapl.SaplParser.genarg_41 g_i_1 s_0) (<{Sapl.SaplParser.c;54;85_36}> s_0 (<{StdInt.+_6}> g_i_1 StdInt.one_11) g_s_2)) _predefined._Nil
Sapl.SaplParser.genrec_39 !nrargs_0 s_1 = Sapl.SaplParser._ConstructorDef 0 1 nrargs_0 (<{Sapl.SaplParser.c;54;85_36}> s_1 1 nrargs_0)
Sapl.SaplParser.gendefs_38 name_0 name_1 = let idxpart_1_0 = <{StdString.%_10}> name_1 (_Tuple2 6 (_SystemArray.size_20 name_1)), _x_1_1 = <{Sapl.SaplParser._c;49;19_317}> (Sapl.FastString.charIndex idxpart_1_0 1 '!') idxpart_1_0, l_1_2 = _predefined.tupsels2v0 _x_1_1, r_1_3 = _predefined.tupsels2v1 _x_1_1 in _Tuple2 (Sapl.SaplParser.genadt_40 name_0 l_1_2 r_1_3) (Sapl.SaplParser.genrec_39 l_1_2 r_1_3)
<{Sapl.SaplParser._c;49;19_317}> !_x_0 idxpart_1 = select _x_0 (_Tuple2 _x_1_0 idx_1_1 -> if _x_1_0 (_Tuple2 (StdInt.toInt_23 (<{StdString.%_10}> idxpart_1 (_Tuple2 0 (<{StdInt.-_7}> idx_1_1 1)))) (StdInt.toInt_23 (<{StdString.%_10}> idxpart_1 (_Tuple2 (<{StdInt.+_6}> idx_1_1 1) (_SystemArray.size_20 idxpart_1))))) (_Tuple2 (StdInt.toInt_23 idxpart_1) 0)) 
Sapl.SaplParser.addTupleCons !name_0 = if (Sapl.SaplParser.addTupleCons_select0 name_0) (let _x_1_0 = Sapl.SaplParser.gendefs_38 name_0 name_0 in <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.anon_157 name_0) (Sapl.SaplParser.anon_35 name_0 (_predefined.tupsels2v1 _x_1_0) (_predefined.tupsels2v0 _x_1_0))) (Sapl.SaplParser.anon_158 Data.Void.Void)
Sapl.SaplParser.addTupleCons_select0 !name_0 = if (Sapl.FastString.startsWith "_Tuple" name_0) (<{StdInt.<_17}> 6 (_SystemArray.size_20 name_0)) False
Sapl.SaplParser.factor !_x_0 = select _x_0 (_predefined._Cons _x_1_0 ts_1_1 -> select _x_1_0 (Sapl.SaplTokenizer.TIdentifier name_2_0 -> <{Sapl.SaplParser.>>=}> Sapl.SaplParser.anon_176 (Sapl.SaplParser.anon_42 ts_1_1 name_2_0)) (Sapl.SaplTokenizer.TLit lit_2_0 -> Sapl.SaplParser.anon_177 (_Tuple2 (Data.Maybe.Just (Sapl.SaplStruct.SLit lit_2_0)) ts_1_1)) (Sapl.SaplTokenizer.TOpenParenthesis -> <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.application ts_1_1) Sapl.SaplParser.anon_43) ) (_ -> Sapl.SaplParser.anon_178 (_Tuple2 Data.Maybe.Nothing _x_0))
Sapl.SaplParser.args_factor ts_0 = Sapl.SaplParser.args_ Sapl.SaplParser.factor ts_0
Sapl.SaplParser.anon_46 ts_0 t_1 _x_2 = <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.args_factor ts_0) (Sapl.SaplParser.anon_45 t_1)
Sapl.SaplParser.anon_47 ts_0 name_1 t_2 = <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.addTupleCons name_1) (Sapl.SaplParser.anon_46 ts_0 t_2)
Sapl.SaplParser.anon_48 ts_0 name_1 level_2 = <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.anon_182 (Sapl.SaplStruct.NormalVar name_1 level_2)) (Sapl.SaplParser.anon_47 ts_0 name_1)
Sapl.SaplParser.application !_x_0 = select _x_0 (_predefined._Cons _x_1_0 ts_1_1 -> select _x_1_0 (Sapl.SaplTokenizer.TOpenParenthesis -> <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.application ts_1_1) Sapl.SaplParser.anon_44) (Sapl.SaplTokenizer.TIdentifier name_2_0 -> <{Sapl.SaplParser.>>=}> Sapl.SaplParser.anon_179 (Sapl.SaplParser.anon_48 ts_1_1 name_2_0)) (Sapl.SaplTokenizer.TLit lit_2_0 -> Sapl.SaplParser.anon_180 (_Tuple2 (Sapl.SaplStruct.SLit lit_2_0) ts_1_1)) ) (_ -> Sapl.SaplParser.anon_181 (_Tuple2 _x_0 "Invalid application"))
Sapl.SaplParser.anon_54 !_x_0 = select _x_0 (_Tuple2 t_1_0 ts_1_1 -> <{Sapl.SaplParser._c;110;28_318}> t_1_0 ts_1_1) 
<{Sapl.SaplParser._c;110;28_318}> !t_0 ts_1 = select t_0 (Data.Maybe.Just t_1_0 -> Sapl.SaplParser.anon_189 (_Tuple2 t_1_0 ts_1)) (_ -> Sapl.SaplParser.application ts_1)
Sapl.SaplParser.anon_200 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_188 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_49 pred_0 lhs_1 !_x_2 = select _x_2 (_Tuple2 rhs_1_0 ts_1_1 -> Sapl.SaplParser.anon_188 (_Tuple2 (Data.Maybe.Just (Sapl.SaplStruct.SIf pred_0 lhs_1 rhs_1_0)) ts_1_1)) 
Sapl.SaplParser.anon_187 e_0 s_1 = Data.Error.Error e_0
Sapl.SaplParser.anon_186 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.mandatory errmsg_0 !_x_1 = select _x_1 (_Tuple2 _x_1_0 ts_1_1 -> select _x_1_0 (Data.Maybe.Just t_2_0 -> Sapl.SaplParser.anon_186 (_Tuple2 t_2_0 ts_1_1)) (Data.Maybe.Nothing -> Sapl.SaplParser.anon_187 (_Tuple2 ts_1_1 errmsg_0)) ) 
Sapl.SaplParser.anon_185 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_184 e_0 s_1 = Data.Error.Error e_0
Sapl.SaplParser.anon_183 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_74 !_x_0 = select _x_0 (_Tuple2 t_1_0 ts_1_1 -> <{Sapl.SaplParser._c;182;28_319}> (StdList.hd ts_1_1) t_1_0 ts_1_1) 
<{Sapl.SaplParser._c;182;28_319}> !_x_0 t_1 ts_2 = select _x_0 (Sapl.SaplTokenizer.TCloseParenthesis -> Sapl.SaplParser.anon_183 (_Tuple2 t_1 (StdList.tl ts_2))) (_ -> Sapl.SaplParser.anon_184 (_Tuple2 ts_2 "Missing close parenthesis"))
Sapl.SaplParser.anon_75 !_x_0 = select _x_0 (_Tuple2 t_1_0 ts_1_1 -> <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.anon_185 (_Tuple2 (Data.Maybe.Just t_1_0) ts_1_1)) Sapl.SaplParser.anon_74) 
Sapl.SaplParser.anon_168 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_167 e_0 s_1 = Data.Error.Error e_0
Sapl.SaplParser.anon_52 expr_0 !_x_1 = select _x_1 (_Tuple2 ps_1_0 ts_1_1 -> if (StdList.isEmpty ps_1_0) (Sapl.SaplParser.anon_167 (_Tuple2 ts_1_1 "Missing select patterns")) (Sapl.SaplParser.anon_168 (_Tuple2 (Data.Maybe.Just (Sapl.SaplStruct.SSelect expr_0 ps_1_0)) ts_1_1))) 
Sapl.SaplParser.anon_203 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_202 a_0 s_1 = Data.Error.Ok (_Tuple2 a_0 (Sapl.SaplParser.set_ps_level_0 s_1 (<{StdInt.+_6}> (Sapl.SaplParser.get_ps_level_0 s_1) 1)))
Sapl.SaplParser.anon_201 e_0 s_1 = Data.Error.Error e_0
Sapl.SaplParser.anon_166 e_0 s_1 = Data.Error.Error e_0
Sapl.SaplParser.anon_165 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_68 lit_0 !_x_1 = select _x_1 (_Tuple2 t_1_0 ts_1_1 -> <{Sapl.SaplParser._c;160;24_320}> (StdList.hd ts_1_1) lit_0 t_1_0 ts_1_1) 
<{Sapl.SaplParser._c;160;24_320}> !_x_0 lit_1 t_2 ts_3 = select _x_0 (Sapl.SaplTokenizer.TCloseParenthesis -> Sapl.SaplParser.anon_165 (_Tuple2 (Data.Maybe.Just (_Tuple2 (Sapl.SaplStruct.PLit lit_1) t_2)) (StdList.tl ts_3))) (_ -> Sapl.SaplParser.anon_166 (_Tuple2 ts_3 "Missing close parenthesis"))
Sapl.SaplParser.anon_204 e_0 s_1 = Data.Error.Error e_0
Sapl.SaplParser.anon_164 a_0 s_1 = Data.Error.Ok (_Tuple2 a_0 (Sapl.SaplParser.set_ps_level_0 s_1 (<{StdInt.-_7}> (Sapl.SaplParser.get_ps_level_0 s_1) 1)))
Sapl.SaplParser.decLevel_163 a_0 = Sapl.SaplParser.anon_164 a_0
Sapl.SaplParser.anon_162 e_0 s_1 = Data.Error.Error e_0
Sapl.SaplParser.anon_161 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.mbCons_73 !cons_0 as_1 = if (<{StdString.==_2}> cons_0 "_") Sapl.SaplStruct.PDefault (Sapl.SaplStruct.PCons cons_0 as_1)
Sapl.SaplParser.anon_69 cons_0 as_1 !_x_2 = select _x_2 (_Tuple2 t_1_0 ts_1_1 -> <{Sapl.SaplParser.>>=}> (<{Sapl.SaplParser._c;171;24_321}> (StdList.hd ts_1_1) cons_0 as_1 t_1_0 ts_1_1) Sapl.SaplParser.decLevel_163) 
<{Sapl.SaplParser._c;171;24_321}> !_x_0 cons_1 as_2 t_3 ts_4 = select _x_0 (Sapl.SaplTokenizer.TCloseParenthesis -> Sapl.SaplParser.anon_161 (_Tuple2 (Data.Maybe.Just (_Tuple2 (Sapl.SaplParser.mbCons_73 cons_1 as_2) t_3)) (StdList.tl ts_4))) (_ -> Sapl.SaplParser.anon_162 (_Tuple2 ts_4 "Missing close parenthesis"))
Sapl.SaplParser.anon_160 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_159 s_0 = Data.Error.Ok (_Tuple2 (Sapl.SaplParser.get_ps_level_0 s_0) s_0)
Sapl.SaplParser.anon_76 !ts_0 name_1 as_2 level_3 = Sapl.SaplParser.args__77 ts_0 (_predefined._Cons (Sapl.SaplStruct.NormalVar name_1 level_3) as_2)
Sapl.SaplParser.args__77 !_x_0 as_1 = select _x_0 (_predefined._Cons _x_1_0 ts_1_1 -> select _x_1_0 (Sapl.SaplTokenizer.TIdentifier name_2_0 -> <{Sapl.SaplParser.>>=}> Sapl.SaplParser.anon_159 (Sapl.SaplParser.anon_76 ts_1_1 name_2_0 as_1)) ) (_ -> Sapl.SaplParser.anon_160 (_Tuple2 (StdList.reverse as_1) _x_0))
Sapl.SaplParser.args !ts_0 = Sapl.SaplParser.args__77 ts_0 _predefined._Nil
Sapl.SaplParser.anon_194 e_0 s_1 = Data.Error.Error e_0
Sapl.SaplParser.anon_193 s_0 = Data.Error.Ok (_Tuple2 (Sapl.SaplParser.get_ps_level_0 s_0) s_0)
Sapl.SaplParser.anon_192 s_0 = Data.Error.Ok (_Tuple2 (Sapl.SaplParser.get_ps_level_0 s_0) s_0)
Sapl.SaplParser.anon_195 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_57 name_0 as_1 level_2 !_x_3 = select _x_3 (_Tuple2 t_1_0 ts_1_1 -> Sapl.SaplParser.letdef_2_60 ts_1_1 (_predefined._Cons (Sapl.SaplStruct.SaplLetDef (Sapl.SaplStruct.StrictVar name_0 level_2) t_1_0) as_1)) 
Sapl.SaplParser.anon_58 name_0 as_1 ts_2 level_3 = <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.application ts_2) (Sapl.SaplParser.anon_57 name_0 as_1 level_3)
Sapl.SaplParser.letdef_2_60 !_x_0 as_1 = select _x_0 (_predefined._Cons _x_1_0 ts_1_1 -> select _x_1_0 (Sapl.SaplTokenizer.TColon -> Sapl.SaplParser.letdef_1_59 ts_1_1 as_1) ) (_ -> Sapl.SaplParser.anon_195 (_Tuple2 (StdList.reverse as_1) _x_0))
Sapl.SaplParser.anon_55 name_0 as_1 level_2 !_x_3 = select _x_3 (_Tuple2 t_1_0 ts_1_1 -> Sapl.SaplParser.letdef_2_60 ts_1_1 (_predefined._Cons (Sapl.SaplStruct.SaplLetDef (Sapl.SaplStruct.NormalVar name_0 level_2) t_1_0) as_1)) 
Sapl.SaplParser.anon_56 name_0 as_1 ts_2 level_3 = <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.application ts_2) (Sapl.SaplParser.anon_55 name_0 as_1 level_3)
Sapl.SaplParser.letdef_1_59 !_x_0 as_1 = select _x_0 (_predefined._Cons _x_1_0 _x_1_1 -> select _x_1_0 (Sapl.SaplTokenizer.TIdentifier name_2_0 -> select _x_1_1 (_predefined._Cons _x_3_0 ts_3_1 -> select _x_3_0 (Sapl.SaplTokenizer.TAssignmentOp -> <{Sapl.SaplParser.>>=}> Sapl.SaplParser.anon_192 (Sapl.SaplParser.anon_56 name_2_0 as_1 ts_3_1)) ) ) (Sapl.SaplTokenizer.TStrictIdentifier name_2_0 -> select _x_1_1 (_predefined._Cons _x_3_0 ts_3_1 -> select _x_3_0 (Sapl.SaplTokenizer.TAssignmentOp -> <{Sapl.SaplParser.>>=}> Sapl.SaplParser.anon_193 (Sapl.SaplParser.anon_58 name_2_0 as_1 ts_3_1)) ) ) ) (_ -> Sapl.SaplParser.anon_194 (_Tuple2 _x_0 "Invalid \"let\" definition"))
Sapl.SaplParser.letdefinitions !ts_0 = Sapl.SaplParser.letdef_1_59 ts_0 _predefined._Nil
Sapl.SaplParser.anon_191 e_0 s_1 = Data.Error.Error e_0
Sapl.SaplParser.anon_190 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.skip_65 !_x_0 = select _x_0 (_predefined._Cons _x_1_0 ts_1_1 -> select _x_1_0 (Sapl.SaplTokenizer.TCloseBracket -> Sapl.SaplParser.anon_190 (_Tuple2 Sapl.SaplStruct.SAbortBody ts_1_1)) (_ -> Sapl.SaplParser.skip_65 ts_1_1)) (_predefined._Nil -> Sapl.SaplParser.anon_191 (_Tuple2 _predefined._Nil "Missing close bracket in ABC code definition")) 
Sapl.SaplParser.anon_70 cons_0 !_x_1 = select _x_1 (_Tuple2 as_1_0 ts_1_1 -> <{Sapl.SaplParser.>>=}> (<{Sapl.SaplParser._c;168;25_324}> (StdList.hd ts_1_1) ts_1_1) (Sapl.SaplParser.anon_69 cons_0 as_1_0)) 
Sapl.SaplParser.anon_71 cons_0 ts_1 _x_2 = <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.args ts_1) (Sapl.SaplParser.anon_70 cons_0)
Sapl.SaplParser.anon_72 cons_0 ts_1 = <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.addTupleCons cons_0) (Sapl.SaplParser.anon_71 cons_0 ts_1)
Sapl.SaplParser.arg_pattern !_x_0 = select _x_0 (_predefined._Cons _x_1_0 _x_1_1 -> select _x_1_0 (Sapl.SaplTokenizer.TOpenParenthesis -> select _x_1_1 (_predefined._Cons _x_3_0 ts_3_1 -> select _x_3_0 (Sapl.SaplTokenizer.TLit lit_4_0 -> <{Sapl.SaplParser.>>=}> (<{Sapl.SaplParser._c;157;13_323}> (StdList.hd ts_3_1) ts_3_1) (Sapl.SaplParser.anon_68 lit_4_0)) (Sapl.SaplTokenizer.TIdentifier cons_4_0 -> <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.anon_202 ts_3_1) (Sapl.SaplParser.anon_72 cons_4_0)) ) ) ) (_ -> Sapl.SaplParser.anon_203 (_Tuple2 Data.Maybe.Nothing _x_0))
Sapl.SaplParser.args_pattern ts_0 = Sapl.SaplParser.args_ Sapl.SaplParser.arg_pattern ts_0
Sapl.SaplParser.anon_53 !_x_0 = select _x_0 (_Tuple2 expr_1_0 ts_1_1 -> <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.args_pattern ts_1_1) (Sapl.SaplParser.anon_52 expr_1_0)) 
Sapl.SaplParser.arg_adv !_x_0 = select _x_0 (_predefined._Cons _x_1_0 ts_1_1 -> select _x_1_0 (Sapl.SaplTokenizer.TOpenParenthesis -> <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.body ts_1_1) Sapl.SaplParser.anon_75) ) (_ -> Sapl.SaplParser.factor _x_0)
Sapl.SaplParser.anon_50 pred_0 !_x_1 = select _x_1 (_Tuple2 lhs_1_0 ts_1_1 -> <{Sapl.SaplParser.>>=}> (<{Sapl.SaplParser.>>=}> (Sapl.SaplParser.arg_adv ts_1_1) (Sapl.SaplParser.mandatory "Missing right hand side")) (Sapl.SaplParser.anon_49 pred_0 lhs_1_0)) 
Sapl.SaplParser.anon_51 !_x_0 = select _x_0 (_Tuple2 pred_1_0 ts_1_1 -> <{Sapl.SaplParser.>>=}> (<{Sapl.SaplParser.>>=}> (Sapl.SaplParser.arg_adv ts_1_1) (Sapl.SaplParser.mandatory "Missing left hand side")) (Sapl.SaplParser.anon_50 pred_1_0)) 
Sapl.SaplParser.selectexpr !_x_0 = select _x_0 (_predefined._Cons _x_1_0 ts_1_1 -> select _x_1_0 (Sapl.SaplTokenizer.TIfKeyword -> <{Sapl.SaplParser.>>=}> (<{Sapl.SaplParser.>>=}> (Sapl.SaplParser.arg_adv ts_1_1) (Sapl.SaplParser.mandatory "Missing predicate")) Sapl.SaplParser.anon_51) (Sapl.SaplTokenizer.TSelectKeyword -> <{Sapl.SaplParser.>>=}> (<{Sapl.SaplParser.>>=}> (Sapl.SaplParser.arg_adv ts_1_1) (Sapl.SaplParser.mandatory "Missing select expression")) Sapl.SaplParser.anon_53) ) (_ -> Sapl.SaplParser.anon_200 (_Tuple2 Data.Maybe.Nothing _x_0))
Sapl.SaplParser.mainexpr ts_0 = <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.selectexpr ts_0) Sapl.SaplParser.anon_54
Sapl.SaplParser.anon_62 ds_0 ts_1 = <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.mainexpr ts_1) (Sapl.SaplParser.anon_61 ds_0)
Sapl.SaplParser.anon_63 !_x_0 = select _x_0 (_Tuple2 ds_1_0 ts_1_1 -> <{Sapl.SaplParser.>>=}> (<{Sapl.SaplParser._c;131;29_322}> (StdList.hd ts_1_1) ts_1_1) (Sapl.SaplParser.anon_62 ds_1_0)) 
Sapl.SaplParser.anon_64 ts_0 = <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.letdefinitions ts_0) Sapl.SaplParser.anon_63
Sapl.SaplParser.body !_x_0 = select _x_0 (_predefined._Cons _x_1_0 ts_1_1 -> select _x_1_0 (Sapl.SaplTokenizer.TLetKeyword -> <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.anon_199 ts_1_1) Sapl.SaplParser.anon_64) (Sapl.SaplTokenizer.TOpenBracket -> Sapl.SaplParser.skip_65 ts_1_1) ) (_ -> Sapl.SaplParser.mainexpr _x_0)
<{Sapl.SaplParser._c;168;25_324}> !_x_0 ts_1 = select _x_0 (Sapl.SaplTokenizer.TSelectAssignmentOp -> Sapl.SaplParser.body (StdList.tl ts_1)) (_ -> Sapl.SaplParser.anon_204 (_Tuple2 ts_1 "Missing select assignment operator"))
<{Sapl.SaplParser._c;157;13_323}> !_x_0 ts_1 = select _x_0 (Sapl.SaplTokenizer.TSelectAssignmentOp -> Sapl.SaplParser.body (StdList.tl ts_1)) (_ -> Sapl.SaplParser.anon_201 (_Tuple2 ts_1 "Missing select assignment operator"))
<{Sapl.SaplParser._c;131;29_322}> !_x_0 ts_1 = select _x_0 (Sapl.SaplTokenizer.TInKeyword -> Sapl.SaplParser.anon_205 (StdList.tl ts_1)) (_ -> Sapl.SaplParser.anon_206 (_Tuple2 ts_1 "Missing \"in\" keyword"))
Sapl.SaplParser.anon_96 name_0 ts_1 level_2 = <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.body ts_1) (Sapl.SaplParser.anon_95 name_0 level_2)
Sapl.SaplParser.anon_213 e_0 s_1 = Data.Error.Error e_0
Sapl.SaplParser.anon_212 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_211 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_210 args_0 name_1 s_2 = Data.Error.Ok (_Tuple2 name_1 (Sapl.SaplParser.set_ps_functions_2 s_2 (Data.Map.put (<{StdOverloaded.<;}> <{StdString.<_3}>) (Sapl.SaplStruct.unpackVar name_1) args_0 (Sapl.SaplParser.get_ps_functions_2 s_2))))
Sapl.SaplParser.anon_209 args_0 name_1 s_2 = Data.Error.Ok (_Tuple2 name_1 (Sapl.SaplParser.set_ps_functions_2 s_2 (Data.Map.put (<{StdOverloaded.<;}> <{StdString.<_3}>) (Sapl.SaplStruct.unpackVar name_1) args_0 (Sapl.SaplParser.get_ps_functions_2 s_2))))
Sapl.SaplParser.anon_208 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_98 as_0 ts_1 t_2 tname_3 = Sapl.SaplParser.anon_208 (_Tuple2 (Sapl.SaplStruct.FTMacro tname_3 t_2 as_0) ts_1)
Sapl.SaplParser.anon_207 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_97 as_0 ts_1 t_2 tname_3 = Sapl.SaplParser.anon_207 (_Tuple2 (Sapl.SaplStruct.FTFunc tname_3 t_2 as_0) ts_1)
Sapl.SaplParser.anon_99 name_0 level_1 as_2 !func_3 !_x_4 = select _x_4 (_Tuple2 t_1_0 ts_1_1 -> if func_3 (<{Sapl.SaplParser.>>=}> (Sapl.SaplParser.anon_209 as_2 (Sapl.SaplStruct.NormalVar name_0 level_1)) (Sapl.SaplParser.anon_97 as_2 ts_1_1 t_1_0)) (<{Sapl.SaplParser.>>=}> (Sapl.SaplParser.anon_210 as_2 (Sapl.SaplStruct.NormalVar name_0 level_1)) (Sapl.SaplParser.anon_98 as_2 ts_1_1 t_1_0))) 
Sapl.SaplParser.anon_100 name_0 level_1 as_2 !_x_3 = select _x_3 (_Tuple2 func_1_0 ts_1_1 -> <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.body ts_1_1) (Sapl.SaplParser.anon_99 name_0 level_1 as_2 func_1_0)) 
Sapl.SaplParser.anon_101 name_0 level_1 !_x_2 = select _x_2 (_Tuple2 as_1_0 ts_1_1 -> <{Sapl.SaplParser.>>=}> (<{Sapl.SaplParser._c;244;29_325}> (StdList.hd ts_1_1) ts_1_1) (Sapl.SaplParser.anon_100 name_0 level_1 as_1_0)) 
<{Sapl.SaplParser._c;244;29_325}> !_x_0 ts_1 = select _x_0 (Sapl.SaplTokenizer.TAssignmentOp -> Sapl.SaplParser.anon_211 (_Tuple2 True (StdList.tl ts_1))) (Sapl.SaplTokenizer.TMacroAssignmentOp -> Sapl.SaplParser.anon_212 (_Tuple2 False (StdList.tl ts_1))) (_ -> Sapl.SaplParser.anon_213 (_Tuple2 ts_1 "Missing assignment operator"))
Sapl.SaplParser.anon_134 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_133 s_0 = Data.Error.Ok (_Tuple2 (Sapl.SaplParser.get_ps_level_0 s_0) s_0)
Sapl.SaplParser.anon_78 !ts_0 name_1 as_2 level_3 = Sapl.SaplParser.args__79 ts_0 (_predefined._Cons (Sapl.SaplStruct.NormalVar name_1 level_3) as_2)
Sapl.SaplParser.args__79 !_x_0 as_1 = select _x_0 (_predefined._Cons _x_1_0 ts_1_1 -> select _x_1_0 (Sapl.SaplTokenizer.TIdentifier name_2_0 -> <{Sapl.SaplParser.>>=}> Sapl.SaplParser.anon_133 (Sapl.SaplParser.anon_78 ts_1_1 name_2_0 as_1)) (Sapl.SaplTokenizer.TStrictIdentifier name_2_0 -> Sapl.SaplParser.args__79 ts_1_1 (_predefined._Cons (Sapl.SaplStruct.StrictVar name_2_0 0) as_1)) ) (_ -> Sapl.SaplParser.anon_134 (_Tuple2 (StdList.reverse as_1) _x_0))
Sapl.SaplParser.args_annotated !ts_0 = Sapl.SaplParser.args__79 ts_0 _predefined._Nil
Sapl.SaplParser.anon_102 name_0 ts_1 level_2 = <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.args_annotated ts_1) (Sapl.SaplParser.anon_101 name_0 level_2)
Sapl.SaplParser.anon_151 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_103 !_x_0 = select _x_0 (_Tuple2 f_1_0 ts_1_1 -> Sapl.SaplParser.anon_151 (_Tuple2 f_1_0 ts_1_1)) 
Sapl.SaplParser.anon_150 e_0 s_1 = Data.Error.Error e_0
Sapl.SaplParser.anon_149 e_0 s_1 = Data.Error.Error e_0
Sapl.SaplParser.anon_148 s_0 = Data.Error.Ok (_Tuple2 (Sapl.SaplParser.get_ps_level_0 s_0) s_0)
Sapl.SaplParser.anon_147 s_0 = Data.Error.Ok (_Tuple2 (Sapl.SaplParser.get_ps_level_0 s_0) s_0)
Sapl.SaplParser.anon_146 e_0 s_1 = Data.Error.Error e_0
Sapl.SaplParser.anon_145 def_0 name_1 s_2 = Data.Error.Ok (_Tuple2 name_1 (Sapl.SaplParser.set_ps_constructors_1 s_2 (Data.Map.put (<{StdOverloaded.<;}> <{StdString.<_3}>) (Sapl.SaplStruct.unpackVar name_1) def_0 (Sapl.SaplParser.get_ps_constructors_1 s_2))))
Sapl.SaplParser.anon_144 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_88 ts_0 as_1 tname_2 = Sapl.SaplParser.anon_144 (_Tuple2 (Sapl.SaplStruct.FTRecord tname_2 as_1) (StdList.tl ts_0))
Sapl.SaplParser.anon_89 name_0 level_1 !_x_2 = select _x_2 (_Tuple2 as_1_0 ts_1_1 -> <{Sapl.SaplParser._c;222;29_326}> (StdList.hd ts_1_1) as_1_0 name_0 level_1 ts_1_1) 
<{Sapl.SaplParser._c;222;29_326}> !_x_0 as_1 name_2 level_3 ts_4 = select _x_0 (Sapl.SaplTokenizer.TCloseBracket -> <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.anon_145 (Sapl.SaplParser._ConstructorDef 0 1 (StdList.length_47 as_1) as_1) (Sapl.SaplStruct.NormalVar name_2 level_3)) (Sapl.SaplParser.anon_88 ts_4 as_1)) (_ -> Sapl.SaplParser.anon_146 (_Tuple2 ts_4 "Missing close parenthesis3"))
Sapl.SaplParser.anon_142 e_0 s_1 = Data.Error.Error e_0
Sapl.SaplParser.anon_141 s_0 = Data.Error.Ok (_Tuple2 (Sapl.SaplParser.get_ps_level_0 s_0) s_0)
Sapl.SaplParser.anon_140 s_0 = Data.Error.Ok (_Tuple2 (Sapl.SaplParser.get_ps_level_0 s_0) s_0)
Sapl.SaplParser.anon_143 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_81 !ts_0 name_1 as_2 level_3 = Sapl.SaplParser.args_2_83 ts_0 (_predefined._Cons (Sapl.SaplStruct.StrictVar name_1 level_3) as_2)
Sapl.SaplParser.args_2_83 !_x_0 as_1 = select _x_0 (_predefined._Cons _x_1_0 ts_1_1 -> select _x_1_0 (Sapl.SaplTokenizer.TColon -> Sapl.SaplParser.args_1_82 ts_1_1 as_1) ) (_ -> Sapl.SaplParser.anon_143 (_Tuple2 (StdList.reverse as_1) _x_0))
Sapl.SaplParser.anon_80 !ts_0 name_1 as_2 level_3 = Sapl.SaplParser.args_2_83 ts_0 (_predefined._Cons (Sapl.SaplStruct.NormalVar name_1 level_3) as_2)
Sapl.SaplParser.args_1_82 !_x_0 as_1 = select _x_0 (_predefined._Cons _x_1_0 ts_1_1 -> select _x_1_0 (Sapl.SaplTokenizer.TIdentifier name_2_0 -> <{Sapl.SaplParser.>>=}> Sapl.SaplParser.anon_140 (Sapl.SaplParser.anon_80 ts_1_1 name_2_0 as_1)) (Sapl.SaplTokenizer.TStrictIdentifier name_2_0 -> <{Sapl.SaplParser.>>=}> Sapl.SaplParser.anon_141 (Sapl.SaplParser.anon_81 ts_1_1 name_2_0 as_1)) ) (_ -> Sapl.SaplParser.anon_142 (_Tuple2 _x_0 "Missing argument"))
Sapl.SaplParser.args_record !ts_0 = Sapl.SaplParser.args_1_82 ts_0 _predefined._Nil
Sapl.SaplParser.anon_90 name_0 ts_1 level_2 = <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.args_record ts_1) (Sapl.SaplParser.anon_89 name_0 level_2)
Sapl.SaplParser.anon_139 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.anon_91 name_0 level_1 ts_2 as_3 _x_4 = Sapl.SaplParser.anon_139 (_Tuple2 (Sapl.SaplStruct.FTADT (Sapl.SaplStruct.NormalVar name_0 level_1) as_3) ts_2)
Sapl.SaplParser.foldl_138 op_0 r_1 !_x_2 = select _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> Sapl.SaplParser.foldl_138 op_0 (op_0 r_1 a_1_0) x_1_1) 
Sapl.SaplParser.adddef_34 !nr_cons_0 !m_1 !_x_2 = select _x_2 (Sapl.SaplStruct.SaplConstructor name_1_0 idx_1_1 as_1_2 -> Data.Map.put (<{StdOverloaded.<;}> <{StdString.<_3}>) (Sapl.SaplStruct.unpackVar name_1_0) (Sapl.SaplParser._ConstructorDef idx_1_1 nr_cons_0 (StdList.length_47 as_1_2) as_1_2) m_1) 
Sapl.SaplParser.foldl_307 nr_cons_0 !r_1 !_x_2 = select _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> Sapl.SaplParser.foldl_307 nr_cons_0 (Sapl.SaplParser.adddef_34 nr_cons_0 r_1 a_1_0) x_1_1) 
Sapl.SaplParser.anon_33 conses_0 nr_cons_1 s_2 = Data.Error.Ok (_Tuple2 conses_0 (Sapl.SaplParser.set_ps_constructors_1 s_2 (Sapl.SaplParser.foldl_307 nr_cons_1 (Sapl.SaplParser.get_ps_constructors_1 s_2) conses_0)))
Sapl.SaplParser.addConstructors conses_0 = Sapl.SaplParser.anon_33 conses_0 (StdList.length_47 conses_0)
Sapl.SaplParser.anon_92 name_0 level_1 !_x_2 = select _x_2 (_Tuple2 as_1_0 ts_1_1 -> <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.addConstructors as_1_0) (Sapl.SaplParser.anon_91 name_0 level_1 ts_1_1 as_1_0)) 
Sapl.SaplParser.anon_136 e_0 s_1 = Data.Error.Error e_0
Sapl.SaplParser.anon_135 s_0 = Data.Error.Ok (_Tuple2 (Sapl.SaplParser.get_ps_level_0 s_0) s_0)
Sapl.SaplParser.anon_137 r_0 s_1 = Data.Error.Ok (_Tuple2 r_0 s_1)
Sapl.SaplParser.args_2_87 !_x_0 cs_1 i_2 = select _x_0 (_predefined._Cons _x_1_0 ts_1_1 -> select _x_1_0 (Sapl.SaplTokenizer.TVerticalBar -> Sapl.SaplParser.args_1_86 ts_1_1 cs_1 (<{StdInt.+_6}> i_2 1)) ) (_ -> Sapl.SaplParser.anon_137 (_Tuple2 (StdList.reverse cs_1) _x_0))
Sapl.SaplParser.anon_84 name_0 cs_1 i_2 level_3 !_x_4 = select _x_4 (_Tuple2 ss_1_0 ts_1_1 -> Sapl.SaplParser.args_2_87 ts_1_1 (_predefined._Cons (Sapl.SaplStruct.SaplConstructor (Sapl.SaplStruct.NormalVar name_0 level_3) i_2 ss_1_0) cs_1) i_2) 
Sapl.SaplParser.anon_85 name_0 cs_1 i_2 ts_3 level_4 = <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.args_annotated ts_3) (Sapl.SaplParser.anon_84 name_0 cs_1 i_2 level_4)
Sapl.SaplParser.args_1_86 !_x_0 cs_1 i_2 = select _x_0 (_predefined._Cons _x_1_0 ts_1_1 -> select _x_1_0 (Sapl.SaplTokenizer.TIdentifier name_2_0 -> <{Sapl.SaplParser.>>=}> Sapl.SaplParser.anon_135 (Sapl.SaplParser.anon_85 name_2_0 cs_1 i_2 ts_1_1)) ) (_ -> Sapl.SaplParser.anon_136 (_Tuple2 _x_0 "Missing argument"))
Sapl.SaplParser.args_adt !ts_0 = Sapl.SaplParser.args_1_86 ts_0 _predefined._Nil 0
Sapl.SaplParser.anon_93 name_0 ts_1 level_2 = <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.args_adt ts_1) (Sapl.SaplParser.anon_92 name_0 level_2)
Sapl.SaplParser.constr !_x_0 = select _x_0 (_predefined._Cons _x_1_0 _x_1_1 -> select _x_1_0 (Sapl.SaplTokenizer.TTypeDef -> select _x_1_1 (_predefined._Cons _x_3_0 _x_3_1 -> select _x_3_0 (Sapl.SaplTokenizer.TIdentifier name_4_0 -> select _x_3_1 (_predefined._Cons _x_5_0 _x_5_1 -> select _x_5_0 (Sapl.SaplTokenizer.TAssignmentOp -> select _x_5_1 (_predefined._Cons _x_7_0 ts_7_1 -> select _x_7_0 (Sapl.SaplTokenizer.TOpenBracket -> <{Sapl.SaplParser.>>=}> Sapl.SaplParser.anon_147 (Sapl.SaplParser.anon_90 name_4_0 ts_7_1)) ) (_ -> <{Sapl.SaplParser.>>=}> Sapl.SaplParser.anon_148 (Sapl.SaplParser.anon_93 name_4_0 _x_5_1))) ) ) ) (_ -> Sapl.SaplParser.anon_149 (_Tuple2 _x_1_1 "Invalid type definition"))) ) (_ -> Sapl.SaplParser.anon_150 (_Tuple2 _x_0 "Not a type definition"))
Sapl.SaplParser.func !_x_0 = select _x_0 (_predefined._Cons _x_1_0 _x_1_1 -> select _x_1_0 (Sapl.SaplTokenizer.TIdentifier name_2_0 -> select _x_1_1 (_predefined._Cons _x_3_0 ts_3_1 -> select _x_3_0 (Sapl.SaplTokenizer.TCAFAssignmentOp -> <{Sapl.SaplParser.>>=}> Sapl.SaplParser.anon_216 (Sapl.SaplParser.anon_96 name_2_0 ts_3_1)) ) (_ -> <{Sapl.SaplParser.>>=}> Sapl.SaplParser.anon_217 (Sapl.SaplParser.anon_102 name_2_0 _x_1_1))) (Sapl.SaplTokenizer.TTypeDef -> <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.constr _x_0) Sapl.SaplParser.anon_103) ) (_ -> Sapl.SaplParser.anon_218 (_Tuple2 _x_0 "Not a function or type definition"))
Sapl.SaplParser.anon_104 fs_0 f_1 !ts_2 = if (<{StdInt.==_16}> (StdList.length_47 ts_2) 0) (Sapl.SaplParser.anon_219 (_Tuple2 (_predefined._Cons f_1 fs_0) ts_2)) (Sapl.SaplParser.program ts_2 (_predefined._Cons f_1 fs_0))
Sapl.SaplParser.anon_105 fs_0 !_x_1 = select _x_1 (_Tuple2 f_1_0 ts_1_1 -> <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.skip_newlines ts_1_1) (Sapl.SaplParser.anon_104 fs_0 f_1_0)) 
Sapl.SaplParser.anon_106 fs_0 ts_1 = <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.func ts_1) (Sapl.SaplParser.anon_105 fs_0)
Sapl.SaplParser.program ts_0 fs_1 = <{Sapl.SaplParser.>>=}> (Sapl.SaplParser.skip_newlines ts_0) (Sapl.SaplParser.anon_106 fs_1)
Sapl.SaplParser.findpos_108 !_vlength_0 !pts_1 rest_ts_2 = <{Sapl.SaplParser._c;274;11_327}> (StdList.hd (StdList.drop (<{StdInt.-_7}> (<{StdInt.-_7}> (StdList.length_47 pts_1) (StdOverloaded.get_length_10 _vlength_0 rest_ts_2)) 1) pts_1))
<{Sapl.SaplParser._c;274;11_327}> !_x_0 = select _x_0 (Sapl.SaplTokenizer.PosToken lp_1_0 cp_1_1 _x_1_2 -> _Tuple2 lp_1_0 cp_1_1) 
Sapl.SaplParser.findpos_308 !pts_0 !rest_ts_1 = <{Sapl.SaplParser._c;274;11_328}> (StdList.hd (StdList.drop (<{StdInt.-_7}> (<{StdInt.-_7}> (StdList.length_47 pts_0) (StdList.length_47 rest_ts_1)) 1) pts_0))
<{Sapl.SaplParser._c;274;11_328}> !_x_0 = select _x_0 (Sapl.SaplTokenizer.PosToken lp_1_0 cp_1_1 _x_1_2 -> _Tuple2 lp_1_0 cp_1_1) 
Sapl.SaplParser.parse !pts_0 = <{Sapl.SaplParser._c;268;7_329}> (Sapl.SaplParser.program (StdList.map Sapl.SaplParser.anon_107 pts_0) _predefined._Nil Sapl.SaplParser.defaultState) pts_0
<{Sapl.SaplParser._c;268;7_329}> !_x_0 pts_1 = select _x_0 (Data.Error.Ok _x_1_0 -> select _x_1_0 (_Tuple2 _x_2_0 ps_2_1 -> select _x_2_0 (_Tuple2 fts_3_0 _x_3_1 -> Data.Error.Ok (_Tuple2 (<{StdList.++}> (Sapl.SaplParser.get_ps_genFuns_4 ps_2_1) fts_3_0) ps_2_1)) ) ) (Data.Error.Error _x_1_0 -> select _x_1_0 (_Tuple2 ts_2_0 msg_2_1 -> let _x_3_0 = Sapl.SaplParser.findpos_308 pts_1 ts_2_0 in Data.Error.Error (<{StdString.+++_11}> msg_2_1 (<{StdString.+++_11}> " at line " (<{StdString.+++_11}> (StdString.toString_5 (_predefined.tupsels2v0 _x_3_0)) (<{StdString.+++_11}> " before charachter " (StdString.toString_5 (_predefined.tupsels2v1 _x_3_0))))))) ) 
Sapl.SaplParser.anon_109 !_x_0 = select _x_0 (Sapl.SaplTokenizer.PosToken _x_1_0 _x_1_1 t_1_2 -> t_1_2) 
Sapl.SaplParser.findpos_110 !_vlength_0 !pts_1 rest_ts_2 = <{Sapl.SaplParser._c;286;11_330}> (StdList.hd (StdList.drop (<{StdInt.-_7}> (<{StdInt.-_7}> (StdList.length_47 pts_1) (StdOverloaded.get_length_10 _vlength_0 rest_ts_2)) 1) pts_1))
<{Sapl.SaplParser._c;286;11_330}> !_x_0 = select _x_0 (Sapl.SaplTokenizer.PosToken lp_1_0 cp_1_1 _x_1_2 -> _Tuple2 lp_1_0 cp_1_1) 
Sapl.SaplParser.findpos_309 !pts_0 !rest_ts_1 = <{Sapl.SaplParser._c;286;11_331}> (StdList.hd (StdList.drop (<{StdInt.-_7}> (<{StdInt.-_7}> (StdList.length_47 pts_0) (StdList.length_47 rest_ts_1)) 1) pts_0))
<{Sapl.SaplParser._c;286;11_331}> !_x_0 = select _x_0 (Sapl.SaplTokenizer.PosToken lp_1_0 cp_1_1 _x_1_2 -> _Tuple2 lp_1_0 cp_1_1) 
Sapl.SaplParser.parseExpr !pts_0 = <{Sapl.SaplParser._c;280;7_332}> (Sapl.SaplParser.body (StdList.map Sapl.SaplParser.anon_109 pts_0) Sapl.SaplParser.defaultState) pts_0
<{Sapl.SaplParser._c;280;7_332}> !_x_0 pts_1 = select _x_0 (Data.Error.Ok _x_1_0 -> select _x_1_0 (_Tuple2 _x_2_0 ps_2_1 -> select _x_2_0 (_Tuple2 fts_3_0 _x_3_1 -> Data.Error.Ok (_Tuple2 fts_3_0 ps_2_1)) ) ) (Data.Error.Error _x_1_0 -> select _x_1_0 (_Tuple2 ts_2_0 msg_2_1 -> let _x_3_0 = Sapl.SaplParser.findpos_309 pts_1 ts_2_0 in Data.Error.Error (<{StdString.+++_11}> msg_2_1 (<{StdString.+++_11}> " at line " (<{StdString.+++_11}> (StdString.toString_5 (_predefined.tupsels2v0 _x_3_0)) (<{StdString.+++_11}> " before charachter " (StdString.toString_5 (_predefined.tupsels2v1 _x_3_0))))))) ) 
Sapl.SaplParser.anon_221 k_0 x_1 xs_2 = _predefined._Cons (_Tuple2 k_0 x_1) xs_2
Sapl.SaplParser.mergeMaps_111 !<{_v==_0}> !<{_v<_1}> !m1_2 !m2_3 = Data.Map.union <{_v<_1}> (Data.Map.fromList <{_v==_0}> <{_v<_1}> (Data.Map.foldrWithKey Sapl.SaplParser.anon_221 _predefined._Nil m2_3)) m1_2
Sapl.SaplParser.mergeMaps_310 !<{_v<_0}> !m1_1 !m2_2 = Data.Map.union <{_v<_0}> (Data.Map.fromList (<{StdOverloaded.==;}> <{StdString.==_2}>) <{_v<_0}> (Data.Map.foldrWithKey Sapl.SaplParser.anon_221 _predefined._Nil m2_2)) m1_1
Sapl.SaplParser.mergeMaps_311 !m1_0 !m2_1 = Data.Map.union (<{StdOverloaded.<;}> <{StdString.<_3}>) (Data.Map.fromList (<{StdOverloaded.==;}> <{StdString.==_2}>) (<{StdOverloaded.<;}> <{StdString.<_3}>) (Data.Map.foldrWithKey Sapl.SaplParser.anon_221 _predefined._Nil m2_1)) m1_0
Sapl.SaplParser.mergeParserStates !pst1_0 !_x_1 = select _x_1 (Data.Maybe.Just pst2_1_0 -> Sapl.SaplParser.set_ps_genFuns_4 (Sapl.SaplParser.set_ps_CAFs_3 (Sapl.SaplParser.set_ps_functions_2 (Sapl.SaplParser.set_ps_constructors_1 pst1_0 (Sapl.SaplParser.mergeMaps_311 (Sapl.SaplParser.get_ps_constructors_1 pst2_1_0) (Sapl.SaplParser.get_ps_constructors_1 pst1_0))) (Sapl.SaplParser.mergeMaps_311 (Sapl.SaplParser.get_ps_functions_2 pst2_1_0) (Sapl.SaplParser.get_ps_functions_2 pst1_0))) (Sapl.SaplParser.mergeMaps_311 (Sapl.SaplParser.get_ps_CAFs_3 pst2_1_0) (Sapl.SaplParser.get_ps_CAFs_3 pst1_0))) _predefined._Nil) (Data.Maybe.Nothing -> pst1_0) 
<{Sapl.SaplParser.TD;ParserState}> _x_0 = _predefined._Nil
<{Sapl.SaplParser.TD;ConstructorDef}> _x_0 = _predefined._Nil
<{Sapl.SaplParser.TD;ErrorMsg}> _x_0 = _predefined._Nil


|| Converted Records
:: Sapl.SaplParser._ParserState = {Sapl.SaplParser.ps_level, Sapl.SaplParser.ps_constructors, Sapl.SaplParser.ps_functions, Sapl.SaplParser.ps_CAFs, Sapl.SaplParser.ps_genFuns}
Sapl.SaplParser.get_ps_level_0 rec = select rec (Sapl.SaplParser._ParserState a1 a2 a3 a4 a5 -> a1)
Sapl.SaplParser.get_ps_constructors_1 rec = select rec (Sapl.SaplParser._ParserState a1 a2 a3 a4 a5 -> a2)
Sapl.SaplParser.get_ps_functions_2 rec = select rec (Sapl.SaplParser._ParserState a1 a2 a3 a4 a5 -> a3)
Sapl.SaplParser.get_ps_CAFs_3 rec = select rec (Sapl.SaplParser._ParserState a1 a2 a3 a4 a5 -> a4)
Sapl.SaplParser.get_ps_genFuns_4 rec = select rec (Sapl.SaplParser._ParserState a1 a2 a3 a4 a5 -> a5)
Sapl.SaplParser.set_ps_level_0 rec val = select rec (Sapl.SaplParser._ParserState  a1 a2 a3 a4 a5 -> Sapl.SaplParser._ParserState val a2 a3 a4 a5)
Sapl.SaplParser.set_ps_constructors_1 rec val = select rec (Sapl.SaplParser._ParserState  a1 a2 a3 a4 a5 -> Sapl.SaplParser._ParserState a1 val a3 a4 a5)
Sapl.SaplParser.set_ps_functions_2 rec val = select rec (Sapl.SaplParser._ParserState  a1 a2 a3 a4 a5 -> Sapl.SaplParser._ParserState a1 a2 val a4 a5)
Sapl.SaplParser.set_ps_CAFs_3 rec val = select rec (Sapl.SaplParser._ParserState  a1 a2 a3 a4 a5 -> Sapl.SaplParser._ParserState a1 a2 a3 val a5)
Sapl.SaplParser.set_ps_genFuns_4 rec val = select rec (Sapl.SaplParser._ParserState  a1 a2 a3 a4 a5 -> Sapl.SaplParser._ParserState a1 a2 a3 a4 val)

:: Sapl.SaplParser._ConstructorDef = {Sapl.SaplParser.index, Sapl.SaplParser.nr_cons, Sapl.SaplParser.nr_args, Sapl.SaplParser.args}
Sapl.SaplParser.get_index_5 rec = select rec (Sapl.SaplParser._ConstructorDef a1 a2 a3 a4 -> a1)
Sapl.SaplParser.get_nr_cons_6 rec = select rec (Sapl.SaplParser._ConstructorDef a1 a2 a3 a4 -> a2)
Sapl.SaplParser.get_nr_args_7 rec = select rec (Sapl.SaplParser._ConstructorDef a1 a2 a3 a4 -> a3)
Sapl.SaplParser.get_args_8 rec = select rec (Sapl.SaplParser._ConstructorDef a1 a2 a3 a4 -> a4)
Sapl.SaplParser.set_index_5 rec val = select rec (Sapl.SaplParser._ConstructorDef  a1 a2 a3 a4 -> Sapl.SaplParser._ConstructorDef val a2 a3 a4)
Sapl.SaplParser.set_nr_cons_6 rec val = select rec (Sapl.SaplParser._ConstructorDef  a1 a2 a3 a4 -> Sapl.SaplParser._ConstructorDef a1 val a3 a4)
Sapl.SaplParser.set_nr_args_7 rec val = select rec (Sapl.SaplParser._ConstructorDef  a1 a2 a3 a4 -> Sapl.SaplParser._ConstructorDef a1 a2 val a4)
Sapl.SaplParser.set_args_8 rec val = select rec (Sapl.SaplParser._ConstructorDef  a1 a2 a3 a4 -> Sapl.SaplParser._ConstructorDef a1 a2 a3 val)

:: <{Sapl.SaplParser.JSONEncode_s;}> = {Sapl.SaplParser.JSONEncode_s}
Sapl.SaplParser.get_JSONEncode_s_9 rec = select rec (<{Sapl.SaplParser.JSONEncode_s;}> a1 -> a1)
Sapl.SaplParser.set_JSONEncode_s_9 rec val = select rec (<{Sapl.SaplParser.JSONEncode_s;}>  a1 -> <{Sapl.SaplParser.JSONEncode_s;}> val)

:: <{Sapl.SaplParser.JSONEncode_ss;}> = {Sapl.SaplParser.JSONEncode_ss}
Sapl.SaplParser.get_JSONEncode_ss_10 rec = select rec (<{Sapl.SaplParser.JSONEncode_ss;}> a1 -> a1)
Sapl.SaplParser.set_JSONEncode_ss_10 rec val = select rec (<{Sapl.SaplParser.JSONEncode_ss;}>  a1 -> <{Sapl.SaplParser.JSONEncode_ss;}> val)

:: <{Sapl.SaplParser.JSONEncode_sss;}> = {Sapl.SaplParser.JSONEncode_sss}
Sapl.SaplParser.get_JSONEncode_sss_11 rec = select rec (<{Sapl.SaplParser.JSONEncode_sss;}> a1 -> a1)
Sapl.SaplParser.set_JSONEncode_sss_11 rec val = select rec (<{Sapl.SaplParser.JSONEncode_sss;}>  a1 -> <{Sapl.SaplParser.JSONEncode_sss;}> val)

:: <{Sapl.SaplParser.JSONEncode_ssss;}> = {Sapl.SaplParser.JSONEncode_ssss}
Sapl.SaplParser.get_JSONEncode_ssss_12 rec = select rec (<{Sapl.SaplParser.JSONEncode_ssss;}> a1 -> a1)
Sapl.SaplParser.set_JSONEncode_ssss_12 rec val = select rec (<{Sapl.SaplParser.JSONEncode_ssss;}>  a1 -> <{Sapl.SaplParser.JSONEncode_ssss;}> val)

:: <{Sapl.SaplParser.JSONEncode_sssss;}> = {Sapl.SaplParser.JSONEncode_sssss}
Sapl.SaplParser.get_JSONEncode_sssss_13 rec = select rec (<{Sapl.SaplParser.JSONEncode_sssss;}> a1 -> a1)
Sapl.SaplParser.set_JSONEncode_sssss_13 rec val = select rec (<{Sapl.SaplParser.JSONEncode_sssss;}>  a1 -> <{Sapl.SaplParser.JSONEncode_sssss;}> val)

:: <{Sapl.SaplParser.JSONEncode_ssssss;}> = {Sapl.SaplParser.JSONEncode_ssssss}
Sapl.SaplParser.get_JSONEncode_ssssss_14 rec = select rec (<{Sapl.SaplParser.JSONEncode_ssssss;}> a1 -> a1)
Sapl.SaplParser.set_JSONEncode_ssssss_14 rec val = select rec (<{Sapl.SaplParser.JSONEncode_ssssss;}>  a1 -> <{Sapl.SaplParser.JSONEncode_ssssss;}> val)

:: <{Sapl.SaplParser.JSONDecode_s;}> = {Sapl.SaplParser.JSONDecode_s}
Sapl.SaplParser.get_JSONDecode_s_15 rec = select rec (<{Sapl.SaplParser.JSONDecode_s;}> a1 -> a1)
Sapl.SaplParser.set_JSONDecode_s_15 rec val = select rec (<{Sapl.SaplParser.JSONDecode_s;}>  a1 -> <{Sapl.SaplParser.JSONDecode_s;}> val)

:: <{Sapl.SaplParser.JSONDecode_ss;}> = {Sapl.SaplParser.JSONDecode_ss}
Sapl.SaplParser.get_JSONDecode_ss_16 rec = select rec (<{Sapl.SaplParser.JSONDecode_ss;}> a1 -> a1)
Sapl.SaplParser.set_JSONDecode_ss_16 rec val = select rec (<{Sapl.SaplParser.JSONDecode_ss;}>  a1 -> <{Sapl.SaplParser.JSONDecode_ss;}> val)

:: <{Sapl.SaplParser.JSONDecode_sss;}> = {Sapl.SaplParser.JSONDecode_sss}
Sapl.SaplParser.get_JSONDecode_sss_17 rec = select rec (<{Sapl.SaplParser.JSONDecode_sss;}> a1 -> a1)
Sapl.SaplParser.set_JSONDecode_sss_17 rec val = select rec (<{Sapl.SaplParser.JSONDecode_sss;}>  a1 -> <{Sapl.SaplParser.JSONDecode_sss;}> val)

:: <{Sapl.SaplParser.JSONDecode_ssss;}> = {Sapl.SaplParser.JSONDecode_ssss}
Sapl.SaplParser.get_JSONDecode_ssss_18 rec = select rec (<{Sapl.SaplParser.JSONDecode_ssss;}> a1 -> a1)
Sapl.SaplParser.set_JSONDecode_ssss_18 rec val = select rec (<{Sapl.SaplParser.JSONDecode_ssss;}>  a1 -> <{Sapl.SaplParser.JSONDecode_ssss;}> val)

:: <{Sapl.SaplParser.JSONDecode_sssss;}> = {Sapl.SaplParser.JSONDecode_sssss}
Sapl.SaplParser.get_JSONDecode_sssss_19 rec = select rec (<{Sapl.SaplParser.JSONDecode_sssss;}> a1 -> a1)
Sapl.SaplParser.set_JSONDecode_sssss_19 rec val = select rec (<{Sapl.SaplParser.JSONDecode_sssss;}>  a1 -> <{Sapl.SaplParser.JSONDecode_sssss;}> val)

:: <{Sapl.SaplParser.JSONDecode_ssssss;}> = {Sapl.SaplParser.JSONDecode_ssssss}
Sapl.SaplParser.get_JSONDecode_ssssss_20 rec = select rec (<{Sapl.SaplParser.JSONDecode_ssssss;}> a1 -> a1)
Sapl.SaplParser.set_JSONDecode_ssssss_20 rec val = select rec (<{Sapl.SaplParser.JSONDecode_ssssss;}>  a1 -> <{Sapl.SaplParser.JSONDecode_ssssss;}> val)

:: <{Sapl.SaplParser.bimap_s;}> = {Sapl.SaplParser.bimap_s}
Sapl.SaplParser.get_bimap_s_21 rec = select rec (<{Sapl.SaplParser.bimap_s;}> a1 -> a1)
Sapl.SaplParser.set_bimap_s_21 rec val = select rec (<{Sapl.SaplParser.bimap_s;}>  a1 -> <{Sapl.SaplParser.bimap_s;}> val)

:: <{Sapl.SaplParser.bimap_ss;}> = {Sapl.SaplParser.bimap_ss}
Sapl.SaplParser.get_bimap_ss_22 rec = select rec (<{Sapl.SaplParser.bimap_ss;}> a1 -> a1)
Sapl.SaplParser.set_bimap_ss_22 rec val = select rec (<{Sapl.SaplParser.bimap_ss;}>  a1 -> <{Sapl.SaplParser.bimap_ss;}> val)

:: <{Sapl.SaplParser.bimap_sss;}> = {Sapl.SaplParser.bimap_sss}
Sapl.SaplParser.get_bimap_sss_23 rec = select rec (<{Sapl.SaplParser.bimap_sss;}> a1 -> a1)
Sapl.SaplParser.set_bimap_sss_23 rec val = select rec (<{Sapl.SaplParser.bimap_sss;}>  a1 -> <{Sapl.SaplParser.bimap_sss;}> val)

:: <{Sapl.SaplParser.gEq_s;}> = {Sapl.SaplParser.gEq_s}
Sapl.SaplParser.get_gEq_s_24 rec = select rec (<{Sapl.SaplParser.gEq_s;}> a1 -> a1)
Sapl.SaplParser.set_gEq_s_24 rec val = select rec (<{Sapl.SaplParser.gEq_s;}>  a1 -> <{Sapl.SaplParser.gEq_s;}> val)

:: <{Sapl.SaplParser.gEq_ss;}> = {Sapl.SaplParser.gEq_ss}
Sapl.SaplParser.get_gEq_ss_25 rec = select rec (<{Sapl.SaplParser.gEq_ss;}> a1 -> a1)
Sapl.SaplParser.set_gEq_ss_25 rec val = select rec (<{Sapl.SaplParser.gEq_ss;}>  a1 -> <{Sapl.SaplParser.gEq_ss;}> val)

:: <{Sapl.SaplParser.gEq_sss;}> = {Sapl.SaplParser.gEq_sss}
Sapl.SaplParser.get_gEq_sss_26 rec = select rec (<{Sapl.SaplParser.gEq_sss;}> a1 -> a1)
Sapl.SaplParser.set_gEq_sss_26 rec val = select rec (<{Sapl.SaplParser.gEq_sss;}>  a1 -> <{Sapl.SaplParser.gEq_sss;}> val)

:: <{Sapl.SaplParser.gEq_ssss;}> = {Sapl.SaplParser.gEq_ssss}
Sapl.SaplParser.get_gEq_ssss_27 rec = select rec (<{Sapl.SaplParser.gEq_ssss;}> a1 -> a1)
Sapl.SaplParser.set_gEq_ssss_27 rec val = select rec (<{Sapl.SaplParser.gEq_ssss;}>  a1 -> <{Sapl.SaplParser.gEq_ssss;}> val)

:: <{Sapl.SaplParser.gEq_sssss;}> = {Sapl.SaplParser.gEq_sssss}
Sapl.SaplParser.get_gEq_sssss_28 rec = select rec (<{Sapl.SaplParser.gEq_sssss;}> a1 -> a1)
Sapl.SaplParser.set_gEq_sssss_28 rec val = select rec (<{Sapl.SaplParser.gEq_sssss;}>  a1 -> <{Sapl.SaplParser.gEq_sssss;}> val)

:: <{Sapl.SaplParser.gEq_ssssss;}> = {Sapl.SaplParser.gEq_ssssss}
Sapl.SaplParser.get_gEq_ssssss_29 rec = select rec (<{Sapl.SaplParser.gEq_ssssss;}> a1 -> a1)
Sapl.SaplParser.set_gEq_ssssss_29 rec val = select rec (<{Sapl.SaplParser.gEq_ssssss;}>  a1 -> <{Sapl.SaplParser.gEq_ssssss;}> val)

:: <{Sapl.SaplParser.gEq_sssssss;}> = {Sapl.SaplParser.gEq_sssssss}
Sapl.SaplParser.get_gEq_sssssss_30 rec = select rec (<{Sapl.SaplParser.gEq_sssssss;}> a1 -> a1)
Sapl.SaplParser.set_gEq_sssssss_30 rec val = select rec (<{Sapl.SaplParser.gEq_sssssss;}>  a1 -> <{Sapl.SaplParser.gEq_sssssss;}> val)

:: <{Sapl.SaplParser.gEq_ssssssss;}> = {Sapl.SaplParser.gEq_ssssssss}
Sapl.SaplParser.get_gEq_ssssssss_31 rec = select rec (<{Sapl.SaplParser.gEq_ssssssss;}> a1 -> a1)
Sapl.SaplParser.set_gEq_ssssssss_31 rec val = select rec (<{Sapl.SaplParser.gEq_ssssssss;}>  a1 -> <{Sapl.SaplParser.gEq_ssssssss;}> val)

:: <{Sapl.SaplParser.gEq_sssssssss;}> = {Sapl.SaplParser.gEq_sssssssss}
Sapl.SaplParser.get_gEq_sssssssss_32 rec = select rec (<{Sapl.SaplParser.gEq_sssssssss;}> a1 -> a1)
Sapl.SaplParser.set_gEq_sssssssss_32 rec val = select rec (<{Sapl.SaplParser.gEq_sssssssss;}>  a1 -> <{Sapl.SaplParser.gEq_sssssssss;}> val)

