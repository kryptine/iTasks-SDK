|| ?module? Sapl.SaplTokenizer


Sapl.SaplTokenizer.rnoarg_25 !<{_v+_0}> start_1 t_2 length_3 = _Tuple3 start_1 (<{StdOverloaded.get_+_0}> <{_v+_0}> start_1 length_3) t_2
Sapl.SaplTokenizer.anon_22 prev_0 !str_1 !base_2 = StdBool.not (Sapl.FastString.matchAt "}>" str_1 base_2)
Sapl.SaplTokenizer.find_first_string !line_0 !start_1 f_2 = if (<{StdInt.==_16}> start_1 (_SystemArray.size_20 line_0)) (_SystemArray.size_20 line_0) (if (f_2 (_SystemArray.select_19 line_0 (<{StdInt.-_7}> start_1 1)) line_0 start_1) (Sapl.SaplTokenizer.find_first_string line_0 (<{StdInt.+_6}> start_1 1) f_2) start_1)
Sapl.SaplTokenizer.return_26 start_0 !_x_1 = select _x_1 (_Tuple2 a_1_0 newbase_1_1 -> _Tuple3 start_0 newbase_1_1 a_1_0) 
Sapl.SaplTokenizer.anon_23 prev_0 !str_1 !base_2 = StdBool.not (Sapl.FastString.matchAt "}>" str_1 base_2)
Sapl.SaplTokenizer.not_eol !c_0 = StdBool.not (<{StdChar.==_18}> c_0 '\n')
Sapl.SaplTokenizer.eof_19 !_vArray_0 str_1 !p_2 = StdBool.not (<{StdInt.<_17}> p_2 (_SystemArray.get_size_4 _vArray_0 str_1))
Sapl.SaplTokenizer.dti_21 !c_0 = if (Sapl.SaplTokenizer.dti_21_select0 c_0) (StdInt.toInt_20 (<{StdChar.-_15}> c_0 '0')) (if (Sapl.SaplTokenizer.dti_21_select1 c_0) (<{StdInt.+_6}> 10 (StdInt.toInt_20 (<{StdChar.-_15}> c_0 'a'))) (select (Sapl.SaplTokenizer.dti_21_select2 c_0) (True -> <{StdInt.+_6}> 10 (StdInt.toInt_20 (<{StdChar.-_15}> c_0 'A'))) ))
Sapl.SaplTokenizer.dti_21_select0 !c_0 = if (StdBool.not (<{StdChar.<_19}> c_0 '0')) (StdBool.not (<{StdChar.<_19}> '9' c_0)) False
Sapl.SaplTokenizer.dti_21_select1 !c_0 = if (StdBool.not (<{StdChar.<_19}> c_0 'a')) (StdBool.not (<{StdChar.<_19}> 'f' c_0)) False
Sapl.SaplTokenizer.dti_21_select2 !c_0 = if (StdBool.not (<{StdChar.<_19}> c_0 'A')) (StdBool.not (<{StdChar.<_19}> 'F' c_0)) False
Sapl.SaplTokenizer.decodeTable_20 = _SystemArray.update_13 (_SystemArray.update_13 (_SystemArray.update_13 (_SystemArray.update_13 (_SystemArray.update_13 (_SystemArray.update_13 (_SystemArray.update_13 (_SystemArray.update_13 (_SystemArray._createArray_8 8) 7 268435456) 6 16777216) 5 1048576) 4 65536) 3 4096) 2 256) 1 16) 0 1
<{Sapl.SaplTokenizer.decodeHex`_16}> !_vArray_0 str_1 !p_2 !len_3 !s_4 !acc_5 = if (<{StdInt.==_16}> s_4 0) (<{_Tuple2!3}> (<{StdInt.+_6}> (<{StdInt.+_6}> p_2 len_3) 1) (Text.Unicode.UChar.fromInt_25 acc_5)) (if (StdChar.isHexDigit (_SystemArray.get_select_3 _vArray_0 str_1 (<{StdInt.+_6}> p_2 s_4))) (<{Sapl.SaplTokenizer.decodeHex`_16}> _vArray_0 str_1 p_2 len_3 (<{StdInt.-_7}> s_4 1) (<{StdInt.+_6}> acc_5 (<{StdInt.*_9}> (_SystemArray.select_11 Sapl.SaplTokenizer.decodeTable_20 (<{StdInt.-_7}> len_3 s_4)) (Sapl.SaplTokenizer.dti_21 (_SystemArray.get_select_3 _vArray_0 str_1 (<{StdInt.+_6}> p_2 s_4)))))) (<{_Tuple2!3}> (<{StdInt.+_6}> p_2 1) (Text.Unicode.UChar.fromChar_26 (_SystemArray.get_select_3 _vArray_0 str_1 p_2))))
Sapl.SaplTokenizer.decodeHex_15 !_vArray_0 str_1 !p_2 !len_3 !s_4 !acc_5 = if (Sapl.SaplTokenizer.eof_19 _vArray_0 str_1 (<{StdInt.+_6}> p_2 len_3)) (<{_Tuple2!3}> (<{StdInt.+_6}> p_2 1) (Text.Unicode.UChar.fromChar_26 (_SystemArray.get_select_3 _vArray_0 str_1 p_2))) (<{Sapl.SaplTokenizer.decodeHex`_16}> _vArray_0 str_1 p_2 len_3 s_4 acc_5)
Sapl.SaplTokenizer.decodeBSChar_18 !_vArray_0 str_1 !p_2 = if (Sapl.SaplTokenizer.eof_19 _vArray_0 str_1 p_2) (_Tuple2 p_2 (Text.Unicode.UChar.fromChar_26 '\\')) (if (<{StdChar.==_18}> (_SystemArray.get_select_3 _vArray_0 str_1 p_2) '0') (_Tuple2 (<{StdInt.+_6}> p_2 1) (Text.Unicode.UChar.fromInt_25 0)) (if (<{StdChar.==_18}> (_SystemArray.get_select_3 _vArray_0 str_1 p_2) 'a') (_Tuple2 (<{StdInt.+_6}> p_2 1) (Text.Unicode.UChar.fromInt_25 7)) (if (<{StdChar.==_18}> (_SystemArray.get_select_3 _vArray_0 str_1 p_2) 'b') (_Tuple2 (<{StdInt.+_6}> p_2 1) (Text.Unicode.UChar.fromChar_26 '\b')) (if (<{StdChar.==_18}> (_SystemArray.get_select_3 _vArray_0 str_1 p_2) 'f') (_Tuple2 (<{StdInt.+_6}> p_2 1) (Text.Unicode.UChar.fromChar_26 '\f')) (if (<{StdChar.==_18}> (_SystemArray.get_select_3 _vArray_0 str_1 p_2) 'n') (_Tuple2 (<{StdInt.+_6}> p_2 1) (Text.Unicode.UChar.fromChar_26 '\n')) (if (<{StdChar.==_18}> (_SystemArray.get_select_3 _vArray_0 str_1 p_2) 'r') (_Tuple2 (<{StdInt.+_6}> p_2 1) (Text.Unicode.UChar.fromChar_26 '\r')) (if (<{StdChar.==_18}> (_SystemArray.get_select_3 _vArray_0 str_1 p_2) 't') (_Tuple2 (<{StdInt.+_6}> p_2 1) (Text.Unicode.UChar.fromChar_26 '\t')) (if (<{StdChar.==_18}> (_SystemArray.get_select_3 _vArray_0 str_1 p_2) 'v') (_Tuple2 (<{StdInt.+_6}> p_2 1) (Text.Unicode.UChar.fromChar_26 '\v')) (if (<{StdChar.==_18}> (_SystemArray.get_select_3 _vArray_0 str_1 p_2) '\'') (_Tuple2 (<{StdInt.+_6}> p_2 1) (Text.Unicode.UChar.fromChar_26 '\'')) (if (<{StdChar.==_18}> (_SystemArray.get_select_3 _vArray_0 str_1 p_2) '"') (_Tuple2 (<{StdInt.+_6}> p_2 1) (Text.Unicode.UChar.fromChar_26 '"')) (if (<{StdChar.==_18}> (_SystemArray.get_select_3 _vArray_0 str_1 p_2) 'x') (Sapl.SaplTokenizer.decodeHex_15 _vArray_0 str_1 p_2 2 2 0) (if (<{StdChar.==_18}> (_SystemArray.get_select_3 _vArray_0 str_1 p_2) 'u') (Sapl.SaplTokenizer.decodeHex_15 _vArray_0 str_1 p_2 4 4 0) (if (<{StdChar.==_18}> (_SystemArray.get_select_3 _vArray_0 str_1 p_2) 'U') (Sapl.SaplTokenizer.decodeHex_15 _vArray_0 str_1 p_2 8 8 0) (_Tuple2 (<{StdInt.+_6}> p_2 1) (Text.Unicode.UChar.fromChar_26 (_SystemArray.get_select_3 _vArray_0 str_1 p_2))))))))))))))))
Sapl.SaplTokenizer.decode_17 !_vArray_0 str_1 qc_2 !p_3 cs_4 = if (Sapl.SaplTokenizer.eof_19 _vArray_0 str_1 p_3) (_Tuple2 p_3 cs_4) (if (<{StdChar.==_18}> (_SystemArray.get_select_3 _vArray_0 str_1 p_3) qc_2) (_Tuple2 (<{StdInt.+_6}> p_3 1) cs_4) (if (<{StdChar.==_18}> (_SystemArray.get_select_3 _vArray_0 str_1 p_3) '\\') (let _x_1_0 = Sapl.SaplTokenizer.decodeBSChar_18 _vArray_0 str_1 (<{StdInt.+_6}> p_3 1) in Sapl.SaplTokenizer.decode_17 _vArray_0 str_1 qc_2 (_predefined.tupsels2v0 _x_1_0) (_predefined._Cons (_predefined.tupsels2v1 _x_1_0) cs_4)) (Sapl.SaplTokenizer.decode_17 _vArray_0 str_1 qc_2 (<{StdInt.+_6}> p_3 1) (_predefined._Cons (Text.Unicode.UChar.fromChar_26 (_SystemArray.get_select_3 _vArray_0 str_1 p_3)) cs_4))))
<{Sapl.SaplTokenizer.decodeHex`_41}> str_0 !p_1 !len_2 !s_3 !acc_4 = if (<{StdInt.==_16}> s_3 0) (<{_Tuple2!3}> (<{StdInt.+_6}> (<{StdInt.+_6}> p_1 len_2) 1) (Text.Unicode.UChar.fromInt_25 acc_4)) (if (StdChar.isHexDigit (_SystemArray.select_19 str_0 (<{StdInt.+_6}> p_1 s_3))) (<{Sapl.SaplTokenizer.decodeHex`_41}> str_0 p_1 len_2 (<{StdInt.-_7}> s_3 1) (<{StdInt.+_6}> acc_4 (<{StdInt.*_9}> (_SystemArray.select_11 Sapl.SaplTokenizer.decodeTable_20 (<{StdInt.-_7}> len_2 s_3)) (Sapl.SaplTokenizer.dti_21 (_SystemArray.select_19 str_0 (<{StdInt.+_6}> p_1 s_3)))))) (<{_Tuple2!3}> (<{StdInt.+_6}> p_1 1) (Text.Unicode.UChar.fromChar_26 (_SystemArray.select_19 str_0 p_1))))
Sapl.SaplTokenizer.eof_38 !str_0 !p_1 = StdBool.not (<{StdInt.<_17}> p_1 (_SystemArray.size_20 str_0))
Sapl.SaplTokenizer.decodeHex_40 !str_0 !p_1 !len_2 !s_3 !acc_4 = if (Sapl.SaplTokenizer.eof_38 str_0 (<{StdInt.+_6}> p_1 len_2)) (<{_Tuple2!3}> (<{StdInt.+_6}> p_1 1) (Text.Unicode.UChar.fromChar_26 (_SystemArray.select_19 str_0 p_1))) (<{Sapl.SaplTokenizer.decodeHex`_41}> str_0 p_1 len_2 s_3 acc_4)
Sapl.SaplTokenizer.decodeBSChar_39 !str_0 !p_1 = if (Sapl.SaplTokenizer.eof_38 str_0 p_1) (_Tuple2 p_1 (Text.Unicode.UChar.fromChar_26 '\\')) (if (<{StdChar.==_18}> (_SystemArray.select_19 str_0 p_1) '0') (_Tuple2 (<{StdInt.+_6}> p_1 1) (Text.Unicode.UChar.fromInt_25 0)) (if (<{StdChar.==_18}> (_SystemArray.select_19 str_0 p_1) 'a') (_Tuple2 (<{StdInt.+_6}> p_1 1) (Text.Unicode.UChar.fromInt_25 7)) (if (<{StdChar.==_18}> (_SystemArray.select_19 str_0 p_1) 'b') (_Tuple2 (<{StdInt.+_6}> p_1 1) (Text.Unicode.UChar.fromChar_26 '\b')) (if (<{StdChar.==_18}> (_SystemArray.select_19 str_0 p_1) 'f') (_Tuple2 (<{StdInt.+_6}> p_1 1) (Text.Unicode.UChar.fromChar_26 '\f')) (if (<{StdChar.==_18}> (_SystemArray.select_19 str_0 p_1) 'n') (_Tuple2 (<{StdInt.+_6}> p_1 1) (Text.Unicode.UChar.fromChar_26 '\n')) (if (<{StdChar.==_18}> (_SystemArray.select_19 str_0 p_1) 'r') (_Tuple2 (<{StdInt.+_6}> p_1 1) (Text.Unicode.UChar.fromChar_26 '\r')) (if (<{StdChar.==_18}> (_SystemArray.select_19 str_0 p_1) 't') (_Tuple2 (<{StdInt.+_6}> p_1 1) (Text.Unicode.UChar.fromChar_26 '\t')) (if (<{StdChar.==_18}> (_SystemArray.select_19 str_0 p_1) 'v') (_Tuple2 (<{StdInt.+_6}> p_1 1) (Text.Unicode.UChar.fromChar_26 '\v')) (if (<{StdChar.==_18}> (_SystemArray.select_19 str_0 p_1) '\'') (_Tuple2 (<{StdInt.+_6}> p_1 1) (Text.Unicode.UChar.fromChar_26 '\'')) (if (<{StdChar.==_18}> (_SystemArray.select_19 str_0 p_1) '"') (_Tuple2 (<{StdInt.+_6}> p_1 1) (Text.Unicode.UChar.fromChar_26 '"')) (if (<{StdChar.==_18}> (_SystemArray.select_19 str_0 p_1) 'x') (Sapl.SaplTokenizer.decodeHex_40 str_0 p_1 2 2 0) (if (<{StdChar.==_18}> (_SystemArray.select_19 str_0 p_1) 'u') (Sapl.SaplTokenizer.decodeHex_40 str_0 p_1 4 4 0) (if (<{StdChar.==_18}> (_SystemArray.select_19 str_0 p_1) 'U') (Sapl.SaplTokenizer.decodeHex_40 str_0 p_1 8 8 0) (_Tuple2 (<{StdInt.+_6}> p_1 1) (Text.Unicode.UChar.fromChar_26 (_SystemArray.select_19 str_0 p_1))))))))))))))))
Sapl.SaplTokenizer.decode_37 !str_0 qc_1 !p_2 cs_3 = if (Sapl.SaplTokenizer.eof_38 str_0 p_2) (_Tuple2 p_2 cs_3) (if (<{StdChar.==_18}> (_SystemArray.select_19 str_0 p_2) qc_1) (_Tuple2 (<{StdInt.+_6}> p_2 1) cs_3) (if (<{StdChar.==_18}> (_SystemArray.select_19 str_0 p_2) '\\') (let _x_1_0 = Sapl.SaplTokenizer.decodeBSChar_39 str_0 (<{StdInt.+_6}> p_2 1) in Sapl.SaplTokenizer.decode_37 str_0 qc_1 (_predefined.tupsels2v0 _x_1_0) (_predefined._Cons (_predefined.tupsels2v1 _x_1_0) cs_3)) (Sapl.SaplTokenizer.decode_37 str_0 qc_1 (<{StdInt.+_6}> p_2 1) (_predefined._Cons (Text.Unicode.UChar.fromChar_26 (_SystemArray.select_19 str_0 p_2)) cs_3))))
Sapl.SaplTokenizer.read_string_lit !qc_0 !start_1 !str_2 = let _x_1_0 = Sapl.SaplTokenizer.decode_37 str_2 qc_0 start_1 _predefined._Nil in <{_Tuple2!3}> (_predefined.tupsels2v0 _x_1_0) (StdList.reverse (_predefined.tupsels2v1 _x_1_0))
Sapl.SaplTokenizer.readExp_28 !line_0 !start_1 = if (<{StdInt.<_17}> (_SystemArray.size_20 line_0) (<{StdInt.+_6}> start_1 2)) (_Tuple2 0 start_1) (if (Sapl.SaplTokenizer.readExp_28_select0 line_0 start_1) (_Tuple2 0 start_1) (let signskip_1_0 = <{Sapl.SaplTokenizer._if;174;20_48}> (StdChar.isDigit (_SystemArray.select_19 line_0 (<{StdInt.+_6}> start_1 1))), stop_1_1 = Sapl.FastString.skipChars line_0 (<{StdInt.+_6}> (<{StdInt.+_6}> start_1 1) signskip_1_0) StdChar.isDigit in _Tuple2 (<{StdInt.*_9}> (<{Sapl.SaplTokenizer._c;170;16_49}> (_SystemArray.select_19 line_0 (<{StdInt.+_6}> start_1 1))) (StdInt.toInt_23 (<{StdString.%_10}> line_0 (_Tuple2 (<{StdInt.+_6}> (<{StdInt.+_6}> start_1 1) signskip_1_0) (<{StdInt.-_7}> stop_1_1 1))))) stop_1_1))
Sapl.SaplTokenizer.readExp_28_select0 !line_0 !start_1 = if (StdBool.not (<{StdChar.==_18}> (_SystemArray.select_19 line_0 start_1) 'e')) (StdBool.not (<{StdChar.==_18}> (_SystemArray.select_19 line_0 start_1) 'E')) False
<{Sapl.SaplTokenizer._c;170;16_49}> !_x_0 = select _x_0 ('+' -> 1) ('-' -> -1) (_ -> 1)
<{Sapl.SaplTokenizer._if;174;20_48}> !_x_0 = select _x_0 (True -> 0) (_ -> 1)
Sapl.SaplTokenizer.tstr_24 !<{_v%_0}> line_1 start_2 stop_3 = <{StdOverloaded.get_%_11}> <{_v%_0}> line_1 (_Tuple2 start_2 (<{StdInt.-_7}> stop_3 1))
Sapl.SaplTokenizer.tstr_42 !line_0 !start_1 !stop_2 = <{StdString.%_10}> line_0 (_Tuple2 start_1 (<{StdInt.-_7}> stop_2 1))
Sapl.SaplTokenizer.numberToken_27 line_0 start_1 p1_2 = let fpart_1_0 = Sapl.FastString.skipChars line_0 (<{StdInt.+_6}> start_1 p1_2) StdChar.isDigit, _x_1_1 = <{Sapl.SaplTokenizer._if;155;25_51}> (Sapl.SaplTokenizer._f50_50 (<{StdInt.<_17}> fpart_1_0 (_SystemArray.size_20 line_0)) line_0 fpart_1_0) line_0 fpart_1_0, stop_1_2 = _predefined.tupsels2v1 _x_1_1, _x_1_3 = Sapl.SaplTokenizer.readExp_28 line_0 stop_1_2, exp_1_4 = _predefined.tupsels2v0 _x_1_3 in Sapl.SaplTokenizer.return_26 start_1 (_Tuple2 (Sapl.SaplTokenizer.TLit (<{Sapl.SaplTokenizer._if;158;25_53}> (Sapl.SaplTokenizer._f52_52 (_predefined.tupsels2v0 _x_1_1) exp_1_4) line_0 start_1 stop_1_2 exp_1_4)) (_predefined.tupsels2v1 _x_1_3))
<{Sapl.SaplTokenizer._if;158;25_53}> !_x_0 line_1 start_2 stop_3 exp_4 = select _x_0 (True -> Sapl.SaplTokenizer.LReal (<{StdReal.*_4}> (StdReal.toReal_15 (Sapl.SaplTokenizer.tstr_42 line_1 start_2 stop_3)) (<{StdReal.^_7}> 10 (StdReal.toReal_13 exp_4)))) (_ -> Sapl.SaplTokenizer.LInt (StdInt.toInt_23 (Sapl.SaplTokenizer.tstr_42 line_1 start_2 stop_3)))
Sapl.SaplTokenizer._f52_52 !_x_0 exp_1 = select _x_0 (True -> True) (_ -> StdBool.not (<{StdInt.==_16}> exp_1 0))
<{Sapl.SaplTokenizer._if;155;25_51}> !_x_0 line_1 fpart_2 = select _x_0 (True -> _Tuple2 True (Sapl.FastString.skipChars line_1 (<{StdInt.+_6}> fpart_2 1) StdChar.isDigit)) (_ -> _Tuple2 False fpart_2)
Sapl.SaplTokenizer._f50_50 !_x_0 line_1 fpart_2 = select _x_0 (True -> <{StdChar.==_18}> (_SystemArray.select_19 line_1 fpart_2) '.') (_ -> False)
Sapl.SaplTokenizer.anon_36 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Sapl.SaplTokenizer.is_stopchar !char_0 = if (<{StdChar.==_18}> char_0 '=') True (if (<{StdChar.==_18}> char_0 ':') True (if (<{StdChar.==_18}> char_0 ')') True (if (<{StdChar.==_18}> char_0 '(') True (if (<{StdChar.==_18}> char_0 '|') True (if (<{StdChar.==_18}> char_0 '{') True (if (<{StdChar.==_18}> char_0 '}') True (if (<{StdChar.==_18}> char_0 ',') True (if (<{StdChar.==_18}> char_0 ';') True (StdChar.isSpace char_0)))))))))
Sapl.SaplTokenizer.anon_43 !g_0 x_1 = StdBool.not (g_0 x_1)
Sapl.SaplTokenizer.anon_44 !x_0 = StdBool.not (Sapl.SaplTokenizer.is_stopchar x_0)
Sapl.SaplTokenizer.not_stopchar = Sapl.SaplTokenizer.anon_44
Sapl.SaplTokenizer.is_space !c_0 = if (StdChar.isSpace c_0) (Sapl.SaplTokenizer.not_eol c_0) False
Sapl.SaplTokenizer.rnoarg_45 start_0 t_1 length_2 = _Tuple3 start_0 (<{StdInt.+_6}> start_0 length_2) t_1
Sapl.SaplTokenizer.read_token !base_0 !line_1 = let start_1_0 = Sapl.FastString.skipChars line_1 base_0 Sapl.SaplTokenizer.is_space in if (<{StdInt.<_17}> (<{StdInt.-_7}> (_SystemArray.size_20 line_1) 1) start_1_0) (Sapl.SaplTokenizer.rnoarg_45 start_1_0 Sapl.SaplTokenizer.TEndOfLine 0) (if (Sapl.SaplTokenizer.read_token_select0 start_1_0 base_0 line_1) (Sapl.SaplTokenizer.rnoarg_45 start_1_0 Sapl.SaplTokenizer.TEndOfLine 1) (if (Sapl.FastString.matchAt "!<{" line_1 start_1_0) (let stop_2_0 = Sapl.SaplTokenizer.find_first_string line_1 (<{StdInt.+_6}> start_1_0 3) Sapl.SaplTokenizer.anon_22 in Sapl.SaplTokenizer.return_26 start_1_0 (_Tuple2 (Sapl.SaplTokenizer.TStrictIdentifier (<{StdString.%_10}> line_1 (_Tuple2 (<{StdInt.+_6}> start_1_0 3) (<{StdInt.-_7}> stop_2_0 1)))) (<{StdInt.+_6}> stop_2_0 2))) (if (Sapl.FastString.matchAt "<{" line_1 start_1_0) (let stop_2_0 = Sapl.SaplTokenizer.find_first_string line_1 (<{StdInt.+_6}> start_1_0 2) Sapl.SaplTokenizer.anon_23 in Sapl.SaplTokenizer.return_26 start_1_0 (_Tuple2 (Sapl.SaplTokenizer.TIdentifier (<{StdString.%_10}> line_1 (_Tuple2 (<{StdInt.+_6}> start_1_0 2) (<{StdInt.-_7}> stop_2_0 1)))) (<{StdInt.+_6}> stop_2_0 2))) (if (Sapl.FastString.matchAt "=:" line_1 start_1_0) (Sapl.SaplTokenizer.rnoarg_45 start_1_0 Sapl.SaplTokenizer.TCAFAssignmentOp 2) (if (Sapl.FastString.matchAt "::" line_1 start_1_0) (Sapl.SaplTokenizer.rnoarg_45 start_1_0 Sapl.SaplTokenizer.TTypeDef 2) (if (Sapl.FastString.matchAt "||" line_1 start_1_0) (Sapl.SaplTokenizer.read_token (Sapl.FastString.skipChars line_1 (<{StdInt.+_6}> start_1_0 2) Sapl.SaplTokenizer.not_eol) line_1) (if (<{StdChar.==_18}> (_SystemArray.select_19 line_1 start_1_0) '|') (Sapl.SaplTokenizer.rnoarg_45 start_1_0 Sapl.SaplTokenizer.TVerticalBar 1) (if (<{StdChar.==_18}> (_SystemArray.select_19 line_1 start_1_0) '=') (Sapl.SaplTokenizer.rnoarg_45 start_1_0 Sapl.SaplTokenizer.TAssignmentOp 1) (if (Sapl.FastString.matchAt ":==" line_1 start_1_0) (Sapl.SaplTokenizer.rnoarg_45 start_1_0 Sapl.SaplTokenizer.TMacroAssignmentOp 3) (if (Sapl.FastString.matchAt "->" line_1 start_1_0) (Sapl.SaplTokenizer.rnoarg_45 start_1_0 Sapl.SaplTokenizer.TSelectAssignmentOp 2) (if (<{StdChar.==_18}> (_SystemArray.select_19 line_1 start_1_0) '\\') (Sapl.SaplTokenizer.rnoarg_45 start_1_0 Sapl.SaplTokenizer.TLambda 1) (if (<{StdChar.==_18}> (_SystemArray.select_19 line_1 start_1_0) ',') (Sapl.SaplTokenizer.rnoarg_45 start_1_0 Sapl.SaplTokenizer.TColon 1) (if (<{StdChar.==_18}> (_SystemArray.select_19 line_1 start_1_0) '(') (Sapl.SaplTokenizer.rnoarg_45 start_1_0 Sapl.SaplTokenizer.TOpenParenthesis 1) (if (<{StdChar.==_18}> (_SystemArray.select_19 line_1 start_1_0) ')') (Sapl.SaplTokenizer.rnoarg_45 start_1_0 Sapl.SaplTokenizer.TCloseParenthesis 1) (if (<{StdChar.==_18}> (_SystemArray.select_19 line_1 start_1_0) '{') (Sapl.SaplTokenizer.rnoarg_45 start_1_0 Sapl.SaplTokenizer.TOpenBracket 1) (if (<{StdChar.==_18}> (_SystemArray.select_19 line_1 start_1_0) '}') (Sapl.SaplTokenizer.rnoarg_45 start_1_0 Sapl.SaplTokenizer.TCloseBracket 1) (if (<{StdChar.==_18}> (_SystemArray.select_19 line_1 start_1_0) '"') (let _x_2_0 = Sapl.SaplTokenizer.read_string_lit '"' (<{StdInt.+_6}> start_1_0 1) line_1 in Sapl.SaplTokenizer.return_26 start_1_0 (_Tuple2 (Sapl.SaplTokenizer.TLit (Sapl.SaplTokenizer.LString (_predefined.tupsels2v1 _x_2_0))) (_predefined.tupsels2v0 _x_2_0))) (if (<{StdChar.==_18}> (_SystemArray.select_19 line_1 start_1_0) '\'') (let _x_2_0 = Sapl.SaplTokenizer.read_string_lit '\'' (<{StdInt.+_6}> start_1_0 1) line_1 in Sapl.SaplTokenizer.return_26 start_1_0 (_Tuple2 (Sapl.SaplTokenizer.TLit (Sapl.SaplTokenizer.LChar (_predefined.tupsels2v1 _x_2_0))) (_predefined.tupsels2v0 _x_2_0))) (if (<{StdChar.==_18}> (_SystemArray.select_19 line_1 start_1_0) '+') (Sapl.SaplTokenizer.numberToken_27 line_1 start_1_0 1) (if (<{StdChar.==_18}> (_SystemArray.select_19 line_1 start_1_0) '-') (Sapl.SaplTokenizer.numberToken_27 line_1 start_1_0 1) (if (StdChar.isDigit (_SystemArray.select_19 line_1 start_1_0)) (Sapl.SaplTokenizer.numberToken_27 line_1 start_1_0 0) (let stop_2_0 = Sapl.FastString.skipChars line_1 start_1_0 Sapl.SaplTokenizer.not_stopchar, str_2_1 = Sapl.SaplTokenizer.tstr_42 line_1 start_1_0 stop_2_0 in <{Sapl.SaplTokenizer._c;134;11_54}> str_2_1 start_1_0 stop_2_0))))))))))))))))))))))
Sapl.SaplTokenizer.read_token_select0 start_1_0 !base_0 !line_1 = if (<{StdChar.==_18}> (_SystemArray.select_19 line_1 start_1_0) ';') True (<{StdChar.==_18}> (_SystemArray.select_19 line_1 start_1_0) '\n')
<{Sapl.SaplTokenizer._c;134;11_54}> !str_0 !start_1 !stop_2 = select str_0 ("False" -> Sapl.SaplTokenizer.return_26 start_1 (_Tuple2 (Sapl.SaplTokenizer.TLit (Sapl.SaplTokenizer.LBool False)) stop_2)) ("false" -> Sapl.SaplTokenizer.return_26 start_1 (_Tuple2 (Sapl.SaplTokenizer.TLit (Sapl.SaplTokenizer.LBool False)) stop_2)) ("True" -> Sapl.SaplTokenizer.return_26 start_1 (_Tuple2 (Sapl.SaplTokenizer.TLit (Sapl.SaplTokenizer.LBool True)) stop_2)) ("true" -> Sapl.SaplTokenizer.return_26 start_1 (_Tuple2 (Sapl.SaplTokenizer.TLit (Sapl.SaplTokenizer.LBool True)) stop_2)) ("select" -> Sapl.SaplTokenizer.return_26 start_1 (_Tuple2 Sapl.SaplTokenizer.TSelectKeyword stop_2)) ("if" -> Sapl.SaplTokenizer.return_26 start_1 (_Tuple2 Sapl.SaplTokenizer.TIfKeyword stop_2)) ("let" -> Sapl.SaplTokenizer.return_26 start_1 (_Tuple2 Sapl.SaplTokenizer.TLetKeyword stop_2)) ("in" -> Sapl.SaplTokenizer.return_26 start_1 (_Tuple2 Sapl.SaplTokenizer.TInKeyword stop_2)) (_ -> if (<{StdChar.==_18}> (_SystemArray.select_19 str_0 0) '!') (Sapl.SaplTokenizer.return_26 start_1 (_Tuple2 (Sapl.SaplTokenizer.TStrictIdentifier (<{StdString.%_10}> str_0 (_Tuple2 1 (_SystemArray.size_20 str_0)))) stop_2)) (Sapl.SaplTokenizer.return_26 start_1 (_Tuple2 (Sapl.SaplTokenizer.TIdentifier str_0) stop_2)))
Sapl.SaplTokenizer.tokens__31 !inp_0 !base_1 ts_2 = if (<{StdInt.<_17}> base_1 (_SystemArray.size_20 inp_0)) (let _x_1_0 = Sapl.SaplTokenizer.read_token base_1 inp_0 in Sapl.SaplTokenizer.tokens__31 inp_0 (_predefined.tupsels3v1 _x_1_0) (_predefined._Cons (_predefined.tupsels3v2 _x_1_0) ts_2)) (StdList.reverse ts_2)
Sapl.SaplTokenizer.tokens !inp_0 = Sapl.SaplTokenizer.tokens__31 inp_0 0 _predefined._Nil
Sapl.SaplTokenizer.finalise_29 _x_0 _x_1 !ts_2 = select ts_2 (_predefined._Cons _x_1_0 _x_1_1 -> select _x_1_0 (Sapl.SaplTokenizer.PosToken _x_2_0 _x_2_1 _x_2_2 -> select _x_2_2 (Sapl.SaplTokenizer.TEndOfLine -> StdList.reverse ts_2) ) ) (_ -> StdList.reverse (_predefined._Cons (Sapl.SaplTokenizer.PosToken _x_0 _x_1 Sapl.SaplTokenizer.TEndOfLine) ts_2))
Sapl.SaplTokenizer.tokens__30 !inp_0 lp_1 cp_2 !base_3 ts_4 = <{Sapl.SaplTokenizer._c;183;15_56}> (<{StdInt.<_17}> base_3 (_SystemArray.size_20 inp_0)) base_3 inp_0 lp_1 cp_2 ts_4
<{Sapl.SaplTokenizer._c;183;15_56}> !_x_0 base_1 inp_2 lp_3 cp_4 ts_5 = select _x_0 (True -> let _x_2_0 = Sapl.SaplTokenizer.read_token base_1 inp_2, t_2_1 = _predefined.tupsels3v2 _x_2_0, newbase_2_2 = _predefined.tupsels3v1 _x_2_0, cp2_2_3 = _predefined.tupsels3v0 _x_2_0 in <{Sapl.SaplTokenizer._c;185;29_55}> t_2_1 inp_2 lp_3 newbase_2_2 cp_4 cp2_2_3 base_1 ts_5) (_ -> Sapl.SaplTokenizer.finalise_29 lp_3 cp_4 ts_5)
<{Sapl.SaplTokenizer._c;185;29_55}> !t_0 !inp_1 lp_2 !newbase_3 cp_4 cp2_5 base_6 ts_7 = select t_0 (Sapl.SaplTokenizer.TEndOfLine -> Sapl.SaplTokenizer.tokens__30 inp_1 (<{StdInt.+_6}> lp_2 1) 1 newbase_3 (_predefined._Cons (Sapl.SaplTokenizer.PosToken lp_2 (<{StdInt.-_7}> (<{StdInt.+_6}> cp_4 cp2_5) base_6) t_0) ts_7)) (_ -> Sapl.SaplTokenizer.tokens__30 inp_1 lp_2 (<{StdInt.-_7}> (<{StdInt.+_6}> cp_4 newbase_3) base_6) newbase_3 (_predefined._Cons (Sapl.SaplTokenizer.PosToken lp_2 (<{StdInt.-_7}> (<{StdInt.+_6}> cp_4 cp2_5) base_6) t_0) ts_7))
Sapl.SaplTokenizer.tokensWithPositions !inp_0 = Sapl.SaplTokenizer.tokens__30 inp_0 1 1 0 _predefined._Nil
Sapl.SaplTokenizer.is_ss_34 !c_0 = StdBool.not (Sapl.SaplTokenizer._f57_57 (StdChar.isAlphanum c_0) c_0)
Sapl.SaplTokenizer._f57_57 !_x_0 c_1 = select _x_0 (True -> True) (_ -> if (<{StdChar.==_18}> c_1 '_') True (<{StdChar.==_18}> c_1 '.'))
<{Sapl.SaplTokenizer.c;236;24_32}> !_vArray_0 !g_i_1 !g_s_2 g_a_3 = if (StdBool.not (<{StdInt.<_17}> g_s_2 g_i_1)) (let !g_a_1_0 = _predefined._dummyForStrictAlias (_predefined.tupsels2v1 _x_1_1), _x_1_1 = _SystemArray.get_uselect_6 _vArray_0 g_a_3 g_i_1 in _predefined._Cons (Sapl.SaplTokenizer.is_ss_34 (_predefined.tupsels2v0 _x_1_1)) (<{Sapl.SaplTokenizer.c;236;24_32}> _vArray_0 (<{StdInt.+_6}> g_i_1 StdInt.one_11) g_s_2 g_a_1_0)) _predefined._Nil
Sapl.SaplTokenizer.ss_33 !_vArray_0 f_1 = let _x_1_0 = _SystemArray.get_usize_7 _vArray_0 f_1 in StdList.or (<{Sapl.SaplTokenizer.c;236;24_32}> _vArray_0 0 (<{StdInt.-_7}> (_predefined.tupsels2v0 _x_1_0) 1) (_predefined.tupsels2v1 _x_1_0))
<{Sapl.SaplTokenizer.c;236;24_47}> !g_i_0 !g_s_1 g_a_2 = if (StdBool.not (<{StdInt.<_17}> g_s_1 g_i_0)) (let !g_a_1_0 = _predefined._dummyForStrictAlias (_predefined.tupsels2v1 _x_1_1), _x_1_1 = _SystemArray.uselect_22 g_a_2 g_i_0 in _predefined._Cons (Sapl.SaplTokenizer.is_ss_34 (_predefined.tupsels2v0 _x_1_1)) (<{Sapl.SaplTokenizer.c;236;24_47}> (<{StdInt.+_6}> g_i_0 StdInt.one_11) g_s_1 g_a_1_0)) _predefined._Nil
Sapl.SaplTokenizer.ss_46 !f_0 = let _x_1_0 = _SystemArray.usize_23 f_0 in StdList.or (<{Sapl.SaplTokenizer.c;236;24_47}> 0 (<{StdInt.-_7}> (_predefined.tupsels2v0 _x_1_0) 1) (_predefined.tupsels2v1 _x_1_0))
Sapl.SaplTokenizer.escape !f_0 = if (Sapl.SaplTokenizer.ss_46 f_0) (<{StdString.+++_11}> "<{" (<{StdString.+++_11}> f_0 "}>")) f_0
Sapl.SaplTokenizer.toString_3 !_x_0 = select _x_0 (Sapl.SaplTokenizer.LString ustr_1_0 -> <{StdString.+++_11}> "\"" (<{StdString.+++_11}> (Text.Unicode.Encodings.JS.toJSLiteral ustr_1_0) "\"")) (Sapl.SaplTokenizer.LChar uchr_1_0 -> <{StdString.+++_11}> "'" (<{StdString.+++_11}> (Text.Unicode.Encodings.JS.toJSLiteral uchr_1_0) "'")) (Sapl.SaplTokenizer.LInt int_1_0 -> StdString.toString_5 int_1_0) (Sapl.SaplTokenizer.LReal real_1_0 -> StdString.toString_7 real_1_0) (Sapl.SaplTokenizer.LBool _x_1_0 -> if _x_1_0 "True" "False") 
Sapl.SaplTokenizer.toString_4 !_x_0 = select _x_0 (Sapl.SaplTokenizer.TIdentifier name_1_0 -> Sapl.SaplTokenizer.escape name_1_0) (Sapl.SaplTokenizer.TStrictIdentifier name_1_0 -> <{StdString.+++_11}> "!" (Sapl.SaplTokenizer.escape name_1_0)) (Sapl.SaplTokenizer.TComment comment_1_0 -> <{StdString.+++_11}> "||" comment_1_0) (Sapl.SaplTokenizer.TInlineAnnotation -> "") (Sapl.SaplTokenizer.TAssignmentOp -> "=") (Sapl.SaplTokenizer.TMacroAssignmentOp -> ":==") (Sapl.SaplTokenizer.TCAFAssignmentOp -> "=:") (Sapl.SaplTokenizer.TLambda -> "\\") (Sapl.SaplTokenizer.TColon -> ",") (Sapl.SaplTokenizer.TVerticalBar -> "|") (Sapl.SaplTokenizer.TOpenParenthesis -> "(") (Sapl.SaplTokenizer.TCloseParenthesis -> ")") (Sapl.SaplTokenizer.TOpenBracket -> "{") (Sapl.SaplTokenizer.TCloseBracket -> "}") (Sapl.SaplTokenizer.TTypeDef -> "::") (Sapl.SaplTokenizer.TLit lit_1_0 -> Sapl.SaplTokenizer.toString_3 lit_1_0) (Sapl.SaplTokenizer.TSelectKeyword -> "select") (Sapl.SaplTokenizer.TIfKeyword -> "if") (Sapl.SaplTokenizer.TLetKeyword -> "let") (Sapl.SaplTokenizer.TInKeyword -> "in") (Sapl.SaplTokenizer.TEndOfLine -> "\n") (_ -> "\n")
<{Sapl.SaplTokenizer.TD;Token}> _x_0 = _predefined._Nil
<{Sapl.SaplTokenizer.TD;PosToken}> _x_0 = _predefined._Nil
<{Sapl.SaplTokenizer.TD;Literal}> _x_0 = _predefined._Nil

:: Sapl.SaplTokenizer.Token = Sapl.SaplTokenizer.TIdentifier a1 | Sapl.SaplTokenizer.TStrictIdentifier a1 | Sapl.SaplTokenizer.TComment a1 | Sapl.SaplTokenizer.TInlineAnnotation | Sapl.SaplTokenizer.TAssignmentOp | Sapl.SaplTokenizer.TSelectAssignmentOp | Sapl.SaplTokenizer.TMacroAssignmentOp | Sapl.SaplTokenizer.TCAFAssignmentOp | Sapl.SaplTokenizer.TLambda | Sapl.SaplTokenizer.TColon | Sapl.SaplTokenizer.TVerticalBar | Sapl.SaplTokenizer.TOpenParenthesis | Sapl.SaplTokenizer.TCloseParenthesis | Sapl.SaplTokenizer.TOpenBracket | Sapl.SaplTokenizer.TCloseBracket | Sapl.SaplTokenizer.TTypeDef | Sapl.SaplTokenizer.TLit a1 | Sapl.SaplTokenizer.TSelectKeyword | Sapl.SaplTokenizer.TIfKeyword | Sapl.SaplTokenizer.TLetKeyword | Sapl.SaplTokenizer.TInKeyword | Sapl.SaplTokenizer.TEndOfLine
:: Sapl.SaplTokenizer.PosToken = Sapl.SaplTokenizer.PosToken a1 a2 a3
:: Sapl.SaplTokenizer.Literal = Sapl.SaplTokenizer.LString a1 | Sapl.SaplTokenizer.LChar a1 | Sapl.SaplTokenizer.LInt a1 | Sapl.SaplTokenizer.LReal a1 | Sapl.SaplTokenizer.LBool a1

|| Converted Records
