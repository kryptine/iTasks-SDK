|| ?module? Sapl.Target.JS.CodeGeneratorJS


Sapl.Target.JS.CodeGeneratorJS.urlEncodeChar_27 c1_0 c2_1 !_x_2 = select _x_2 ('_' -> _predefined._Cons '_' _predefined._Nil) ('.' -> _predefined._Cons '_' _predefined._Nil) (' ' -> _predefined._Cons '+' _predefined._Nil) ('$' -> _predefined._Cons '$' _predefined._Nil) (_ -> _predefined._Cons '$' (_predefined._Cons c1_0 (_predefined._Cons c2_1 _predefined._Nil)))
Sapl.Target.JS.CodeGeneratorJS.digitToHex_26 !d_0 = if (StdBool.not (<{StdInt.<_17}> 9 d_0)) (<{StdInt.+_6}> d_0 (StdInt.toInt_20 '0')) (<{StdInt.-_7}> (<{StdInt.+_6}> d_0 (StdInt.toInt_20 'A')) 10)
Sapl.Target.JS.CodeGeneratorJS.charToHex_28 !c_0 = let i_1_0 = StdInt.toInt_20 c_0 in <{_Tuple2!3}> (StdChar.toChar_21 (Sapl.Target.JS.CodeGeneratorJS.digitToHex_26 (<{StdInt.>>}> i_1_0 4))) (StdChar.toChar_21 (Sapl.Target.JS.CodeGeneratorJS.digitToHex_26 (StdInt.bitand i_1_0 15)))
<{Sapl.Target.JS.CodeGeneratorJS.urlEncode`_29}> !_x_0 = select _x_0 (_predefined._Nil -> _predefined._Nil) (_predefined._Cons _x_1_0 _x_1_1 -> select _x_1_0 ('$' -> select _x_1_1 (_predefined._Cons _x_3_0 _x_3_1 -> select _x_3_0 ('e' -> select _x_3_1 (_predefined._Cons _x_5_0 _x_5_1 -> select _x_5_0 ('v' -> select _x_5_1 (_predefined._Cons _x_7_0 _x_7_1 -> select _x_7_0 ('a' -> select _x_7_1 (_predefined._Cons _x_9_0 _x_9_1 -> select _x_9_0 ('l' -> select _x_9_1 (_predefined._Nil -> _x_0) ) ) ) ) ) ) ) ) ) (_ -> if (StdChar.isAlphanum _x_1_0) (_predefined._Cons _x_1_0 (<{Sapl.Target.JS.CodeGeneratorJS.urlEncode`_29}> _x_1_1)) (let _x_2_0 = Sapl.Target.JS.CodeGeneratorJS.charToHex_28 _x_1_0 in <{StdList.++}> (Sapl.Target.JS.CodeGeneratorJS.urlEncodeChar_27 (_predefined.tupsels2v0 _x_2_0) (_predefined.tupsels2v1 _x_2_0) _x_1_0) (<{Sapl.Target.JS.CodeGeneratorJS.urlEncode`_29}> _x_1_1)))) 
Sapl.Target.JS.CodeGeneratorJS.escapeName !prefix_0 !name_1 !a_2 = <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> a_2 prefix_0) (StdList.toString_79 (<{Sapl.Target.JS.CodeGeneratorJS.urlEncode`_29}> (StdList.fromString_78 name_1)))
Sapl.Target.JS.CodeGeneratorJS.foldl_99 op_0 r_1 !_x_2 = select _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> Sapl.Target.JS.CodeGeneratorJS.foldl_99 op_0 (op_0 r_1 a_1_0) x_1_1) 
Sapl.Target.JS.CodeGeneratorJS.newState !f_0 !tramp_1 !p_2 = Sapl.Target.JS.CodeGeneratorJS._CoderState Data.Maybe.Nothing Data.Maybe.Nothing _predefined._Nil False _predefined._Nil (Sapl.SaplParser.get_ps_constructors_1 p_2) (Sapl.SaplParser.get_ps_functions_2 p_2) (Sapl.SaplParser.get_ps_CAFs_3 p_2) (Sapl.Target.Flavour.get_builtInFunctions_6 f_0) (Sapl.Target.Flavour.get_inlineFunctions_7 f_0) tramp_1 (Sapl.Target.Flavour.get_fun_prefix_4 f_0)
Sapl.Target.JS.CodeGeneratorJS.foldl_98 op_0 r_1 !_x_2 = select _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> Sapl.Target.JS.CodeGeneratorJS.foldl_98 op_0 (op_0 r_1 a_1_0) x_1_1) 
Sapl.Target.JS.CodeGeneratorJS.foldl_95 op_0 r_1 !_x_2 = select _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> Sapl.Target.JS.CodeGeneratorJS.foldl_95 op_0 (op_0 r_1 a_1_0) x_1_1) 
Sapl.Target.JS.CodeGeneratorJS.anon_33 i_0 a_1 = <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> a_1 "a") (StdString.toString_5 (<{StdInt.-_7}> i_0 1))
Sapl.Target.JS.CodeGeneratorJS.condForce !_vAppendable_0 !_x_1 !e_2 !a_3 = if _x_1 (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.get_<++_0}> _vAppendable_0 (<{Text.StringAppender.<++_5}> a_3 "Sapl.feval(") e_2) ")") (<{Text.StringAppender.get_<++_0}> _vAppendable_0 a_3 e_2)
Sapl.Target.JS.CodeGeneratorJS.condForce_195 !_x_0 !e_1 !a_2 = if _x_0 (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_2 "Sapl.feval(") e_1) ")") (<{Text.StringAppender.<++_8}> a_2 e_1)
Sapl.Target.JS.CodeGeneratorJS.strictsep_34 !_vlength_0 args_1 !_x_2 arg_3 = select _x_2 (_Tuple2 a_1_0 i_1_1 -> if (<{StdInt.<_17}> i_1_1 (StdOverloaded.get_length_10 _vlength_0 args_1)) (_Tuple2 (<{Text.StringAppender.<++_5}> (Sapl.Target.JS.CodeGeneratorJS.condForce_195 (Sapl.SaplStruct.isStrictVar arg_3) (Sapl.Target.JS.CodeGeneratorJS.anon_33 i_1_1) a_1_0) ",") (<{StdInt.+_6}> i_1_1 1)) (_Tuple2 (Sapl.Target.JS.CodeGeneratorJS.condForce_195 (Sapl.SaplStruct.isStrictVar arg_3) (Sapl.Target.JS.CodeGeneratorJS.anon_33 i_1_1) a_1_0) i_1_1)) 
Sapl.Target.JS.CodeGeneratorJS.strictsep_196 !args_0 !_x_1 arg_2 = select _x_1 (_Tuple2 a_1_0 i_1_1 -> if (<{StdInt.<_17}> i_1_1 (StdList.length_47 args_0)) (_Tuple2 (<{Text.StringAppender.<++_5}> (Sapl.Target.JS.CodeGeneratorJS.condForce_195 (Sapl.SaplStruct.isStrictVar arg_2) (Sapl.Target.JS.CodeGeneratorJS.anon_33 i_1_1) a_1_0) ",") (<{StdInt.+_6}> i_1_1 1)) (_Tuple2 (Sapl.Target.JS.CodeGeneratorJS.condForce_195 (Sapl.SaplStruct.isStrictVar arg_2) (Sapl.Target.JS.CodeGeneratorJS.anon_33 i_1_1) a_1_0) i_1_1)) 
Sapl.Target.JS.CodeGeneratorJS.foldl_197 args_0 !r_1 !_x_2 = select _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> Sapl.Target.JS.CodeGeneratorJS.foldl_197 args_0 (Sapl.Target.JS.CodeGeneratorJS.strictsep_196 args_0 r_1 a_1_0) x_1_1) 
Sapl.Target.JS.CodeGeneratorJS.anon_32 !args_0 a_1 = _predefined.tupsels2v0 (Sapl.Target.JS.CodeGeneratorJS.foldl_197 args_0 (_Tuple2 a_1 1) args_0)
<{Sapl.Target.JS.CodeGeneratorJS.c;175;48_31}> !g_i_0 !g_s_1 = if (StdBool.not (<{StdInt.<_17}> g_s_1 g_i_0)) (_predefined._Cons (<{StdString.+++_11}> "a" (StdString.toString_5 (<{StdInt.-_7}> g_i_0 1))) (<{Sapl.Target.JS.CodeGeneratorJS.c;175;48_31}> (<{StdInt.+_6}> g_i_0 StdInt.one_11) g_s_1)) _predefined._Nil
Sapl.Target.JS.CodeGeneratorJS.makeStrictClosure name_0 args_1 s_2 a_3 = <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_3 "function ") (Sapl.Target.JS.CodeGeneratorJS.escapeName (Sapl.Target.JS.CodeGeneratorJS.get_cs_prefix_11 s_2) name_0)) "$eval(") (Text.StringAppender.joinList (<{StdOverloaded.toString;}> StdString.toString_9) "," (<{Sapl.Target.JS.CodeGeneratorJS.c;175;48_31}> 1 (StdList.length_47 args_1)))) "){return ") (Sapl.Target.JS.CodeGeneratorJS.escapeName (Sapl.Target.JS.CodeGeneratorJS.get_cs_prefix_11 s_2) name_0)) "(") (Sapl.Target.JS.CodeGeneratorJS.anon_32 args_1)) ");};"
Sapl.Target.JS.CodeGeneratorJS.termArrayCoder !_vTermCoder_0 !_x_1 !sep_2 !s_3 !a_4 = select _x_1 (_predefined._Cons t_1_0 _x_1_1 -> select _x_1_1 (_predefined._Nil -> Sapl.Target.JS.CodeGeneratorJS.get_termCoder_13 _vTermCoder_0 t_1_0 s_3 a_4) (_ -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_4 (Sapl.Target.JS.CodeGeneratorJS.get_termCoder_13 _vTermCoder_0 t_1_0 s_3)) sep_2) (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder _vTermCoder_0 _x_1_1 sep_2 s_3))) (_predefined._Nil -> a_4) 
Sapl.Target.JS.CodeGeneratorJS.anon_97 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Sapl.Target.JS.CodeGeneratorJS.snd_96 !tuple_0 = _predefined.tupsels2v1 tuple_0
Sapl.Target.JS.CodeGeneratorJS.anon_199 !var_0 !x_1 = Sapl.Target.JS.CodeGeneratorJS.isTailRecursive var_0 (Sapl.Target.JS.CodeGeneratorJS.snd_96 x_1)
Sapl.Target.JS.CodeGeneratorJS.isTailRecursive !var_0 !_x_1 = select _x_1 (Sapl.SaplStruct.SSelect _x_1_0 patterns_1_1 -> StdList.any (Sapl.Target.JS.CodeGeneratorJS.anon_199 var_0) patterns_1_1) (Sapl.SaplStruct.SIf pred_1_0 lhs_1_1 rhs_1_2 -> if (Sapl.Target.JS.CodeGeneratorJS.isTailRecursive var_0 lhs_1_1) True (Sapl.Target.JS.CodeGeneratorJS.isTailRecursive var_0 rhs_1_2)) (Sapl.SaplStruct.SApplication avar_1_0 _x_1_1 -> <{StdString.==_2}> (Sapl.SaplStruct.unpackVar var_0) (Sapl.SaplStruct.unpackVar avar_1_0)) (Sapl.SaplStruct.SLet body_1_0 _x_1_1 -> Sapl.Target.JS.CodeGeneratorJS.isTailRecursive var_0 body_1_0) (_ -> False)
Sapl.Target.JS.CodeGeneratorJS.anon_198 !var_0 !g_1 x_2 = Sapl.Target.JS.CodeGeneratorJS.isTailRecursive var_0 (g_1 x_2)
Sapl.Target.JS.CodeGeneratorJS.inline !_x_0 = select _x_0 (Sapl.SaplStruct.SLet _x_1_0 _x_1_1 -> False) (Sapl.SaplStruct.SSelect _x_1_0 _x_1_1 -> False) (Sapl.SaplStruct.SIf _x_1_0 _x_1_1 _x_1_2 -> False) (_ -> True)
Sapl.Target.JS.CodeGeneratorJS.argsCoder_37 !_vTermCoder_0 !_vAppendable_1 !_x_2 !_x_3 sep_4 s_5 a_6 = select _x_2 (_predefined._Cons _x_1_0 _x_1_1 -> select _x_1_0 (Sapl.SaplStruct.NormalVar _x_2_0 _x_2_1 -> select _x_1_1 (_predefined._Nil -> select _x_3 (_predefined._Cons t_4_0 _x_4_1 -> select _x_4_1 (_predefined._Nil -> Sapl.Target.JS.CodeGeneratorJS.get_termCoder_13 _vTermCoder_0 t_4_0 s_5 a_6) ) ) (_ -> select _x_3 (_predefined._Cons t_3_0 ts_3_1 -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.get_<++_0}> _vAppendable_1 (<{Text.StringAppender.<++_8}> a_6 (Sapl.Target.JS.CodeGeneratorJS.get_termCoder_13 _vTermCoder_0 t_3_0 s_5)) sep_4) (Sapl.Target.JS.CodeGeneratorJS.argsCoder_37 _vTermCoder_0 _vAppendable_1 _x_1_1 ts_3_1 sep_4 s_5)) )) (Sapl.SaplStruct.StrictVar _x_2_0 _x_2_1 -> select _x_1_1 (_predefined._Nil -> select _x_3 (_predefined._Cons t_4_0 _x_4_1 -> select _x_4_1 (_predefined._Nil -> Sapl.Target.JS.CodeGeneratorJS.get_forceTermCoder_12 _vTermCoder_0 t_4_0 s_5 a_6) ) ) (_ -> select _x_3 (_predefined._Cons t_3_0 ts_3_1 -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.get_<++_0}> _vAppendable_1 (<{Text.StringAppender.<++_8}> a_6 (Sapl.Target.JS.CodeGeneratorJS.get_forceTermCoder_12 _vTermCoder_0 t_3_0 s_5)) sep_4) (Sapl.Target.JS.CodeGeneratorJS.argsCoder_37 _vTermCoder_0 _vAppendable_1 _x_1_1 ts_3_1 sep_4 s_5)) )) ) (_predefined._Nil -> select _x_3 (_predefined._Nil -> a_6) ) 
Sapl.Target.JS.CodeGeneratorJS.anon_109 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Sapl.Target.JS.CodeGeneratorJS.fst_108 !tuple_0 = _predefined.tupsels2v0 tuple_0
Sapl.Target.JS.CodeGeneratorJS.foldl_107 op_0 r_1 !_x_2 = select _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> Sapl.Target.JS.CodeGeneratorJS.foldl_107 op_0 (op_0 r_1 a_1_0) x_1_1) 
Sapl.Target.JS.CodeGeneratorJS.anon_62 !x_0 !_x_1 !v_2 = select _x_1 (_Tuple2 idx_1_0 cnt_1_1 -> if (Sapl.SaplStruct.eqVarByName x_0 v_2) (_Tuple2 cnt_1_1 cnt_1_1) (_Tuple2 idx_1_0 (<{StdInt.+_6}> cnt_1_1 1))) 
Sapl.Target.JS.CodeGeneratorJS.snd_103 !tuple_0 = _predefined.tupsels2v1 tuple_0
Sapl.Target.JS.CodeGeneratorJS.get_cons_or_die !s_0 !cons_1 = Data.Maybe.maybe (StdMisc.abort (<{StdString.+++_11}> "Data constructor " (<{StdString.+++_11}> cons_1 " cannot be found!"))) StdFunc.id (Data.Map.get (<{StdOverloaded.<;}> <{StdString.<_3}>) cons_1 (Sapl.Target.JS.CodeGeneratorJS.get_cs_constructors_5 s_0))
Sapl.Target.JS.CodeGeneratorJS.anon_102 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Sapl.Target.JS.CodeGeneratorJS.fst_101 !tuple_0 = _predefined.tupsels2v0 tuple_0
Sapl.Target.JS.CodeGeneratorJS.anon_200 !g_0 x_1 = Sapl.SaplStruct.isDefaultPattern (g_0 x_1)
Sapl.Target.JS.CodeGeneratorJS.anon_201 !x_0 = Sapl.SaplStruct.isDefaultPattern (Sapl.Target.JS.CodeGeneratorJS.fst_101 x_0)
Sapl.Target.JS.CodeGeneratorJS.splitDefaultPattern !patterns_0 = <{Sapl.Target.JS.CodeGeneratorJS._c;300;7_241}> (Data.List.partition Sapl.Target.JS.CodeGeneratorJS.anon_201 patterns_0)
<{Sapl.Target.JS.CodeGeneratorJS._c;300;7_241}> !_x_0 = select _x_0 (_Tuple2 _x_1_0 ps_1_1 -> select _x_1_0 (_predefined._Nil -> <{_Tuple2!3}> ps_1_1 Data.Maybe.Nothing) (_predefined._Cons _x_2_0 _x_2_1 -> select _x_2_0 (_Tuple2 _x_3_0 d_3_1 -> select _x_2_1 (_predefined._Nil -> <{_Tuple2!3}> ps_1_1 (Data.Maybe.Just d_3_1)) ) ) ) (_ -> StdMisc.abort "Error: more than one default branches in a select expression")
Sapl.Target.JS.CodeGeneratorJS.isUnsafeSelect !s_0 !patterns_1 = let _x_1_0 = Sapl.Target.JS.CodeGeneratorJS.splitDefaultPattern patterns_1, ps_1_1 = _predefined.tupsels2v0 _x_1_0, d_1_2 = _predefined.tupsels2v1 _x_1_0 in <{Sapl.Target.JS.CodeGeneratorJS._c;314;7_242}> ps_1_1 d_1_2 s_0
<{Sapl.Target.JS.CodeGeneratorJS._c;314;7_242}> !ps_0 d_1 s_2 = select ps_0 (_predefined._Cons _x_1_0 _x_1_1 -> select _x_1_0 (_Tuple2 _x_2_0 _x_2_1 -> select _x_2_0 (Sapl.SaplStruct.PCons name_3_0 _x_3_1 -> if (Data.Maybe.isNothing d_1) (StdBool.not (<{StdInt.==_16}> (Sapl.SaplParser.get_nr_cons_6 (Sapl.Target.JS.CodeGeneratorJS.get_cons_or_die s_2 name_3_0)) (StdList.length_47 ps_0))) False) (Sapl.SaplStruct.PLit _x_3_0 -> select _x_3_0 (Sapl.SaplTokenizer.LBool _x_4_0 -> select _x_4_0 (True -> select _x_1_1 (_predefined._Cons _x_6_0 _x_6_1 -> select _x_6_0 (_Tuple2 _x_7_0 _x_7_1 -> select _x_7_0 (Sapl.SaplStruct.PLit _x_8_0 -> select _x_8_0 (Sapl.SaplTokenizer.LBool _x_9_0 -> select _x_9_0 (False -> False) ) ) ) ) ) (False -> select _x_1_1 (_predefined._Cons _x_6_0 _x_6_1 -> select _x_6_0 (_Tuple2 _x_7_0 _x_7_1 -> select _x_7_0 (Sapl.SaplStruct.PLit _x_8_0 -> select _x_8_0 (Sapl.SaplTokenizer.LBool _x_9_0 -> select _x_9_0 (True -> False) ) ) ) ) ) ) ) ) ) (_ -> Data.Maybe.isNothing d_1)
Sapl.Target.JS.CodeGeneratorJS.containsUnsafeSelect !s_0 !_x_1 = select _x_1 (Sapl.SaplStruct.SApplication _x_1_0 ts_1_1 -> StdList.any (Sapl.Target.JS.CodeGeneratorJS.containsUnsafeSelect s_0) ts_1_1) (Sapl.SaplStruct.SIf _x_1_0 tb_1_1 fb_1_2 -> if (Sapl.Target.JS.CodeGeneratorJS.containsUnsafeSelect s_0 tb_1_1) True (Sapl.Target.JS.CodeGeneratorJS.containsUnsafeSelect s_0 fb_1_2)) (Sapl.SaplStruct.SSelect _x_1_0 ps_1_1 -> if (Sapl.Target.JS.CodeGeneratorJS.isUnsafeSelect s_0 ps_1_1) True (StdList.any (Sapl.Target.JS.CodeGeneratorJS.containsUnsafeSelect s_0) (StdList.map Sapl.Target.JS.CodeGeneratorJS.snd_103 ps_1_1))) (Sapl.SaplStruct.SLet b_1_0 _x_1_1 -> Sapl.Target.JS.CodeGeneratorJS.containsUnsafeSelect s_0 b_1_0) (_ -> False)
Sapl.Target.JS.CodeGeneratorJS.anon_63 !_x_0 = select _x_0 (_Tuple2 p_1_0 b_1_1 -> _Tuple3 p_1_0 b_1_1 False) 
Sapl.Target.JS.CodeGeneratorJS.ups_66 !ps_0 = StdList.map Sapl.Target.JS.CodeGeneratorJS.anon_63 ps_0
Sapl.Target.JS.CodeGeneratorJS.addSwitch_65 !_vAppendable_0 e_1 a_2 = <{Text.StringAppender.<++_5}> (<{Text.StringAppender.get_<++_0}> _vAppendable_0 (<{Text.StringAppender.<++_5}> a_2 "switch(ys[0]){") e_1) "};"
Sapl.Target.JS.CodeGeneratorJS.isSingleton_64 !s_0 !cons_1 = <{StdInt.==_16}> (Sapl.SaplParser.get_nr_cons_6 (Sapl.Target.JS.CodeGeneratorJS.get_cons_or_die s_0 cons_1)) 1
Sapl.Target.JS.CodeGeneratorJS.cp_68 p_0 d_1 b_2 = _Tuple3 p_0 d_1 b_2
Sapl.Target.JS.CodeGeneratorJS.defp_67 d_0 b_1 = _Tuple3 Sapl.SaplStruct.PDefault d_0 b_1
Sapl.Target.JS.CodeGeneratorJS.annotate_41 !_x_0 = select _x_0 (_Tuple2 _x_1_0 arg_1_1 -> select _x_1_0 (Sapl.SaplStruct.StrictVar _x_2_0 _x_2_1 -> Sapl.SaplStruct.toStrictVar arg_1_1) (_ -> arg_1_1)) 
Sapl.Target.JS.CodeGeneratorJS.pushArgs !s_0 !_x_1 = select _x_1 (_predefined._Cons t_1_0 ts_1_1 -> Sapl.Target.JS.CodeGeneratorJS.pushArgs (Sapl.Target.JS.CodeGeneratorJS.set_cs_current_vars_4 s_0 (_predefined._Cons t_1_0 (Sapl.Target.JS.CodeGeneratorJS.get_cs_current_vars_4 s_0))) ts_1_1) (_predefined._Nil -> s_0) 
Sapl.Target.JS.CodeGeneratorJS.instargs_40 !_vTermCoder_0 !_x_1 i_2 s_3 a_4 = select _x_1 (_predefined._Cons t_1_0 _x_1_1 -> select _x_1_1 (_predefined._Nil -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_6}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_4 (Sapl.Target.JS.CodeGeneratorJS.get_termCoder_13 _vTermCoder_0 t_1_0 s_3)) "=ys[") (<{StdInt.+_6}> i_2 2)) "];") (_ -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_6}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_4 (Sapl.Target.JS.CodeGeneratorJS.get_termCoder_13 _vTermCoder_0 t_1_0 s_3)) "=ys[") (<{StdInt.+_6}> i_2 2)) "],") (Sapl.Target.JS.CodeGeneratorJS.instargs_40 _vTermCoder_0 _x_1_1 (<{StdInt.+_6}> i_2 1) s_3))) (_predefined._Nil -> a_4) 
Sapl.Target.JS.CodeGeneratorJS.termCoder_79 !_x_0 !s_1 !a_2 = select _x_0 (Sapl.SaplTokenizer.LString ustr_1_0 -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> a_2 "\"") (Text.Unicode.Encodings.JS.toJSLiteral ustr_1_0)) "\"") (Sapl.SaplTokenizer.LChar uchr_1_0 -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> a_2 "'") (Text.Unicode.Encodings.JS.toJSLiteral uchr_1_0)) "'") (Sapl.SaplTokenizer.LInt int_1_0 -> <{Text.StringAppender.<++_6}> a_2 int_1_0) (Sapl.SaplTokenizer.LReal real_1_0 -> <{Text.StringAppender.<++_7}> a_2 real_1_0) (Sapl.SaplTokenizer.LBool _x_1_0 -> if _x_1_0 (<{Text.StringAppender.<++_5}> a_2 "true") (<{Text.StringAppender.<++_5}> a_2 "false")) 
Sapl.Target.JS.CodeGeneratorJS.force !_vAppendable_0 !e_1 !a_2 = Sapl.Target.JS.CodeGeneratorJS.condForce _vAppendable_0 True e_1 a_2
Sapl.Target.JS.CodeGeneratorJS.anon_42 s_0 name_1 a_2 = <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_2 (Sapl.Target.JS.CodeGeneratorJS.escapeName (Sapl.Target.JS.CodeGeneratorJS.get_cs_prefix_11 s_0) name_1)) "()"
Sapl.Target.JS.CodeGeneratorJS.anon_106 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Sapl.Target.JS.CodeGeneratorJS.fst_105 !tuple_0 = _predefined.tupsels2v0 tuple_0
Sapl.Target.JS.CodeGeneratorJS.anon_44 !_vTermCoder_0 s_1 t_2 a_3 = Sapl.Target.JS.CodeGeneratorJS.get_forceTermCoder_12 _vTermCoder_0 t_2 s_1 a_3
Sapl.Target.JS.CodeGeneratorJS.anon_43 !_vTermCoder_0 s_1 t_2 a_3 = Sapl.Target.JS.CodeGeneratorJS.get_termCoder_13 _vTermCoder_0 t_2 s_1 a_3
Sapl.Target.JS.CodeGeneratorJS.findLocalVar_46 name_0 !_x_1 = select _x_1 (_predefined._Cons _x_1_0 cs_1_1 -> select _x_1_0 (Sapl.SaplStruct.NormalVar cn_2_0 level_2_1 -> if (<{StdString.==_2}> cn_2_0 name_0) level_2_1 (Sapl.Target.JS.CodeGeneratorJS.findLocalVar_46 name_0 cs_1_1)) (Sapl.SaplStruct.StrictVar cn_2_0 level_2_1 -> if (<{StdString.==_2}> cn_2_0 name_0) level_2_1 (Sapl.Target.JS.CodeGeneratorJS.findLocalVar_46 name_0 cs_1_1)) ) (_predefined._Nil -> 0) 
Sapl.Target.JS.CodeGeneratorJS.var_name_47 name_0 !s_1 a_2 = let decl_level_1_0 = Sapl.Target.JS.CodeGeneratorJS.findLocalVar_46 name_0 (Sapl.Target.JS.CodeGeneratorJS.get_cs_current_vars_4 s_1) in <{Sapl.Target.JS.CodeGeneratorJS._c;438;22_243}> decl_level_1_0 a_2 s_1 name_0
<{Sapl.Target.JS.CodeGeneratorJS._c;438;22_243}> !decl_level_0 a_1 s_2 name_3 = select decl_level_0 (0 -> <{Text.StringAppender.<++_8}> a_1 (Sapl.Target.JS.CodeGeneratorJS.escapeName (Sapl.Target.JS.CodeGeneratorJS.get_cs_prefix_11 s_2) name_3)) (_ -> <{Text.StringAppender.<++_6}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_1 (Sapl.Target.JS.CodeGeneratorJS.escapeName (Sapl.Target.JS.CodeGeneratorJS.get_cs_prefix_11 s_2) name_3)) "_") decl_level_0)
Sapl.Target.JS.CodeGeneratorJS.anon_45 !_x_0 = select _x_0 (Sapl.SaplParser._ConstructorDef index_1_0 nr_cons_1_1 nr_args_1_2 args_1_3 -> StdList.any Sapl.SaplStruct.isStrictVar args_1_3) 
Sapl.Target.JS.CodeGeneratorJS.anon_61 !_vTermCoder_0 s_1 t_2 a_3 = Sapl.Target.JS.CodeGeneratorJS.get_forceTermCoder_12 _vTermCoder_0 t_2 (Sapl.Target.JS.CodeGeneratorJS.set_cs_intrfunc_1 s_1 Data.Maybe.Nothing) a_3
Sapl.Target.JS.CodeGeneratorJS.anon_60 !_vTermCoder_0 s_1 t_2 a_3 = Sapl.Target.JS.CodeGeneratorJS.get_termCoder_13 _vTermCoder_0 t_2 (Sapl.Target.JS.CodeGeneratorJS.set_cs_intrfunc_1 s_1 Data.Maybe.Nothing) a_3
Sapl.Target.JS.CodeGeneratorJS.anon_71 !_x_0 = select _x_0 (_Tuple2 p_1_0 b_1_1 -> _Tuple3 p_1_0 b_1_1 False) 
Sapl.Target.JS.CodeGeneratorJS.anon_73 !_vTermCoder_0 s_1 t_2 a_3 = Sapl.Target.JS.CodeGeneratorJS.get_forceTermCoder_12 _vTermCoder_0 t_2 (Sapl.Target.JS.CodeGeneratorJS.set_cs_intrfunc_1 s_1 Data.Maybe.Nothing) a_3
Sapl.Target.JS.CodeGeneratorJS.anon_72 !_vTermCoder_0 s_1 t_2 a_3 = Sapl.Target.JS.CodeGeneratorJS.get_termCoder_13 _vTermCoder_0 t_2 (Sapl.Target.JS.CodeGeneratorJS.set_cs_intrfunc_1 s_1 Data.Maybe.Nothing) a_3
Sapl.Target.JS.CodeGeneratorJS.anon_104 !f_0 g_1 x_2 = f_0 (g_1 x_2)
Sapl.Target.JS.CodeGeneratorJS.maa__35 !_vTermCoder_0 !_x_1 !_x_2 i_3 s_4 a_5 = select _x_1 (_predefined._Cons _x_1_0 fargs_1_1 -> select _x_1_0 (Sapl.SaplStruct.StrictVar _x_2_0 _x_2_1 -> select _x_2 (_predefined._Cons aa_3_0 aargs_3_1 -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_8}> (<{Sapl.Target.JS.CodeGeneratorJS._if;194;15_244}> (<{StdInt.<_17}> 0 i_3) a_5) (Sapl.Target.JS.CodeGeneratorJS.get_forceTermCoder_12 _vTermCoder_0 aa_3_0 s_4)) (Sapl.Target.JS.CodeGeneratorJS.maa__35 _vTermCoder_0 fargs_1_1 aargs_3_1 (<{StdInt.+_6}> i_3 1) s_4)) ) (_ -> select _x_2 (_predefined._Cons aa_2_0 aargs_2_1 -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_8}> (<{Sapl.Target.JS.CodeGeneratorJS._if;197;15_245}> (<{StdInt.<_17}> 0 i_3) a_5) (Sapl.Target.JS.CodeGeneratorJS.get_termCoder_13 _vTermCoder_0 aa_2_0 s_4)) (Sapl.Target.JS.CodeGeneratorJS.maa__35 _vTermCoder_0 fargs_1_1 aargs_2_1 (<{StdInt.+_6}> i_3 1) s_4)) )) (_predefined._Nil -> select _x_2 (_predefined._Cons aa_2_0 aargs_2_1 -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_8}> (<{Sapl.Target.JS.CodeGeneratorJS._if;200;15_246}> (<{StdInt.<_17}> 0 i_3) a_5) (Sapl.Target.JS.CodeGeneratorJS.get_termCoder_13 _vTermCoder_0 aa_2_0 s_4)) (Sapl.Target.JS.CodeGeneratorJS.maa__35 _vTermCoder_0 _predefined._Nil aargs_2_1 (<{StdInt.+_6}> i_3 1) s_4)) ) (_ -> select _x_2 (_predefined._Nil -> a_5) )
<{Sapl.Target.JS.CodeGeneratorJS._if;200;15_246}> !_x_0 a_1 = select _x_0 (True -> <{Text.StringAppender.<++_5}> a_1 ",") (_ -> a_1)
<{Sapl.Target.JS.CodeGeneratorJS._if;197;15_245}> !_x_0 a_1 = select _x_0 (True -> <{Text.StringAppender.<++_5}> a_1 ",") (_ -> a_1)
<{Sapl.Target.JS.CodeGeneratorJS._if;194;15_244}> !_x_0 a_1 = select _x_0 (True -> <{Text.StringAppender.<++_5}> a_1 ",") (_ -> a_1)
Sapl.Target.JS.CodeGeneratorJS.func_name_58 s_0 name_1 a_2 = <{Text.StringAppender.<++_8}> a_2 (Sapl.Target.JS.CodeGeneratorJS.escapeName (Sapl.Target.JS.CodeGeneratorJS.get_cs_prefix_11 s_0) (Sapl.SaplStruct.unpackVar name_1))
Sapl.Target.JS.CodeGeneratorJS.mta_2_57 !_x_0 i_1 s_2 a_3 = select _x_0 (_predefined._Cons fa_1_0 fargs_1_1 -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_6}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_3 (Sapl.Target.JS.CodeGeneratorJS.escapeName (Sapl.Target.JS.CodeGeneratorJS.get_cs_prefix_11 s_2) (Sapl.SaplStruct.unpackVar fa_1_0))) "=t") i_1) ";") (Sapl.Target.JS.CodeGeneratorJS.mta_2_57 fargs_1_1 (<{StdInt.+_6}> i_1 1) s_2)) (_predefined._Nil -> a_3) 
Sapl.Target.JS.CodeGeneratorJS.mta_1_56 !_vTermCoder_0 !_x_1 _x_2 i_3 s_4 a_5 = select _x_1 (_predefined._Cons _x_1_0 fargs_1_1 -> select _x_1_0 (Sapl.SaplStruct.StrictVar _x_2_0 _x_2_1 -> select _x_2 (_predefined._Cons aa_3_0 aargs_3_1 -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_6}> (<{Text.StringAppender.<++_5}> (<{Sapl.Target.JS.CodeGeneratorJS._if;546;23_247}> (<{StdInt.<_17}> 0 i_3) a_5) "t") i_3) "=") (Sapl.Target.JS.CodeGeneratorJS.get_forceTermCoder_12 _vTermCoder_0 aa_3_0 s_4)) (Sapl.Target.JS.CodeGeneratorJS.mta_1_56 _vTermCoder_0 fargs_1_1 aargs_3_1 (<{StdInt.+_6}> i_3 1) s_4)) ) (_ -> select _x_2 (_predefined._Cons aa_2_0 aargs_2_1 -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_6}> (<{Text.StringAppender.<++_5}> (<{Sapl.Target.JS.CodeGeneratorJS._if;549;23_248}> (<{StdInt.<_17}> 0 i_3) a_5) "t") i_3) "=") (Sapl.Target.JS.CodeGeneratorJS.get_termCoder_13 _vTermCoder_0 aa_2_0 s_4)) (Sapl.Target.JS.CodeGeneratorJS.mta_1_56 _vTermCoder_0 fargs_1_1 aargs_2_1 (<{StdInt.+_6}> i_3 1) s_4)) )) (_predefined._Nil -> a_5) 
<{Sapl.Target.JS.CodeGeneratorJS._if;549;23_248}> !_x_0 a_1 = select _x_0 (True -> <{Text.StringAppender.<++_5}> a_1 ",") (_ -> a_1)
<{Sapl.Target.JS.CodeGeneratorJS._if;546;23_247}> !_x_0 a_1 = select _x_0 (True -> <{Text.StringAppender.<++_5}> a_1 ",") (_ -> a_1)
Sapl.Target.JS.CodeGeneratorJS.make_tr_app_59 !_vTermCoder_0 tr_function_args_1 args_2 s_3 a_4 = <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_4 "var ") (Sapl.Target.JS.CodeGeneratorJS.mta_1_56 _vTermCoder_0 tr_function_args_1 args_2 0 s_3)) ";") (Sapl.Target.JS.CodeGeneratorJS.mta_2_57 tr_function_args_1 0 s_3)) "continue;"
Sapl.Target.JS.CodeGeneratorJS.forceApp !_vAppendable_0 e_1 a_2 = <{Text.StringAppender.<++_5}> (<{Text.StringAppender.get_<++_0}> _vAppendable_0 (<{Text.StringAppender.<++_5}> a_2 "Sapl.fapp(") e_1) ")"
Sapl.Target.JS.CodeGeneratorJS.anon_51 !_vTermCoder_0 s_1 t_2 a_3 = Sapl.Target.JS.CodeGeneratorJS.get_forceTermCoder_12 _vTermCoder_0 t_2 (Sapl.Target.JS.CodeGeneratorJS.set_cs_intrfunc_1 s_1 Data.Maybe.Nothing) a_3
Sapl.Target.JS.CodeGeneratorJS.anon_50 !_vTermCoder_0 s_1 t_2 a_3 = Sapl.Target.JS.CodeGeneratorJS.get_termCoder_13 _vTermCoder_0 t_2 (Sapl.Target.JS.CodeGeneratorJS.set_cs_intrfunc_1 s_1 Data.Maybe.Nothing) a_3
Sapl.Target.JS.CodeGeneratorJS.anon_53 !_vTermCoder_0 s_1 t_2 a_3 = Sapl.Target.JS.CodeGeneratorJS.get_forceTermCoder_12 _vTermCoder_0 t_2 (Sapl.Target.JS.CodeGeneratorJS.set_cs_intrfunc_1 s_1 Data.Maybe.Nothing) a_3
Sapl.Target.JS.CodeGeneratorJS.anon_52 !_vTermCoder_0 s_1 t_2 a_3 = Sapl.Target.JS.CodeGeneratorJS.get_termCoder_13 _vTermCoder_0 t_2 (Sapl.Target.JS.CodeGeneratorJS.set_cs_intrfunc_1 s_1 Data.Maybe.Nothing) a_3
Sapl.Target.JS.CodeGeneratorJS.anon_55 !_vTermCoder_0 !_vTermCoder_1 name_2 args_3 s_4 a_5 = <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_5 (Sapl.Target.JS.CodeGeneratorJS.get_termCoder_13 _vTermCoder_0 name_2 s_4)) ",[") (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder _vTermCoder_1 args_3 "," s_4)) "]"
Sapl.Target.JS.CodeGeneratorJS.forceApp_204 e_0 a_1 = <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_1 "Sapl.fapp(") e_0) ")"
Sapl.Target.JS.CodeGeneratorJS.force_217 !e_0 !a_1 = Sapl.Target.JS.CodeGeneratorJS.condForce_195 True e_0 a_1
Sapl.Target.JS.CodeGeneratorJS.anon_220 prefix_0 g_1 x_2 = Sapl.Target.JS.CodeGeneratorJS.escapeName prefix_0 (g_1 x_2)
Sapl.Target.JS.CodeGeneratorJS.anon_223 !g_0 x_1 = Sapl.SaplStruct.toNormalVar (g_0 x_1)
Sapl.Target.JS.CodeGeneratorJS.addSwitch_215 e_0 a_1 = <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_1 "switch(ys[0]){") e_0) "};"
Sapl.Target.JS.CodeGeneratorJS.anon_210 !g_0 x_1 = Sapl.SaplStruct.isConsPattern (g_0 x_1)
Sapl.Target.JS.CodeGeneratorJS.foldl_209 x_0 !r_1 !_x_2 = select _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> Sapl.Target.JS.CodeGeneratorJS.foldl_209 x_0 (Sapl.Target.JS.CodeGeneratorJS.anon_62 x_0 r_1 a_1_0) x_1_1) 
Sapl.Target.JS.CodeGeneratorJS.anon_231 prefix_0 x_1 = Sapl.Target.JS.CodeGeneratorJS.escapeName prefix_0 (Sapl.Target.JS.CodeGeneratorJS.fst_105 x_1)
Sapl.Target.JS.CodeGeneratorJS.anon_228 !x_0 = Sapl.SaplStruct.toNormalVar (Sapl.SaplStruct.unpackBindVar x_0)
Sapl.Target.JS.CodeGeneratorJS.anon_227 !x_0 = Sapl.SaplStruct.isConsPattern (Sapl.Target.JS.CodeGeneratorJS.fst_108 x_0)
Sapl.Target.JS.CodeGeneratorJS.trampolineCoder_86 !t_0 !s_1 !a_2 = select t_0 (Sapl.SaplStruct.NormalVar name_1_0 _x_1_1 -> let mbConstructor_2_0 = Data.Map.get (<{StdOverloaded.<;}> <{StdString.<_3}>) name_1_0 (Sapl.Target.JS.CodeGeneratorJS.get_cs_constructors_5 s_1), constructor_2_1 = Data.Maybe.fromJust mbConstructor_2_0 in if (Sapl.Target.JS.CodeGeneratorJS.trampolineCoder_86_select0 mbConstructor_2_0 constructor_2_1 name_1_0 _x_1_1 t_0 s_1 a_2) (Sapl.Target.JS.CodeGeneratorJS.constructorInliner t_0 constructor_2_1 _predefined._Nil s_1 a_2) (<{Text.StringAppender.<++_8}> a_2 (Sapl.Target.JS.CodeGeneratorJS.termCoder_85 t_0 s_1))) (Sapl.SaplStruct.StrictVar name_1_0 level_1_1 -> Sapl.Target.JS.CodeGeneratorJS.trampolineCoder_86 (Sapl.SaplStruct.NormalVar name_1_0 level_1_1) s_1 a_2) 
Sapl.Target.JS.CodeGeneratorJS.trampolineCoder_86_select0 mbConstructor_2_0 constructor_2_1 name_1_0 _x_1_1 !t_0 !s_1 !a_2 = if (Data.Maybe.isJust mbConstructor_2_0) (<{StdInt.==_16}> (Sapl.SaplParser.get_nr_args_7 constructor_2_1) 0) False
Sapl.Target.JS.CodeGeneratorJS.anon_221 !s_0 !t_1 !a_2 = Sapl.Target.JS.CodeGeneratorJS.termCoder_91 t_1 (Sapl.Target.JS.CodeGeneratorJS.set_cs_intrfunc_1 s_0 Data.Maybe.Nothing) a_2
Sapl.Target.JS.CodeGeneratorJS.anon_222 !s_0 !t_1 !a_2 = Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_90 t_1 (Sapl.Target.JS.CodeGeneratorJS.set_cs_intrfunc_1 s_0 Data.Maybe.Nothing) a_2
Sapl.Target.JS.CodeGeneratorJS.trampolineCoder_92 !t_0 !s_1 !a_2 = select t_0 (Sapl.SaplStruct.SVar var_1_0 -> Sapl.Target.JS.CodeGeneratorJS.trampolineCoder_86 var_1_0 s_1 a_2) (Sapl.SaplStruct.SApplication name_1_0 args_1_1 -> let mbConstructor_2_0 = Data.Map.get (<{StdOverloaded.<;}> <{StdString.<_3}>) (Sapl.SaplStruct.unpackVar name_1_0) (Sapl.Target.JS.CodeGeneratorJS.get_cs_constructors_5 s_1), constructor_2_1 = Data.Maybe.fromJust mbConstructor_2_0 in if (Sapl.Target.JS.CodeGeneratorJS.trampolineCoder_92_select0 mbConstructor_2_0 constructor_2_1 name_1_0 args_1_1 t_0 s_1 a_2) (Sapl.Target.JS.CodeGeneratorJS.constructorInliner name_1_0 constructor_2_1 args_1_1 s_1 a_2) (let mb_3_0 = Data.Map.get (<{StdOverloaded.<;}> <{StdString.<_3}>) (Sapl.SaplStruct.unpackVar name_1_0) (Sapl.Target.JS.CodeGeneratorJS.get_cs_inlinefuncs_9 s_1), inlineFun_3_1 = Data.Maybe.fromJust mb_3_0 in if (Sapl.Target.JS.CodeGeneratorJS.trampolineCoder_92_select1 mb_3_0 inlineFun_3_1 mbConstructor_2_0 constructor_2_1 name_1_0 args_1_1 t_0 s_1 a_2) (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_2 "(") (Sapl.Target.Flavour.get_fun_0 inlineFun_3_1 (Sapl.Target.JS.CodeGeneratorJS.anon_221 s_1) (Sapl.Target.JS.CodeGeneratorJS.anon_222 s_1) args_1_1)) ")") (<{Text.StringAppender.<++_8}> a_2 (Sapl.Target.JS.CodeGeneratorJS.termCoder_91 t_0 s_1)))) (_ -> Sapl.Target.JS.CodeGeneratorJS.termCoder_91 t_0 s_1 a_2)
Sapl.Target.JS.CodeGeneratorJS.trampolineCoder_92_select0 mbConstructor_2_0 constructor_2_1 name_1_0 args_1_1 !t_0 !s_1 !a_2 = if (Data.Maybe.isJust mbConstructor_2_0) (<{StdInt.==_16}> (Sapl.SaplParser.get_nr_args_7 constructor_2_1) (StdList.length_47 args_1_1)) False
Sapl.Target.JS.CodeGeneratorJS.trampolineCoder_92_select1 mb_3_0 inlineFun_3_1 mbConstructor_2_0 constructor_2_1 name_1_0 args_1_1 !t_0 !s_1 !a_2 = if (Data.Maybe.isJust mb_3_0) (<{StdInt.==_16}> (Sapl.Target.Flavour.get_arity_1 inlineFun_3_1) (StdList.length_47 args_1_1)) False
Sapl.Target.JS.CodeGeneratorJS.safe_70 s_0 patterns_1 ps_2 !d_3 a_4 = <{Sapl.Target.JS.CodeGeneratorJS._c;620;15_265}> d_3 patterns_1 s_0 a_4 ps_2
Sapl.Target.JS.CodeGeneratorJS.instargs_216 !_x_0 i_1 s_2 a_3 = select _x_0 (_predefined._Cons t_1_0 _x_1_1 -> select _x_1_1 (_predefined._Nil -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_6}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_3 (Sapl.Target.JS.CodeGeneratorJS.termCoder_85 t_1_0 s_2)) "=ys[") (<{StdInt.+_6}> i_1 2)) "];") (_ -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_6}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_3 (Sapl.Target.JS.CodeGeneratorJS.termCoder_85 t_1_0 s_2)) "=ys[") (<{StdInt.+_6}> i_1 2)) "],") (Sapl.Target.JS.CodeGeneratorJS.instargs_216 _x_1_1 (<{StdInt.+_6}> i_1 1) s_2))) (_predefined._Nil -> a_3) 
Sapl.Target.JS.CodeGeneratorJS.termCoder_82 !_x_0 !s_1 !a_2 = select _x_0 (_Tuple3 _x_1_0 body_1_1 _x_1_2 -> select _x_1_0 (Sapl.SaplStruct.PDefault -> Sapl.Target.JS.CodeGeneratorJS.callWrapper body_1_1 s_1 a_2) (Sapl.SaplStruct.PLit lit_2_0 -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_2 "case ") (Sapl.Target.JS.CodeGeneratorJS.termCoder_79 lit_2_0 s_1)) ": ") (Sapl.Target.JS.CodeGeneratorJS.callWrapper body_1_1 s_1)) (Sapl.SaplStruct.PCons cons_2_0 _x_2_1 -> select _x_2_1 (_predefined._Nil -> if _x_1_2 (Sapl.Target.JS.CodeGeneratorJS.callWrapper body_1_1 s_1 a_2) (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> a_2 "case ") (StdString.toString_5 (Sapl.SaplParser.get_index_5 (Sapl.Target.JS.CodeGeneratorJS.get_cons_or_die s_1 cons_2_0)))) ": ") (Sapl.Target.JS.CodeGeneratorJS.callWrapper body_1_1 s_1))) (_ -> let get_cons_3_0 = Sapl.Target.JS.CodeGeneratorJS.get_cons_or_die s_1 cons_2_0, s_3_1 = Sapl.Target.JS.CodeGeneratorJS.pushArgs s_1 (StdList.map Sapl.Target.JS.CodeGeneratorJS.annotate_41 (StdList.zip2 (Sapl.SaplParser.get_args_8 get_cons_3_0) _x_2_1)) in <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Sapl.Target.JS.CodeGeneratorJS._c;342;15_262}> _x_1_2 a_2 get_cons_3_0) "var ") (Sapl.Target.JS.CodeGeneratorJS.instargs_216 _x_2_1 0 s_3_1)) (Sapl.Target.JS.CodeGeneratorJS.callWrapper body_1_1 s_3_1))) ) 
Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_211 !_x_0 !sep_1 !s_2 !a_3 = select _x_0 (_predefined._Cons t_1_0 _x_1_1 -> select _x_1_1 (_predefined._Nil -> Sapl.Target.JS.CodeGeneratorJS.termCoder_82 t_1_0 s_2 a_3) (_ -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_3 (Sapl.Target.JS.CodeGeneratorJS.termCoder_82 t_1_0 s_2)) sep_1) (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_211 _x_1_1 sep_1 s_2))) (_predefined._Nil -> a_3) 
Sapl.Target.JS.CodeGeneratorJS.unsafe_69 s_0 ps_1 !d_2 a_3 = <{Sapl.Target.JS.CodeGeneratorJS._c;610;15_261}> d_2 ps_1 s_0 a_3
Sapl.Target.JS.CodeGeneratorJS.anon_212 !s_0 !t_1 !a_2 = Sapl.Target.JS.CodeGeneratorJS.termCoder_91 t_1 (Sapl.Target.JS.CodeGeneratorJS.set_cs_intrfunc_1 s_0 Data.Maybe.Nothing) a_2
Sapl.Target.JS.CodeGeneratorJS.anon_213 !s_0 !t_1 !a_2 = Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_90 t_1 (Sapl.Target.JS.CodeGeneratorJS.set_cs_intrfunc_1 s_0 Data.Maybe.Nothing) a_2
Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_84 !t_0 !s_1 !a_2 = select t_0 (Sapl.SaplStruct.NormalVar name_1_0 level_1_1 -> if (StdList.any (Sapl.SaplStruct.eqStrictVar name_1_0) (Sapl.Target.JS.CodeGeneratorJS.get_cs_current_vars_4 s_1)) (<{Text.StringAppender.<++_8}> a_2 (Sapl.Target.JS.CodeGeneratorJS.termCoder_85 t_0 s_1)) (let mbConstructor_2_0 = Data.Map.get (<{StdOverloaded.<;}> <{StdString.<_3}>) name_1_0 (Sapl.Target.JS.CodeGeneratorJS.get_cs_constructors_5 s_1), constructor_2_1 = Data.Maybe.fromJust mbConstructor_2_0 in if (Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_84_select0 mbConstructor_2_0 constructor_2_1 name_1_0 level_1_1 t_0 s_1 a_2) (Sapl.Target.JS.CodeGeneratorJS.constructorInliner t_0 constructor_2_1 _predefined._Nil s_1 a_2) (if (Data.Maybe.isJust (Data.Map.get (<{StdOverloaded.<;}> <{StdString.<_3}>) name_1_0 (Sapl.Target.JS.CodeGeneratorJS.get_cs_CAFs_7 s_1))) (Sapl.Target.JS.CodeGeneratorJS.force_217 (Sapl.Target.JS.CodeGeneratorJS.escapeName (Sapl.Target.JS.CodeGeneratorJS.get_cs_prefix_11 s_1) name_1_0) a_2) (let function_args_3_0 = Data.Map.get (<{StdOverloaded.<;}> <{StdString.<_3}>) name_1_0 (Sapl.Target.JS.CodeGeneratorJS.get_cs_functions_6 s_1) in if (Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_84_select1 function_args_3_0 mbConstructor_2_0 constructor_2_1 name_1_0 level_1_1 t_0 s_1 a_2) (Sapl.Target.JS.CodeGeneratorJS.condForce_195 (Sapl.Target.JS.CodeGeneratorJS.get_cs_trampoline_10 s_1) (Sapl.Target.JS.CodeGeneratorJS.anon_42 s_1 name_1_0) a_2) (Sapl.Target.JS.CodeGeneratorJS.force_217 (Sapl.Target.JS.CodeGeneratorJS.termCoder_85 t_0 s_1) a_2))))) (Sapl.SaplStruct.StrictVar name_1_0 level_1_1 -> Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_84 (Sapl.SaplStruct.NormalVar name_1_0 level_1_1) s_1 a_2) 
Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_84_select0 mbConstructor_2_0 constructor_2_1 name_1_0 level_1_1 !t_0 !s_1 !a_2 = if (Data.Maybe.isJust mbConstructor_2_0) (<{StdInt.==_16}> (Sapl.SaplParser.get_nr_args_7 constructor_2_1) 0) False
Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_84_select1 function_args_3_0 mbConstructor_2_0 constructor_2_1 name_1_0 level_1_1 !t_0 !s_1 !a_2 = if (Data.Maybe.isJust function_args_3_0) (<{StdInt.==_16}> (StdList.length_47 (Data.Maybe.fromJust function_args_3_0)) 0) False
Sapl.Target.JS.CodeGeneratorJS.anon_218 !s_0 !t_1 !a_2 = Sapl.Target.JS.CodeGeneratorJS.termCoder_91 t_1 s_0 a_2
Sapl.Target.JS.CodeGeneratorJS.anon_219 !s_0 !t_1 !a_2 = Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_90 t_1 s_0 a_2
Sapl.Target.JS.CodeGeneratorJS.termCoder_85 !t_0 !s_1 !a_2 = select t_0 (Sapl.SaplStruct.NormalVar name_1_0 level_1_1 -> let mbConstructor_2_0 = Data.Map.get (<{StdOverloaded.<;}> <{StdString.<_3}>) name_1_0 (Sapl.Target.JS.CodeGeneratorJS.get_cs_constructors_5 s_1), constructor_2_1 = Data.Maybe.fromJust mbConstructor_2_0, isLocalVar_2_2 = Data.List.elem_by Sapl.SaplStruct.eqVarByName t_0 (Sapl.Target.JS.CodeGeneratorJS.get_cs_current_vars_4 s_1) in if (Sapl.Target.JS.CodeGeneratorJS.termCoder_85_select0 mbConstructor_2_0 constructor_2_1 isLocalVar_2_2 name_1_0 level_1_1 t_0 s_1 a_2) (Sapl.Target.JS.CodeGeneratorJS.constructorInliner t_0 constructor_2_1 _predefined._Nil s_1 a_2) (let mb_3_0 = Data.Map.get (<{StdOverloaded.<;}> <{StdString.<_3}>) name_1_0 (Sapl.Target.JS.CodeGeneratorJS.get_cs_inlinefuncs_9 s_1), inlineFun_3_1 = Data.Maybe.fromJust mb_3_0 in if (Sapl.Target.JS.CodeGeneratorJS.termCoder_85_select1 mb_3_0 inlineFun_3_1 mbConstructor_2_0 constructor_2_1 isLocalVar_2_2 name_1_0 level_1_1 t_0 s_1 a_2) (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_2 "(") (Sapl.Target.Flavour.get_fun_0 inlineFun_3_1 (Sapl.Target.JS.CodeGeneratorJS.anon_218 s_1) (Sapl.Target.JS.CodeGeneratorJS.anon_219 s_1) _predefined._Nil)) ")") (if (Sapl.Target.JS.CodeGeneratorJS.termCoder_85_select2 mb_3_0 inlineFun_3_1 mbConstructor_2_0 constructor_2_1 isLocalVar_2_2 name_1_0 level_1_1 t_0 s_1 a_2) (<{Text.StringAppender.<++_8}> a_2 (Sapl.Target.JS.CodeGeneratorJS.escapeName (Sapl.Target.JS.CodeGeneratorJS.get_cs_prefix_11 s_1) name_1_0)) (if (Sapl.Target.JS.CodeGeneratorJS.termCoder_85_select3 mb_3_0 inlineFun_3_1 mbConstructor_2_0 constructor_2_1 isLocalVar_2_2 name_1_0 level_1_1 t_0 s_1 a_2) (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_2 (Sapl.Target.JS.CodeGeneratorJS.escapeName (Sapl.Target.JS.CodeGeneratorJS.get_cs_prefix_11 s_1) name_1_0)) "$eval") (if (StdList.any (Sapl.SaplStruct.eqVarByNameLevel t_0) (Sapl.Target.JS.CodeGeneratorJS.get_cs_futuredefs_2 s_1)) (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_2 "[function(){return ") (Sapl.Target.JS.CodeGeneratorJS.force_217 (Sapl.Target.JS.CodeGeneratorJS.var_name_47 name_1_0 s_1))) ";},[]]") (<{Text.StringAppender.<++_8}> a_2 (Data.Maybe.maybe (Sapl.Target.JS.CodeGeneratorJS.var_name_47 name_1_0 s_1) (Sapl.Target.JS.CodeGeneratorJS.anon_231 "") (Data.Map.get (<{StdOverloaded.<;}> <{StdString.<_3}>) name_1_0 (Sapl.Target.JS.CodeGeneratorJS.get_cs_builtins_8 s_1))))))))) (Sapl.SaplStruct.StrictVar name_1_0 level_1_1 -> Sapl.Target.JS.CodeGeneratorJS.termCoder_85 (Sapl.SaplStruct.NormalVar name_1_0 level_1_1) s_1 a_2) 
Sapl.Target.JS.CodeGeneratorJS.termCoder_85_select0 mbConstructor_2_0 constructor_2_1 isLocalVar_2_2 name_1_0 level_1_1 !t_0 !s_1 !a_2 = if (Data.Maybe.isJust (Sapl.Target.JS.CodeGeneratorJS.get_cs_inbody_0 s_1)) (if (StdBool.not isLocalVar_2_2) (if (Data.Maybe.isJust mbConstructor_2_0) (<{StdInt.==_16}> (Sapl.SaplParser.get_nr_args_7 constructor_2_1) 0) False) False) False
Sapl.Target.JS.CodeGeneratorJS.termCoder_85_select1 mb_3_0 inlineFun_3_1 mbConstructor_2_0 constructor_2_1 isLocalVar_2_2 name_1_0 level_1_1 !t_0 !s_1 !a_2 = if (Data.Maybe.isJust mb_3_0) (if (Sapl.Target.Flavour.get_data_cons_3 inlineFun_3_1) (<{StdInt.==_16}> (Sapl.Target.Flavour.get_arity_1 inlineFun_3_1) 0) False) False
Sapl.Target.JS.CodeGeneratorJS.termCoder_85_select2 mb_3_0 inlineFun_3_1 mbConstructor_2_0 constructor_2_1 isLocalVar_2_2 name_1_0 level_1_1 !t_0 !s_1 !a_2 = if (Data.Maybe.isJust (Sapl.Target.JS.CodeGeneratorJS.get_cs_inbody_0 s_1)) (if (StdBool.not isLocalVar_2_2) (Data.Maybe.isJust (Data.Map.get (<{StdOverloaded.<;}> <{StdString.<_3}>) name_1_0 (Sapl.Target.JS.CodeGeneratorJS.get_cs_CAFs_7 s_1))) False) False
Sapl.Target.JS.CodeGeneratorJS.termCoder_85_select3 mb_3_0 inlineFun_3_1 mbConstructor_2_0 constructor_2_1 isLocalVar_2_2 name_1_0 level_1_1 !t_0 !s_1 !a_2 = if (Data.Maybe.isJust (Sapl.Target.JS.CodeGeneratorJS.get_cs_inbody_0 s_1)) (if (StdBool.not isLocalVar_2_2) (if (Data.Maybe.maybe False (StdList.any Sapl.SaplStruct.isStrictVar) (Data.Map.get (<{StdOverloaded.<;}> <{StdString.<_3}>) name_1_0 (Sapl.Target.JS.CodeGeneratorJS.get_cs_functions_6 s_1))) True (Data.Maybe.maybe False Sapl.Target.JS.CodeGeneratorJS.anon_45 (Data.Map.get (<{StdOverloaded.<;}> <{StdString.<_3}>) name_1_0 (Sapl.Target.JS.CodeGeneratorJS.get_cs_constructors_5 s_1)))) False) False
Sapl.Target.JS.CodeGeneratorJS.anon_229 name_0 args_1 s_2 a_3 = <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_3 (Sapl.Target.JS.CodeGeneratorJS.termCoder_85 name_0 s_2)) ",[") (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_214 args_1 "," s_2)) "]"
Sapl.Target.JS.CodeGeneratorJS.anon_225 !s_0 !t_1 !a_2 = Sapl.Target.JS.CodeGeneratorJS.termCoder_91 t_1 (Sapl.Target.JS.CodeGeneratorJS.set_cs_intrfunc_1 s_0 Data.Maybe.Nothing) a_2
Sapl.Target.JS.CodeGeneratorJS.anon_226 !s_0 !t_1 !a_2 = Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_90 t_1 (Sapl.Target.JS.CodeGeneratorJS.set_cs_intrfunc_1 s_0 Data.Maybe.Nothing) a_2
Sapl.Target.JS.CodeGeneratorJS.anon_54 args_0 s_1 inlineFun_2 a_3 = <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_3 (Sapl.Target.Flavour.get_fun_0 inlineFun_2 (Sapl.Target.JS.CodeGeneratorJS.anon_225 s_1) (Sapl.Target.JS.CodeGeneratorJS.anon_226 s_1) (StdList.take (Sapl.Target.Flavour.get_arity_1 inlineFun_2) args_0))) ",[") (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_214 (StdList.drop (Sapl.Target.Flavour.get_arity_1 inlineFun_2) args_0) "," (Sapl.Target.JS.CodeGeneratorJS.set_cs_intrfunc_1 s_1 Data.Maybe.Nothing))) "]"
Sapl.Target.JS.CodeGeneratorJS.anon_205 !s_0 !t_1 !a_2 = Sapl.Target.JS.CodeGeneratorJS.termCoder_91 t_1 (Sapl.Target.JS.CodeGeneratorJS.set_cs_intrfunc_1 s_0 Data.Maybe.Nothing) a_2
Sapl.Target.JS.CodeGeneratorJS.anon_206 !s_0 !t_1 !a_2 = Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_90 t_1 (Sapl.Target.JS.CodeGeneratorJS.set_cs_intrfunc_1 s_0 Data.Maybe.Nothing) a_2
Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_214 !_x_0 !sep_1 !s_2 !a_3 = select _x_0 (_predefined._Cons t_1_0 _x_1_1 -> select _x_1_1 (_predefined._Nil -> Sapl.Target.JS.CodeGeneratorJS.termCoder_91 t_1_0 s_2 a_3) (_ -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_3 (Sapl.Target.JS.CodeGeneratorJS.termCoder_91 t_1_0 s_2)) sep_1) (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_214 _x_1_1 sep_1 s_2))) (_predefined._Nil -> a_3) 
Sapl.Target.JS.CodeGeneratorJS.anon_49 name_0 args_1 s_2 functionArity_3 a_4 = <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_4 (Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_90 (Sapl.SaplStruct.SApplication name_0 (StdList.take functionArity_3 args_1)) s_2)) ",[") (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_214 (StdList.drop functionArity_3 args_1) "," (Sapl.Target.JS.CodeGeneratorJS.set_cs_intrfunc_1 s_2 Data.Maybe.Nothing))) "]"
Sapl.Target.JS.CodeGeneratorJS.maa__224 !_x_0 !_x_1 i_2 s_3 a_4 = select _x_0 (_predefined._Cons _x_1_0 fargs_1_1 -> select _x_1_0 (Sapl.SaplStruct.StrictVar _x_2_0 _x_2_1 -> select _x_1 (_predefined._Cons aa_3_0 aargs_3_1 -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_8}> (<{Sapl.Target.JS.CodeGeneratorJS._if;194;15_257}> (<{StdInt.<_17}> 0 i_2) a_4) (Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_90 aa_3_0 s_3)) (Sapl.Target.JS.CodeGeneratorJS.maa__224 fargs_1_1 aargs_3_1 (<{StdInt.+_6}> i_2 1) s_3)) ) (_ -> select _x_1 (_predefined._Cons aa_2_0 aargs_2_1 -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_8}> (<{Sapl.Target.JS.CodeGeneratorJS._if;197;15_258}> (<{StdInt.<_17}> 0 i_2) a_4) (Sapl.Target.JS.CodeGeneratorJS.termCoder_91 aa_2_0 s_3)) (Sapl.Target.JS.CodeGeneratorJS.maa__224 fargs_1_1 aargs_2_1 (<{StdInt.+_6}> i_2 1) s_3)) )) (_predefined._Nil -> select _x_1 (_predefined._Cons aa_2_0 aargs_2_1 -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_8}> (<{Sapl.Target.JS.CodeGeneratorJS._if;200;15_259}> (<{StdInt.<_17}> 0 i_2) a_4) (Sapl.Target.JS.CodeGeneratorJS.termCoder_91 aa_2_0 s_3)) (Sapl.Target.JS.CodeGeneratorJS.maa__224 _predefined._Nil aargs_2_1 (<{StdInt.+_6}> i_2 1) s_3)) ) (_ -> select _x_1 (_predefined._Nil -> a_4) )
Sapl.Target.JS.CodeGeneratorJS.make_app_args !func_0 !args_1 !s_2 !a_3 = <{Sapl.Target.JS.CodeGeneratorJS._c;188;7_256}> (Data.Map.get (<{StdOverloaded.<;}> <{StdString.<_3}>) (Sapl.SaplStruct.unpackVar func_0) (Sapl.Target.JS.CodeGeneratorJS.get_cs_functions_6 s_2)) a_3 args_1 s_2
Sapl.Target.JS.CodeGeneratorJS.anon_48 name_0 args_1 s_2 a_3 = <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_3 (Sapl.Target.JS.CodeGeneratorJS.func_name_58 s_2 name_0)) "(") (Sapl.Target.JS.CodeGeneratorJS.make_app_args name_0 args_1 (Sapl.Target.JS.CodeGeneratorJS.set_cs_intrfunc_1 s_2 Data.Maybe.Nothing))) ")"
Sapl.Target.JS.CodeGeneratorJS.mta_1_203 !_x_0 _x_1 i_2 s_3 a_4 = select _x_0 (_predefined._Cons _x_1_0 fargs_1_1 -> select _x_1_0 (Sapl.SaplStruct.StrictVar _x_2_0 _x_2_1 -> select _x_1 (_predefined._Cons aa_3_0 aargs_3_1 -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_6}> (<{Text.StringAppender.<++_5}> (<{Sapl.Target.JS.CodeGeneratorJS._if;546;23_254}> (<{StdInt.<_17}> 0 i_2) a_4) "t") i_2) "=") (Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_90 aa_3_0 s_3)) (Sapl.Target.JS.CodeGeneratorJS.mta_1_203 fargs_1_1 aargs_3_1 (<{StdInt.+_6}> i_2 1) s_3)) ) (_ -> select _x_1 (_predefined._Cons aa_2_0 aargs_2_1 -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_6}> (<{Text.StringAppender.<++_5}> (<{Sapl.Target.JS.CodeGeneratorJS._if;549;23_255}> (<{StdInt.<_17}> 0 i_2) a_4) "t") i_2) "=") (Sapl.Target.JS.CodeGeneratorJS.termCoder_91 aa_2_0 s_3)) (Sapl.Target.JS.CodeGeneratorJS.mta_1_203 fargs_1_1 aargs_2_1 (<{StdInt.+_6}> i_2 1) s_3)) )) (_predefined._Nil -> a_4) 
Sapl.Target.JS.CodeGeneratorJS.make_tr_app_202 tr_function_args_0 args_1 s_2 a_3 = <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_3 "var ") (Sapl.Target.JS.CodeGeneratorJS.mta_1_203 tr_function_args_0 args_1 0 s_2)) ";") (Sapl.Target.JS.CodeGeneratorJS.mta_2_57 tr_function_args_0 0 s_2)) "continue;"
Sapl.Target.JS.CodeGeneratorJS.argsCoder_230 !_x_0 !_x_1 sep_2 s_3 a_4 = select _x_0 (_predefined._Cons _x_1_0 _x_1_1 -> select _x_1_0 (Sapl.SaplStruct.NormalVar _x_2_0 _x_2_1 -> select _x_1_1 (_predefined._Nil -> select _x_1 (_predefined._Cons t_4_0 _x_4_1 -> select _x_4_1 (_predefined._Nil -> Sapl.Target.JS.CodeGeneratorJS.termCoder_91 t_4_0 s_3 a_4) ) ) (_ -> select _x_1 (_predefined._Cons t_3_0 ts_3_1 -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_4 (Sapl.Target.JS.CodeGeneratorJS.termCoder_91 t_3_0 s_3)) sep_2) (Sapl.Target.JS.CodeGeneratorJS.argsCoder_230 _x_1_1 ts_3_1 sep_2 s_3)) )) (Sapl.SaplStruct.StrictVar _x_2_0 _x_2_1 -> select _x_1_1 (_predefined._Nil -> select _x_1 (_predefined._Cons t_4_0 _x_4_1 -> select _x_4_1 (_predefined._Nil -> Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_90 t_4_0 s_3 a_4) ) ) (_ -> select _x_1 (_predefined._Cons t_3_0 ts_3_1 -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_4 (Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_90 t_3_0 s_3)) sep_2) (Sapl.Target.JS.CodeGeneratorJS.argsCoder_230 _x_1_1 ts_3_1 sep_2 s_3)) )) ) (_predefined._Nil -> select _x_1 (_predefined._Nil -> a_4) ) 
Sapl.Target.JS.CodeGeneratorJS.constructorInliner !name_0 !def_1 !_x_2 !s_3 !a_4 = select _x_2 (_predefined._Nil -> Sapl.Target.JS.CodeGeneratorJS.escapeName (Sapl.Target.JS.CodeGeneratorJS.get_cs_prefix_11 s_3) (Sapl.SaplStruct.unpackVar name_0) a_4) (_ -> <{Text.StringAppender.<++_5}> (<{Sapl.Target.JS.CodeGeneratorJS._c;257;11_253}> (Sapl.SaplParser.get_nr_args_7 def_1) a_4 def_1 s_3 name_0 _x_2) "]")
Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_90 !t_0 !s_1 !a_2 = select t_0 (Sapl.SaplStruct.SVar var_1_0 -> Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_84 var_1_0 s_1 a_2) (Sapl.SaplStruct.SApplication name_1_0 args_1_1 -> let mbConstructor_2_0 = Data.Map.get (<{StdOverloaded.<;}> <{StdString.<_3}>) (Sapl.SaplStruct.unpackVar name_1_0) (Sapl.Target.JS.CodeGeneratorJS.get_cs_constructors_5 s_1), constructor_2_1 = Data.Maybe.fromJust mbConstructor_2_0 in if (Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_90_select0 mbConstructor_2_0 constructor_2_1 name_1_0 args_1_1 t_0 s_1 a_2) (Sapl.Target.JS.CodeGeneratorJS.constructorInliner name_1_0 constructor_2_1 args_1_1 s_1 a_2) (let mbFunction_3_0 = Data.Map.get (<{StdOverloaded.<;}> <{StdString.<_3}>) (Sapl.SaplStruct.unpackVar name_1_0) (Sapl.Target.JS.CodeGeneratorJS.get_cs_functions_6 s_1), functionArgs_3_1 = Data.Maybe.fromJust mbFunction_3_0, functionArity_3_2 = StdList.length_47 functionArgs_3_1 in if (Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_90_select1 mbFunction_3_0 functionArgs_3_1 functionArity_3_2 mbConstructor_2_0 constructor_2_1 name_1_0 args_1_1 t_0 s_1 a_2) (if (Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_90_select2 mbFunction_3_0 functionArgs_3_1 functionArity_3_2 mbConstructor_2_0 constructor_2_1 name_1_0 args_1_1 t_0 s_1 a_2) (<{Text.StringAppender.<++_8}> a_2 (Sapl.Target.JS.CodeGeneratorJS.make_tr_app_202 (Data.Maybe.fromJust (Data.Map.get (<{StdOverloaded.<;}> <{StdString.<_3}>) (Sapl.SaplStruct.unpackVar (Data.Maybe.fromJust (Sapl.Target.JS.CodeGeneratorJS.get_cs_intrfunc_1 s_1))) (Sapl.Target.JS.CodeGeneratorJS.get_cs_functions_6 s_1))) args_1_1 (Sapl.Target.JS.CodeGeneratorJS.set_cs_intrfunc_1 s_1 Data.Maybe.Nothing))) (Sapl.Target.JS.CodeGeneratorJS.condForce_195 (Sapl.Target.JS.CodeGeneratorJS.get_cs_trampoline_10 s_1) (Sapl.Target.JS.CodeGeneratorJS.anon_48 name_1_0 args_1_1 s_1) a_2)) (if (Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_90_select3 mbFunction_3_0 functionArgs_3_1 functionArity_3_2 mbConstructor_2_0 constructor_2_1 name_1_0 args_1_1 t_0 s_1 a_2) (Sapl.Target.JS.CodeGeneratorJS.forceApp_204 (Sapl.Target.JS.CodeGeneratorJS.anon_49 name_1_0 args_1_1 s_1 functionArity_3_2) a_2) (let mb_4_0 = Data.Map.get (<{StdOverloaded.<;}> <{StdString.<_3}>) (Sapl.SaplStruct.unpackVar name_1_0) (Sapl.Target.JS.CodeGeneratorJS.get_cs_inlinefuncs_9 s_1), inlineFun_4_1 = Data.Maybe.fromJust mb_4_0 in if (Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_90_select4 mb_4_0 inlineFun_4_1 mbFunction_3_0 functionArgs_3_1 functionArity_3_2 mbConstructor_2_0 constructor_2_1 name_1_0 args_1_1 t_0 s_1 a_2) (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_2 "(") (Sapl.Target.Flavour.get_fun_0 inlineFun_4_1 (Sapl.Target.JS.CodeGeneratorJS.anon_205 s_1) (Sapl.Target.JS.CodeGeneratorJS.anon_206 s_1) args_1_1)) ")") (if (Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_90_select5 mb_4_0 inlineFun_4_1 mbFunction_3_0 functionArgs_3_1 functionArity_3_2 mbConstructor_2_0 constructor_2_1 name_1_0 args_1_1 t_0 s_1 a_2) (Sapl.Target.JS.CodeGeneratorJS.forceApp_204 (Sapl.Target.JS.CodeGeneratorJS.anon_54 args_1_1 s_1 inlineFun_4_1) a_2) (let builtin_5_0 = Data.Map.get (<{StdOverloaded.<;}> <{StdString.<_3}>) (Sapl.SaplStruct.unpackVar name_1_0) (Sapl.Target.JS.CodeGeneratorJS.get_cs_builtins_8 s_1) in if (Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_90_select6 builtin_5_0 mb_4_0 inlineFun_4_1 mbFunction_3_0 functionArgs_3_1 functionArity_3_2 mbConstructor_2_0 constructor_2_1 name_1_0 args_1_1 t_0 s_1 a_2) (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_2 (Sapl.Target.JS.CodeGeneratorJS.escapeName "" (_predefined.tupsels2v0 (Data.Maybe.fromJust builtin_5_0)))) "(") (Sapl.Target.JS.CodeGeneratorJS.make_app_args name_1_0 args_1_1 (Sapl.Target.JS.CodeGeneratorJS.set_cs_intrfunc_1 s_1 Data.Maybe.Nothing))) ")") (if (Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_90_select7 builtin_5_0 mb_4_0 inlineFun_4_1 mbFunction_3_0 functionArgs_3_1 functionArity_3_2 mbConstructor_2_0 constructor_2_1 name_1_0 args_1_1 t_0 s_1 a_2) (Sapl.Target.JS.CodeGeneratorJS.forceApp_204 (Sapl.Target.JS.CodeGeneratorJS.anon_229 name_1_0 args_1_1 s_1) a_2) (<{Text.StringAppender.<++_8}> a_2 (Sapl.Target.JS.CodeGeneratorJS.termCoder_91 t_0 s_1))))))))) (_ -> Sapl.Target.JS.CodeGeneratorJS.termCoder_91 t_0 s_1 a_2)
Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_90_select0 mbConstructor_2_0 constructor_2_1 name_1_0 args_1_1 !t_0 !s_1 !a_2 = if (Data.Maybe.isJust mbConstructor_2_0) (<{StdInt.==_16}> (Sapl.SaplParser.get_nr_args_7 constructor_2_1) (StdList.length_47 args_1_1)) False
Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_90_select1 mbFunction_3_0 functionArgs_3_1 functionArity_3_2 mbConstructor_2_0 constructor_2_1 name_1_0 args_1_1 !t_0 !s_1 !a_2 = if (Data.Maybe.isJust mbFunction_3_0) (<{StdInt.==_16}> functionArity_3_2 (StdList.length_47 args_1_1)) False
Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_90_select2 mbFunction_3_0 functionArgs_3_1 functionArity_3_2 mbConstructor_2_0 constructor_2_1 name_1_0 args_1_1 !t_0 !s_1 !a_2 = if (Data.Maybe.isJust (Sapl.Target.JS.CodeGeneratorJS.get_cs_intrfunc_1 s_1)) (Sapl.Target.JS.CodeGeneratorJS.isTailRecursive (Data.Maybe.fromJust (Sapl.Target.JS.CodeGeneratorJS.get_cs_intrfunc_1 s_1)) t_0) False
Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_90_select3 mbFunction_3_0 functionArgs_3_1 functionArity_3_2 mbConstructor_2_0 constructor_2_1 name_1_0 args_1_1 !t_0 !s_1 !a_2 = if (Data.Maybe.isJust mbFunction_3_0) (<{StdInt.<_17}> functionArity_3_2 (StdList.length_47 args_1_1)) False
Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_90_select4 mb_4_0 inlineFun_4_1 mbFunction_3_0 functionArgs_3_1 functionArity_3_2 mbConstructor_2_0 constructor_2_1 name_1_0 args_1_1 !t_0 !s_1 !a_2 = if (Data.Maybe.isJust mb_4_0) (<{StdInt.==_16}> (Sapl.Target.Flavour.get_arity_1 inlineFun_4_1) (StdList.length_47 args_1_1)) False
Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_90_select5 mb_4_0 inlineFun_4_1 mbFunction_3_0 functionArgs_3_1 functionArity_3_2 mbConstructor_2_0 constructor_2_1 name_1_0 args_1_1 !t_0 !s_1 !a_2 = if (Data.Maybe.isJust mb_4_0) (<{StdInt.<_17}> (Sapl.Target.Flavour.get_arity_1 inlineFun_4_1) (StdList.length_47 args_1_1)) False
Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_90_select6 builtin_5_0 mb_4_0 inlineFun_4_1 mbFunction_3_0 functionArgs_3_1 functionArity_3_2 mbConstructor_2_0 constructor_2_1 name_1_0 args_1_1 !t_0 !s_1 !a_2 = if (Data.Maybe.isJust builtin_5_0) (<{StdInt.==_16}> (_predefined.tupsels2v1 (Data.Maybe.fromJust builtin_5_0)) (StdList.length_47 args_1_1)) False
Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_90_select7 builtin_5_0 mb_4_0 inlineFun_4_1 mbFunction_3_0 functionArgs_3_1 functionArity_3_2 mbConstructor_2_0 constructor_2_1 name_1_0 args_1_1 !t_0 !s_1 !a_2 = if (Data.Maybe.isNothing mbFunction_3_0) (Data.Maybe.isNothing builtin_5_0) False
Sapl.Target.JS.CodeGeneratorJS.termCoder_88 !_x_0 !s_1 !a_2 = select _x_0 (Sapl.SaplStruct.SaplLetDef name_1_0 body_1_1 -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_2 (Sapl.Target.JS.CodeGeneratorJS.termCoder_85 name_1_0 (Sapl.Target.JS.CodeGeneratorJS.set_cs_futuredefs_2 s_1 _predefined._Nil))) "=") (<{Sapl.Target.JS.CodeGeneratorJS._if;470;18_252}> (Sapl.SaplStruct.isStrictVar name_1_0) body_1_1 s_1)) 
Sapl.Target.JS.CodeGeneratorJS.letDefCoder !_x_0 !s_1 !a_2 = select _x_0 (_predefined._Cons t_1_0 _x_1_1 -> select _x_1_1 (_predefined._Nil -> Sapl.Target.JS.CodeGeneratorJS.termCoder_88 t_1_0 (Sapl.Target.JS.CodeGeneratorJS.set_cs_futuredefs_2 (Sapl.Target.JS.CodeGeneratorJS.set_cs_intrfunc_1 s_1 Data.Maybe.Nothing) (_predefined._Cons (Sapl.SaplStruct.toNormalVar (Sapl.SaplStruct.unpackBindVar t_1_0)) _predefined._Nil)) a_2) (_ -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_2 (Sapl.Target.JS.CodeGeneratorJS.termCoder_88 t_1_0 (Sapl.Target.JS.CodeGeneratorJS.set_cs_futuredefs_2 (Sapl.Target.JS.CodeGeneratorJS.set_cs_intrfunc_1 s_1 Data.Maybe.Nothing) (StdList.map Sapl.Target.JS.CodeGeneratorJS.anon_228 _x_0)))) ",") (Sapl.Target.JS.CodeGeneratorJS.letDefCoder _x_1_1 (Sapl.Target.JS.CodeGeneratorJS.set_cs_current_vars_4 s_1 (_predefined._Cons (Sapl.SaplStruct.unpackBindVar t_1_0) (Sapl.Target.JS.CodeGeneratorJS.get_cs_current_vars_4 s_1)))))) (_predefined._Nil -> a_2) 
Sapl.Target.JS.CodeGeneratorJS.termCoder_91 !t_0 !s_1 !a_2 = select t_0 (Sapl.SaplStruct.SVar var_1_0 -> Sapl.Target.JS.CodeGeneratorJS.termCoder_85 var_1_0 s_1 a_2) (Sapl.SaplStruct.SSelector _x_1_0 -> select _x_1_0 (Sapl.SaplStruct.SSelect expr_2_0 _x_2_1 -> select _x_2_1 (_predefined._Cons _x_3_0 _x_3_1 -> select _x_3_0 (_Tuple2 _x_4_0 _x_4_1 -> select _x_4_0 (Sapl.SaplStruct.PCons _x_5_0 vs_5_1 -> select _x_4_1 (Sapl.SaplStruct.SVar x_6_0 -> select _x_3_1 (_predefined._Nil -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_6}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_2 "Sapl.feval(") (Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_90 expr_2_0 (Sapl.Target.JS.CodeGeneratorJS.set_cs_intrfunc_1 s_1 Data.Maybe.Nothing))) "[") (<{StdInt.+_6}> (_predefined.tupsels2v0 (Sapl.Target.JS.CodeGeneratorJS.foldl_209 x_6_0 (_Tuple2 0 0) vs_5_1)) 2)) "])") ) ) ) ) ) (_ -> Sapl.Target.JS.CodeGeneratorJS.termCoder_91 _x_1_0 s_1 a_2)) (Sapl.SaplStruct.SSelect expr_1_0 patterns_1_1 -> if (StdList.any Sapl.Target.JS.CodeGeneratorJS.anon_227 patterns_1_1) (if (Sapl.Target.JS.CodeGeneratorJS.containsUnsafeSelect s_1 t_0) (let _x_2_0 = Sapl.Target.JS.CodeGeneratorJS.splitDefaultPattern patterns_1_1 in Sapl.Target.JS.CodeGeneratorJS.unsafe_69 s_1 (_predefined.tupsels2v0 _x_2_0) (_predefined.tupsels2v1 _x_2_0) (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_2 "var ys=") (Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_90 expr_1_0 (Sapl.Target.JS.CodeGeneratorJS.set_cs_intrfunc_1 s_1 Data.Maybe.Nothing))) ";")) (let _x_2_0 = Sapl.Target.JS.CodeGeneratorJS.splitDefaultPattern patterns_1_1 in Sapl.Target.JS.CodeGeneratorJS.safe_70 s_1 patterns_1_1 (_predefined.tupsels2v0 _x_2_0) (_predefined.tupsels2v1 _x_2_0) (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_2 "var ys=") (Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_90 expr_1_0 (Sapl.Target.JS.CodeGeneratorJS.set_cs_intrfunc_1 s_1 Data.Maybe.Nothing))) ";"))) (let _x_2_0 = Sapl.Target.JS.CodeGeneratorJS.splitDefaultPattern patterns_1_1, ps_2_1 = _predefined.tupsels2v0 _x_2_0 in <{Sapl.Target.JS.CodeGeneratorJS._c;627;11_250}> (_predefined.tupsels2v1 _x_2_0) a_2 expr_1_0 s_1 ps_2_1)) (Sapl.SaplStruct.SIf pred_1_0 lhs_1_1 rhs_1_2 -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_2 "if(") (Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_90 pred_1_0 (Sapl.Target.JS.CodeGeneratorJS.set_cs_intrfunc_1 s_1 Data.Maybe.Nothing))) "){") (Sapl.Target.JS.CodeGeneratorJS.callWrapper lhs_1_1 s_1)) "}else{") (Sapl.Target.JS.CodeGeneratorJS.callWrapper rhs_1_2 s_1)) "}") (Sapl.SaplStruct.SApplication name_1_0 args_1_1 -> let mbConstructor_2_0 = Data.Map.get (<{StdOverloaded.<;}> <{StdString.<_3}>) (Sapl.SaplStruct.unpackVar name_1_0) (Sapl.Target.JS.CodeGeneratorJS.get_cs_constructors_5 s_1), constructor_2_1 = Data.Maybe.fromJust mbConstructor_2_0 in if (Sapl.Target.JS.CodeGeneratorJS.termCoder_91_select0 mbConstructor_2_0 constructor_2_1 name_1_0 args_1_1 t_0 s_1 a_2) (Sapl.Target.JS.CodeGeneratorJS.constructorInliner name_1_0 constructor_2_1 args_1_1 s_1 a_2) (let mb_3_0 = Data.Map.get (<{StdOverloaded.<;}> <{StdString.<_3}>) (Sapl.SaplStruct.unpackVar name_1_0) (Sapl.Target.JS.CodeGeneratorJS.get_cs_inlinefuncs_9 s_1), inlineFun_3_1 = Data.Maybe.fromJust mb_3_0 in if (Sapl.Target.JS.CodeGeneratorJS.termCoder_91_select1 mb_3_0 inlineFun_3_1 mbConstructor_2_0 constructor_2_1 name_1_0 args_1_1 t_0 s_1 a_2) (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_2 "(") (Sapl.Target.Flavour.get_fun_0 inlineFun_3_1 (Sapl.Target.JS.CodeGeneratorJS.anon_212 s_1) (Sapl.Target.JS.CodeGeneratorJS.anon_213 s_1) args_1_1)) ")") (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_2 "[") (Sapl.Target.JS.CodeGeneratorJS.termCoder_85 name_1_0 s_1)) ",[") (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_214 args_1_1 "," s_1)) "]]"))) (Sapl.SaplStruct.SLit lit_1_0 -> Sapl.Target.JS.CodeGeneratorJS.termCoder_79 lit_1_0 s_1 a_2) (Sapl.SaplStruct.SLet body_1_0 defs_1_1 -> let newdefs_2_0 = <{Sapl.Target.JS.CodeGeneratorJS._c;676;19_251}> (Sapl.Transform.Let.sortBindings defs_1_1) defs_1_1, defnames_2_1 = StdList.map Sapl.SaplStruct.unpackBindVar newdefs_2_0, s_2_2 = Sapl.Target.JS.CodeGeneratorJS.pushArgs s_1 defnames_2_1 in <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_2 "var ") (Sapl.Target.JS.CodeGeneratorJS.letDefCoder newdefs_2_0 s_2_2)) ";\n ") (Sapl.Target.JS.CodeGeneratorJS.callWrapper body_1_0 (Sapl.Target.JS.CodeGeneratorJS.set_cs_current_vars_4 s_2_2 (<{StdList.++}> defnames_2_1 (Sapl.Target.JS.CodeGeneratorJS.get_cs_current_vars_4 s_2_2))))) ";") 
Sapl.Target.JS.CodeGeneratorJS.termCoder_91_select0 mbConstructor_2_0 constructor_2_1 name_1_0 args_1_1 !t_0 !s_1 !a_2 = if (Data.Maybe.isJust mbConstructor_2_0) (if (<{StdInt.==_16}> (Sapl.SaplParser.get_nr_args_7 constructor_2_1) (StdList.length_47 args_1_1)) (StdBool.not (StdList.any Sapl.SaplStruct.isStrictVar (Sapl.SaplParser.get_args_8 constructor_2_1))) False) False
Sapl.Target.JS.CodeGeneratorJS.termCoder_91_select1 mb_3_0 inlineFun_3_1 mbConstructor_2_0 constructor_2_1 name_1_0 args_1_1 !t_0 !s_1 !a_2 = if (Data.Maybe.isJust mb_3_0) (if (Sapl.Target.Flavour.get_data_cons_3 inlineFun_3_1) (<{StdInt.==_16}> (Sapl.Target.Flavour.get_arity_1 inlineFun_3_1) (StdList.length_47 args_1_1)) False) False
Sapl.Target.JS.CodeGeneratorJS.callWrapper !t_0 !s_1 !a_2 = if (StdBool.not (Sapl.Target.JS.CodeGeneratorJS.inline t_0)) (Sapl.Target.JS.CodeGeneratorJS.termCoder_91 t_0 s_1 a_2) (if (Sapl.Target.JS.CodeGeneratorJS.callWrapper_select0 t_0 s_1 a_2) (Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_90 t_0 s_1 a_2) (if (Sapl.Target.JS.CodeGeneratorJS.get_cs_trampoline_10 s_1) (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_2 "return ") (Sapl.Target.JS.CodeGeneratorJS.trampolineCoder_92 t_0 s_1)) ";") (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_2 "return ") (Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_90 t_0 s_1)) ";")))
Sapl.Target.JS.CodeGeneratorJS.callWrapper_select0 !t_0 !s_1 !a_2 = if (Data.Maybe.isJust (Sapl.Target.JS.CodeGeneratorJS.get_cs_intrfunc_1 s_1)) (Sapl.Target.JS.CodeGeneratorJS.isTailRecursive (Data.Maybe.fromJust (Sapl.Target.JS.CodeGeneratorJS.get_cs_intrfunc_1 s_1)) t_0) False
<{Sapl.Target.JS.CodeGeneratorJS._c;620;15_265}> !d_0 patterns_1 s_2 a_3 ps_4 = select d_0 (Data.Maybe.Just d_1_0 -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Sapl.Target.JS.CodeGeneratorJS._c;615;19_263}> patterns_1 s_2 a_3 ps_4) (Sapl.Target.JS.CodeGeneratorJS.termCoder_82 (Sapl.Target.JS.CodeGeneratorJS.defp_67 d_1_0 False) s_2)) ";") (_ -> <{Sapl.Target.JS.CodeGeneratorJS._c;615;19_264}> patterns_1 s_2 a_3 ps_4)
<{Sapl.Target.JS.CodeGeneratorJS._c;615;19_264}> !patterns_0 s_1 a_2 ps_3 = select patterns_0 (_predefined._Cons _x_1_0 _x_1_1 -> select _x_1_0 (_Tuple2 p_2_0 body_2_1 -> select _x_1_1 (_predefined._Nil -> if (Sapl.Target.JS.CodeGeneratorJS.isSingleton_64 s_1 (Data.Maybe.fromJust (Sapl.SaplStruct.unpackConsName p_2_0))) (Sapl.Target.JS.CodeGeneratorJS.termCoder_82 (Sapl.Target.JS.CodeGeneratorJS.cp_68 p_2_0 body_2_1 True) s_1 a_2) (Sapl.Target.JS.CodeGeneratorJS.addSwitch_215 (Sapl.Target.JS.CodeGeneratorJS.termCoder_82 (Sapl.Target.JS.CodeGeneratorJS.cp_68 p_2_0 body_2_1 False) s_1) a_2)) ) ) (_ -> Sapl.Target.JS.CodeGeneratorJS.addSwitch_215 (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_211 (Sapl.Target.JS.CodeGeneratorJS.ups_66 ps_3) "" s_1) a_2)
<{Sapl.Target.JS.CodeGeneratorJS._c;615;19_263}> !patterns_0 s_1 a_2 ps_3 = select patterns_0 (_predefined._Cons _x_1_0 _x_1_1 -> select _x_1_0 (_Tuple2 p_2_0 body_2_1 -> select _x_1_1 (_predefined._Nil -> if (Sapl.Target.JS.CodeGeneratorJS.isSingleton_64 s_1 (Data.Maybe.fromJust (Sapl.SaplStruct.unpackConsName p_2_0))) (Sapl.Target.JS.CodeGeneratorJS.termCoder_82 (Sapl.Target.JS.CodeGeneratorJS.cp_68 p_2_0 body_2_1 True) s_1 a_2) (Sapl.Target.JS.CodeGeneratorJS.addSwitch_215 (Sapl.Target.JS.CodeGeneratorJS.termCoder_82 (Sapl.Target.JS.CodeGeneratorJS.cp_68 p_2_0 body_2_1 False) s_1) a_2)) ) ) (_ -> Sapl.Target.JS.CodeGeneratorJS.addSwitch_215 (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_211 (Sapl.Target.JS.CodeGeneratorJS.ups_66 ps_3) "" s_1) a_2)
<{Sapl.Target.JS.CodeGeneratorJS._c;342;15_262}> !_x_0 a_1 get_cons_2 = select _x_0 (True -> a_1) (_ -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> a_1 "case ") (StdString.toString_5 (Sapl.SaplParser.get_index_5 get_cons_2))) ": ")
<{Sapl.Target.JS.CodeGeneratorJS._c;610;15_261}> !d_0 ps_1 s_2 a_3 = select d_0 (Data.Maybe.Just d_1_0 -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (Sapl.Target.JS.CodeGeneratorJS.addSwitch_215 (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_211 (Sapl.Target.JS.CodeGeneratorJS.ups_66 ps_1) "" (Sapl.Target.JS.CodeGeneratorJS.set_cs_incaseexpr_3 s_2 True)) a_3) (Sapl.Target.JS.CodeGeneratorJS.termCoder_82 (Sapl.Target.JS.CodeGeneratorJS.defp_67 d_1_0 False) s_2)) ";") (_ -> <{Text.StringAppender.<++_5}> (Sapl.Target.JS.CodeGeneratorJS.addSwitch_215 (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_211 (Sapl.Target.JS.CodeGeneratorJS.ups_66 ps_1) "" (Sapl.Target.JS.CodeGeneratorJS.set_cs_incaseexpr_3 s_2 True)) a_3) (<{Sapl.Target.JS.CodeGeneratorJS._if;612;35_260}> (Sapl.Target.JS.CodeGeneratorJS.get_cs_incaseexpr_3 s_2)))
<{Sapl.Target.JS.CodeGeneratorJS._if;612;35_260}> !_x_0 = select _x_0 (True -> "break;") (_ -> "throw \"nomatch\";")
<{Sapl.Target.JS.CodeGeneratorJS._if;200;15_259}> !_x_0 a_1 = select _x_0 (True -> <{Text.StringAppender.<++_5}> a_1 ",") (_ -> a_1)
<{Sapl.Target.JS.CodeGeneratorJS._if;197;15_258}> !_x_0 a_1 = select _x_0 (True -> <{Text.StringAppender.<++_5}> a_1 ",") (_ -> a_1)
<{Sapl.Target.JS.CodeGeneratorJS._if;194;15_257}> !_x_0 a_1 = select _x_0 (True -> <{Text.StringAppender.<++_5}> a_1 ",") (_ -> a_1)
<{Sapl.Target.JS.CodeGeneratorJS._c;188;7_256}> !_x_0 a_1 args_2 s_3 = select _x_0 (Data.Maybe.Just func_args_1_0 -> <{Text.StringAppender.<++_8}> a_1 (Sapl.Target.JS.CodeGeneratorJS.maa__224 func_args_1_0 args_2 0 s_3)) (_ -> <{Text.StringAppender.<++_8}> a_1 (Sapl.Target.JS.CodeGeneratorJS.maa__224 _predefined._Nil args_2 0 s_3))
<{Sapl.Target.JS.CodeGeneratorJS._if;549;23_255}> !_x_0 a_1 = select _x_0 (True -> <{Text.StringAppender.<++_5}> a_1 ",") (_ -> a_1)
<{Sapl.Target.JS.CodeGeneratorJS._if;546;23_254}> !_x_0 a_1 = select _x_0 (True -> <{Text.StringAppender.<++_5}> a_1 ",") (_ -> a_1)
<{Sapl.Target.JS.CodeGeneratorJS._c;257;11_253}> !_x_0 a_1 def_2 s_3 name_4 _x_5 = select _x_0 (0 -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_6}> (<{Text.StringAppender.<++_5}> a_1 "[") (Sapl.SaplParser.get_index_5 def_2)) ",") (Sapl.Target.JS.CodeGeneratorJS.escapeName (Sapl.Target.JS.CodeGeneratorJS.get_cs_prefix_11 s_3) (Sapl.SaplStruct.unpackVar name_4))) "$n") (_ -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_6}> (<{Text.StringAppender.<++_5}> a_1 "[") (Sapl.SaplParser.get_index_5 def_2)) ",") (Sapl.Target.JS.CodeGeneratorJS.escapeName (Sapl.Target.JS.CodeGeneratorJS.get_cs_prefix_11 s_3) (Sapl.SaplStruct.unpackVar name_4))) "$n") ",") (Sapl.Target.JS.CodeGeneratorJS.argsCoder_230 (Sapl.SaplParser.get_args_8 def_2) _x_5 "," (Sapl.Target.JS.CodeGeneratorJS.set_cs_intrfunc_1 s_3 Data.Maybe.Nothing)))
<{Sapl.Target.JS.CodeGeneratorJS._if;470;18_252}> !_x_0 = select _x_0 (True -> Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_90) (_ -> Sapl.Target.JS.CodeGeneratorJS.termCoder_91)
<{Sapl.Target.JS.CodeGeneratorJS._c;676;19_251}> !_x_0 defs_1 = select _x_0 (Data.Maybe.Just ds_1_0 -> ds_1_0) (Data.Maybe.Nothing -> defs_1) 
<{Sapl.Target.JS.CodeGeneratorJS._c;627;11_250}> !_x_0 a_1 expr_2 s_3 ps_4 = select _x_0 (Data.Maybe.Just d_1_0 -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_1 "switch(") (Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_90 expr_2 (Sapl.Target.JS.CodeGeneratorJS.set_cs_intrfunc_1 s_3 Data.Maybe.Nothing))) "){") (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_211 (StdList.map Sapl.Target.JS.CodeGeneratorJS.anon_71 ps_4) "" (Sapl.Target.JS.CodeGeneratorJS.set_cs_incaseexpr_3 s_3 True))) "};") (Sapl.Target.JS.CodeGeneratorJS.termCoder_82 (_Tuple3 Sapl.SaplStruct.PDefault d_1_0 False) s_3)) ";") (_ -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_1 "switch(") (Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_90 expr_2 (Sapl.Target.JS.CodeGeneratorJS.set_cs_intrfunc_1 s_3 Data.Maybe.Nothing))) "){") (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_211 (StdList.map Sapl.Target.JS.CodeGeneratorJS.anon_71 ps_4) "" (Sapl.Target.JS.CodeGeneratorJS.set_cs_incaseexpr_3 s_3 True))) "};") (<{Sapl.Target.JS.CodeGeneratorJS._if;629;31_249}> (Sapl.Target.JS.CodeGeneratorJS.get_cs_incaseexpr_3 s_3)))
<{Sapl.Target.JS.CodeGeneratorJS._if;629;31_249}> !_x_0 = select _x_0 (True -> "break;") (_ -> "throw \"nomatch\";")
Sapl.Target.JS.CodeGeneratorJS.argsCoder_208 !_vAppendable_0 !_x_1 !_x_2 sep_3 s_4 a_5 = select _x_1 (_predefined._Cons _x_1_0 _x_1_1 -> select _x_1_0 (Sapl.SaplStruct.NormalVar _x_2_0 _x_2_1 -> select _x_1_1 (_predefined._Nil -> select _x_2 (_predefined._Cons t_4_0 _x_4_1 -> select _x_4_1 (_predefined._Nil -> Sapl.Target.JS.CodeGeneratorJS.termCoder_91 t_4_0 s_4 a_5) ) ) (_ -> select _x_2 (_predefined._Cons t_3_0 ts_3_1 -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.get_<++_0}> _vAppendable_0 (<{Text.StringAppender.<++_8}> a_5 (Sapl.Target.JS.CodeGeneratorJS.termCoder_91 t_3_0 s_4)) sep_3) (Sapl.Target.JS.CodeGeneratorJS.argsCoder_208 _vAppendable_0 _x_1_1 ts_3_1 sep_3 s_4)) )) (Sapl.SaplStruct.StrictVar _x_2_0 _x_2_1 -> select _x_1_1 (_predefined._Nil -> select _x_2 (_predefined._Cons t_4_0 _x_4_1 -> select _x_4_1 (_predefined._Nil -> Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_90 t_4_0 s_4 a_5) ) ) (_ -> select _x_2 (_predefined._Cons t_3_0 ts_3_1 -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.get_<++_0}> _vAppendable_0 (<{Text.StringAppender.<++_8}> a_5 (Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_90 t_3_0 s_4)) sep_3) (Sapl.Target.JS.CodeGeneratorJS.argsCoder_208 _vAppendable_0 _x_1_1 ts_3_1 sep_3 s_4)) )) ) (_predefined._Nil -> select _x_2 (_predefined._Nil -> a_5) ) 
Sapl.Target.JS.CodeGeneratorJS.anon_207 !_vTermCoder_0 name_1 args_2 s_3 a_4 = <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_4 (Sapl.Target.JS.CodeGeneratorJS.termCoder_85 name_1 s_3)) ",[") (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder _vTermCoder_0 args_2 "," s_3)) "]"
Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_81 !t_0 !s_1 !a_2 = Sapl.Target.JS.CodeGeneratorJS.termCoder_82 t_0 s_1 a_2
Sapl.Target.JS.CodeGeneratorJS.trampolineCoder_83 !t_0 !s_1 !a_2 = Sapl.Target.JS.CodeGeneratorJS.termCoder_82 t_0 s_1 a_2
Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_232 !_x_0 !sep_1 !s_2 !a_3 = select _x_0 (_predefined._Cons t_1_0 _x_1_1 -> select _x_1_1 (_predefined._Nil -> Sapl.Target.JS.CodeGeneratorJS.termCoder_85 t_1_0 s_2 a_3) (_ -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> a_3 (Sapl.Target.JS.CodeGeneratorJS.termCoder_85 t_1_0 s_2)) sep_1) (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_232 _x_1_1 sep_1 s_2))) (_predefined._Nil -> a_3) 
Sapl.Target.JS.CodeGeneratorJS.normalFunc !name_0 !body_1 !args_2 !s_3 !a_4 = let s_1_0 = Sapl.Target.JS.CodeGeneratorJS.set_cs_current_vars_4 (Sapl.Target.JS.CodeGeneratorJS.set_cs_intrfunc_1 (Sapl.Target.JS.CodeGeneratorJS.set_cs_inbody_0 s_3 (Data.Maybe.Just name_0)) (<{Sapl.Target.JS.CodeGeneratorJS._if;163;30_266}> (Sapl.Target.JS.CodeGeneratorJS.isTailRecursive name_0 body_1) name_0)) args_2 in <{Text.StringAppender.<++_5}> (<{Sapl.Target.JS.CodeGeneratorJS._if;168;11_273}> (Data.Maybe.isJust (Sapl.Target.JS.CodeGeneratorJS.get_cs_intrfunc_1 s_1_0)) body_1 s_1_0 args_2 name_0 s_3 a_4) "};"
<{Sapl.Target.JS.CodeGeneratorJS._if;168;11_273}> !_x_0 body_1 s_2 args_3 name_4 s_5 a_6 = select _x_0 (True -> <{Text.StringAppender.<++_5}> (Sapl.Target.JS.CodeGeneratorJS.callWrapper body_1 s_2 (<{Sapl.Target.JS.CodeGeneratorJS._if;166;11_269}> (Data.Maybe.isJust (Sapl.Target.JS.CodeGeneratorJS.get_cs_intrfunc_1 s_2)) args_3 name_4 s_5 a_6)) "}") (_ -> Sapl.Target.JS.CodeGeneratorJS.callWrapper body_1 s_2 (<{Sapl.Target.JS.CodeGeneratorJS._if;166;11_272}> (Data.Maybe.isJust (Sapl.Target.JS.CodeGeneratorJS.get_cs_intrfunc_1 s_2)) args_3 name_4 s_5 a_6))
<{Sapl.Target.JS.CodeGeneratorJS._if;166;11_272}> !_x_0 args_1 name_2 s_3 a_4 = select _x_0 (True -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Sapl.Target.JS.CodeGeneratorJS._if;153;11_270}> (StdList.any Sapl.SaplStruct.isStrictVar args_1) name_2 args_1 s_3 a_4) "function ") (Sapl.Target.JS.CodeGeneratorJS.termCoder_85 name_2 s_3)) "(") (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_232 args_1 "," s_3)) "){") "while(1){") (_ -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Sapl.Target.JS.CodeGeneratorJS._if;153;11_271}> (StdList.any Sapl.SaplStruct.isStrictVar args_1) name_2 args_1 s_3 a_4) "function ") (Sapl.Target.JS.CodeGeneratorJS.termCoder_85 name_2 s_3)) "(") (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_232 args_1 "," s_3)) "){")
<{Sapl.Target.JS.CodeGeneratorJS._if;153;11_271}> !_x_0 name_1 args_2 s_3 a_4 = select _x_0 (True -> Sapl.Target.JS.CodeGeneratorJS.makeStrictClosure (Sapl.SaplStruct.unpackVar name_1) args_2 s_3 a_4) (_ -> a_4)
<{Sapl.Target.JS.CodeGeneratorJS._if;153;11_270}> !_x_0 name_1 args_2 s_3 a_4 = select _x_0 (True -> Sapl.Target.JS.CodeGeneratorJS.makeStrictClosure (Sapl.SaplStruct.unpackVar name_1) args_2 s_3 a_4) (_ -> a_4)
<{Sapl.Target.JS.CodeGeneratorJS._if;166;11_269}> !_x_0 args_1 name_2 s_3 a_4 = select _x_0 (True -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Sapl.Target.JS.CodeGeneratorJS._if;153;11_267}> (StdList.any Sapl.SaplStruct.isStrictVar args_1) name_2 args_1 s_3 a_4) "function ") (Sapl.Target.JS.CodeGeneratorJS.termCoder_85 name_2 s_3)) "(") (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_232 args_1 "," s_3)) "){") "while(1){") (_ -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Sapl.Target.JS.CodeGeneratorJS._if;153;11_268}> (StdList.any Sapl.SaplStruct.isStrictVar args_1) name_2 args_1 s_3 a_4) "function ") (Sapl.Target.JS.CodeGeneratorJS.termCoder_85 name_2 s_3)) "(") (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_232 args_1 "," s_3)) "){")
<{Sapl.Target.JS.CodeGeneratorJS._if;153;11_268}> !_x_0 name_1 args_2 s_3 a_4 = select _x_0 (True -> Sapl.Target.JS.CodeGeneratorJS.makeStrictClosure (Sapl.SaplStruct.unpackVar name_1) args_2 s_3 a_4) (_ -> a_4)
<{Sapl.Target.JS.CodeGeneratorJS._if;153;11_267}> !_x_0 name_1 args_2 s_3 a_4 = select _x_0 (True -> Sapl.Target.JS.CodeGeneratorJS.makeStrictClosure (Sapl.SaplStruct.unpackVar name_1) args_2 s_3 a_4) (_ -> a_4)
<{Sapl.Target.JS.CodeGeneratorJS._if;163;30_266}> !_x_0 name_1 = select _x_0 (True -> Data.Maybe.Just name_1) (_ -> Data.Maybe.Nothing)
Sapl.Target.JS.CodeGeneratorJS.encodeCAF !name_0 !body_1 !s_2 !a_3 = select body_1 (Sapl.SaplStruct.SLit _x_1_0 -> <{Text.StringAppender.<++_5}> (Sapl.Target.JS.CodeGeneratorJS.termCoder_91 body_1 (Sapl.Target.JS.CodeGeneratorJS.set_cs_current_vars_4 (Sapl.Target.JS.CodeGeneratorJS.set_cs_intrfunc_1 (Sapl.Target.JS.CodeGeneratorJS.set_cs_inbody_0 s_2 (Data.Maybe.Just name_0)) Data.Maybe.Nothing) _predefined._Nil) (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_3 "var ") (Sapl.Target.JS.CodeGeneratorJS.termCoder_85 name_0 s_2)) " = ")) ";") (_ -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_3 "var ") (Sapl.Target.JS.CodeGeneratorJS.termCoder_85 name_0 s_2)) " = [function (){") (Sapl.Target.JS.CodeGeneratorJS.callWrapper body_1 (Sapl.Target.JS.CodeGeneratorJS.set_cs_current_vars_4 (Sapl.Target.JS.CodeGeneratorJS.set_cs_intrfunc_1 (Sapl.Target.JS.CodeGeneratorJS.set_cs_inbody_0 s_2 (Data.Maybe.Just name_0)) Data.Maybe.Nothing) _predefined._Nil))) "},[]];")
Sapl.Target.JS.CodeGeneratorJS.anon_30 !_vTermCoder_0 s_1 a_2 t_3 = Sapl.Target.JS.CodeGeneratorJS.get_termCoder_13 _vTermCoder_0 t_3 s_1 a_2
<{Sapl.Target.JS.CodeGeneratorJS.c;240;49_36}> !<{_v<_0}> !_vtoString_1 !_vone_2 !<{_v+_3}> g_i_4 g_s_5 = if (StdBool.not (<{StdOverloaded.get_<_7}> <{_v<_0}> g_s_5 g_i_4)) (_predefined._Cons (Sapl.SaplStruct.NormalVar (<{StdString.+++_11}> "_" (StdOverloaded.get_toString_25 _vtoString_1 g_i_4)) 0) (<{Sapl.Target.JS.CodeGeneratorJS.c;240;49_36}> <{_v<_0}> _vtoString_1 _vone_2 <{_v+_3}> (<{StdOverloaded.get_+_0}> <{_v+_3}> g_i_4 (StdOverloaded.get_one_5 _vone_2)) g_s_5)) _predefined._Nil
<{Sapl.Target.JS.CodeGeneratorJS.c;240;49_233}> !_vtoString_0 !_vone_1 !<{_v+_2}> !g_i_3 !g_s_4 = if (StdBool.not (<{StdInt.<_17}> g_s_4 g_i_3)) (_predefined._Cons (Sapl.SaplStruct.NormalVar (<{StdString.+++_11}> "_" (StdOverloaded.get_toString_25 _vtoString_0 g_i_3)) 0) (<{Sapl.Target.JS.CodeGeneratorJS.c;240;49_233}> _vtoString_0 _vone_1 <{_v+_2}> (<{StdOverloaded.get_+_0}> <{_v+_2}> g_i_3 (StdOverloaded.get_one_5 _vone_1)) g_s_4)) _predefined._Nil
<{Sapl.Target.JS.CodeGeneratorJS.c;240;49_234}> !_vone_0 !<{_v+_1}> !g_i_2 !g_s_3 = if (StdBool.not (<{StdInt.<_17}> g_s_3 g_i_2)) (_predefined._Cons (Sapl.SaplStruct.NormalVar (<{StdString.+++_11}> "_" (StdString.toString_5 g_i_2)) 0) (<{Sapl.Target.JS.CodeGeneratorJS.c;240;49_234}> _vone_0 <{_v+_1}> (<{StdOverloaded.get_+_0}> <{_v+_1}> g_i_2 (StdOverloaded.get_one_5 _vone_0)) g_s_3)) _predefined._Nil
<{Sapl.Target.JS.CodeGeneratorJS.c;240;49_235}> !<{_v+_0}> !g_i_1 !g_s_2 = if (StdBool.not (<{StdInt.<_17}> g_s_2 g_i_1)) (_predefined._Cons (Sapl.SaplStruct.NormalVar (<{StdString.+++_11}> "_" (StdString.toString_5 g_i_1)) 0) (<{Sapl.Target.JS.CodeGeneratorJS.c;240;49_235}> <{_v+_0}> (<{StdOverloaded.get_+_0}> <{_v+_0}> g_i_1 StdInt.one_11) g_s_2)) _predefined._Nil
<{Sapl.Target.JS.CodeGeneratorJS.c;240;49_236}> !g_i_0 !g_s_1 = if (StdBool.not (<{StdInt.<_17}> g_s_1 g_i_0)) (_predefined._Cons (Sapl.SaplStruct.NormalVar (<{StdString.+++_11}> "_" (StdString.toString_5 g_i_0)) 0) (<{Sapl.Target.JS.CodeGeneratorJS.c;240;49_236}> (<{StdInt.+_6}> g_i_0 StdInt.one_11) g_s_1)) _predefined._Nil
Sapl.Target.JS.CodeGeneratorJS.constructorCoder !name_0 !id_1 !_x_2 s_3 !a_4 = select _x_2 (_predefined._Nil -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_6}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> a_4 "var ") (Sapl.Target.JS.CodeGeneratorJS.escapeName (Sapl.Target.JS.CodeGeneratorJS.get_cs_prefix_11 s_3) (Sapl.SaplStruct.unpackVar name_0))) " = [") id_1) ",\"") (Sapl.SaplStruct.unpackVar name_0)) "\"];") (_ -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> (<{Sapl.Target.JS.CodeGeneratorJS._c;244;11_276}> (StdList.length_47 _x_2) _x_2 name_0 s_3 a_4 id_1) "];};") "var ") (Sapl.Target.JS.CodeGeneratorJS.termCoder_85 name_0 s_3)) "$n = \"") (Sapl.SaplStruct.unpackVar name_0)) "\";")
<{Sapl.Target.JS.CodeGeneratorJS._c;244;11_276}> !_x_0 _x_1 name_2 s_3 a_4 id_5 = select _x_0 (0 -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_6}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Sapl.Target.JS.CodeGeneratorJS._if;236;11_274}> (StdList.any Sapl.SaplStruct.isStrictVar _x_1) name_2 _x_1 s_3 a_4) "function ") (Sapl.Target.JS.CodeGeneratorJS.termCoder_85 name_2 s_3)) "(") (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_232 (<{Sapl.Target.JS.CodeGeneratorJS.c;240;49_236}> 1 (StdList.length_47 _x_1)) "," s_3)) "){return [") id_5) ",") (Sapl.Target.JS.CodeGeneratorJS.termCoder_85 name_2 s_3)) "$n") (_ -> let newargs_1_0 = <{Sapl.Target.JS.CodeGeneratorJS.c;240;49_236}> 1 (StdList.length_47 _x_1) in <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_6}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Sapl.Target.JS.CodeGeneratorJS._if;236;11_275}> (StdList.any Sapl.SaplStruct.isStrictVar _x_1) name_2 _x_1 s_3 a_4) "function ") (Sapl.Target.JS.CodeGeneratorJS.termCoder_85 name_2 s_3)) "(") (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_232 newargs_1_0 "," s_3)) "){return [") id_5) ",") (Sapl.Target.JS.CodeGeneratorJS.termCoder_85 name_2 s_3)) "$n") ",") (Sapl.Target.JS.CodeGeneratorJS.termArrayCoder_232 newargs_1_0 "," s_3))
<{Sapl.Target.JS.CodeGeneratorJS._if;236;11_275}> !_x_0 name_1 _x_2 s_3 a_4 = select _x_0 (True -> Sapl.Target.JS.CodeGeneratorJS.makeStrictClosure (Sapl.SaplStruct.unpackVar name_1) _x_2 s_3 a_4) (_ -> a_4)
<{Sapl.Target.JS.CodeGeneratorJS._if;236;11_274}> !_x_0 name_1 _x_2 s_3 a_4 = select _x_0 (True -> Sapl.Target.JS.CodeGeneratorJS.makeStrictClosure (Sapl.SaplStruct.unpackVar name_1) _x_2 s_3 a_4) (_ -> a_4)
Sapl.Target.JS.CodeGeneratorJS.recordFieldCoder !_x_0 !a_1 = select _x_0 (_predefined._Cons t_1_0 _x_1_1 -> select _x_1_1 (_predefined._Nil -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> a_1 "\"") (Sapl.SaplStruct.unpackVar t_1_0)) "\"") (_ -> <{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> a_1 "\"") (Sapl.SaplStruct.unpackVar t_1_0)) "\",") (Sapl.Target.JS.CodeGeneratorJS.recordFieldCoder _x_1_1))) (_predefined._Nil -> a_1) 
Sapl.Target.JS.CodeGeneratorJS.termCoder_76 !_x_0 !s_1 !a_2 = select _x_0 (Sapl.SaplStruct.SaplConstructor name_1_0 id_1_1 args_1_2 -> Sapl.Target.JS.CodeGeneratorJS.constructorCoder name_1_0 id_1_1 args_1_2 s_1 a_2) 
Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_75 !t_0 !s_1 !a_2 = Sapl.Target.JS.CodeGeneratorJS.termCoder_76 t_0 s_1 a_2
Sapl.Target.JS.CodeGeneratorJS.trampolineCoder_77 !t_0 !s_1 !a_2 = Sapl.Target.JS.CodeGeneratorJS.termCoder_76 t_0 s_1 a_2
Sapl.Target.JS.CodeGeneratorJS.anon_237 !s_0 !a_1 !t_2 = Sapl.Target.JS.CodeGeneratorJS.termCoder_76 t_2 s_0 a_1
Sapl.Target.JS.CodeGeneratorJS.foldl_238 s_0 !r_1 !_x_2 = select _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> Sapl.Target.JS.CodeGeneratorJS.foldl_238 s_0 (Sapl.Target.JS.CodeGeneratorJS.anon_237 s_0 r_1 a_1_0) x_1_1) 
Sapl.Target.JS.CodeGeneratorJS.funcCoder !_x_0 !s_1 !a_2 = select _x_0 (Sapl.SaplStruct.FTFunc name_1_0 body_1_1 args_1_2 -> Sapl.Target.JS.CodeGeneratorJS.normalFunc name_1_0 (Sapl.Transform.AddSelectors.addSelectors_0 body_1_1) args_1_2 s_1 a_2) (Sapl.SaplStruct.FTMacro name_1_0 body_1_1 args_1_2 -> Sapl.Target.JS.CodeGeneratorJS.normalFunc name_1_0 body_1_1 args_1_2 s_1 a_2) (Sapl.SaplStruct.FTCAF name_1_0 body_1_1 -> Sapl.Target.JS.CodeGeneratorJS.encodeCAF name_1_0 body_1_1 s_1 a_2) (Sapl.SaplStruct.FTADT name_1_0 args_1_1 -> Sapl.Target.JS.CodeGeneratorJS.foldl_238 s_1 a_2 args_1_1) (Sapl.SaplStruct.FTRecord name_1_0 args_1_1 -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_8}> (<{Text.StringAppender.<++_8}> a_2 (Sapl.Target.JS.CodeGeneratorJS.constructorCoder name_1_0 0 args_1_1 s_1)) (Sapl.Target.JS.CodeGeneratorJS.termCoder_85 name_1_0 s_1)) ".$f=[") (Sapl.Target.JS.CodeGeneratorJS.recordFieldCoder args_1_1)) "];") 
Sapl.Target.JS.CodeGeneratorJS.anon_38 state_0 a_1 curr_2 = <{Text.StringAppender.<++_8}> a_1 (Sapl.Target.JS.CodeGeneratorJS.funcCoder curr_2 state_0)
Sapl.Target.JS.CodeGeneratorJS.foldl_239 state_0 r_1 !_x_2 = select _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> Sapl.Target.JS.CodeGeneratorJS.foldl_239 state_0 (Sapl.Target.JS.CodeGeneratorJS.anon_38 state_0 r_1 a_1_0) x_1_1) 
Sapl.Target.JS.CodeGeneratorJS.generateJS !f_0 !tramp_1 !saplsrc_2 !mbPst_3 = <{Sapl.Target.JS.CodeGeneratorJS._c;686;7_279}> (Sapl.SaplParser.parse (Sapl.SaplTokenizer.tokensWithPositions saplsrc_2)) f_0 mbPst_3 tramp_1
<{Sapl.Target.JS.CodeGeneratorJS._c;686;7_279}> !_x_0 f_1 mbPst_2 tramp_3 = select _x_0 (Data.Error.Ok _x_1_0 -> select _x_1_0 (_Tuple2 funcs_2_0 s_2_1 -> let _x_3_0 = <{Sapl.Target.JS.CodeGeneratorJS._if;688;43_277}> (Sapl.Target.Flavour.isSet f_1 "enableStrictnessPropagation") s_2_1 mbPst_2 f_1 funcs_2_0, newpst_3_1 = _predefined.tupsels2v1 _x_3_0 in Data.Error.Ok (_Tuple2 (Sapl.Target.JS.CodeGeneratorJS.foldl_239 (Sapl.Target.JS.CodeGeneratorJS.newState f_1 tramp_3 newpst_3_1) (<{Text.StringAppender.<++_5}> (<{Sapl.Target.JS.CodeGeneratorJS._if;692;29_278}> tramp_3) "*/") (_predefined.tupsels2v0 _x_3_0)) newpst_3_1)) ) (Data.Error.Error msg_1_0 -> Data.Error.Error msg_1_0) 
<{Sapl.Target.JS.CodeGeneratorJS._if;692;29_278}> !tramp_0 = select tramp_0 (True -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> Text.StringAppender.newAppender "\"use strict\";") "/*Trampoline: ") "ON") (_ -> <{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> (<{Text.StringAppender.<++_5}> Text.StringAppender.newAppender "\"use strict\";") "/*Trampoline: ") "OFF")
<{Sapl.Target.JS.CodeGeneratorJS._if;688;43_277}> !_x_0 s_1 mbPst_2 f_3 funcs_4 = select _x_0 (True -> Sapl.Optimization.StrictnessPropagation.doStrictnessPropagation (Sapl.SaplParser.mergeParserStates s_1 mbPst_2) f_3 funcs_4) (_ -> _Tuple2 funcs_4 (Sapl.SaplParser.mergeParserStates s_1 mbPst_2))
Sapl.Target.JS.CodeGeneratorJS.foldl_100 op_0 r_1 !_x_2 = select _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> Sapl.Target.JS.CodeGeneratorJS.foldl_100 op_0 (op_0 r_1 a_1_0) x_1_1) 
Sapl.Target.JS.CodeGeneratorJS.anon_39 state_0 a_1 curr_2 = <{Text.StringAppender.<++_8}> a_1 (Sapl.Target.JS.CodeGeneratorJS.funcCoder curr_2 state_0)
Sapl.Target.JS.CodeGeneratorJS.foldl_240 state_0 r_1 !_x_2 = select _x_2 (_predefined._Nil -> r_1) (_predefined._Cons a_1_0 x_1_1 -> Sapl.Target.JS.CodeGeneratorJS.foldl_240 state_0 (Sapl.Target.JS.CodeGeneratorJS.anon_39 state_0 r_1 a_1_0) x_1_1) 
Sapl.Target.JS.CodeGeneratorJS.exprGenerateJS !f_0 !tramp_1 !saplsrc_2 !mbPst_3 !out_4 = <{Sapl.Target.JS.CodeGeneratorJS._c;700;7_280}> (Sapl.SaplParser.parseExpr (Sapl.SaplTokenizer.tokensWithPositions saplsrc_2)) f_0 tramp_1 mbPst_3 out_4
<{Sapl.Target.JS.CodeGeneratorJS._c;700;7_280}> !_x_0 f_1 tramp_2 mbPst_3 out_4 = select _x_0 (Data.Error.Ok _x_1_0 -> select _x_1_0 (_Tuple2 body_2_0 s_2_1 -> let newpst_3_0 = Sapl.SaplParser.mergeParserStates s_2_1 mbPst_3, state_3_1 = Sapl.Target.JS.CodeGeneratorJS.newState f_1 tramp_2 newpst_3_0 in Data.Error.Ok (_Tuple3 (Text.StringAppender.toString_4 (Sapl.Target.JS.CodeGeneratorJS.termCoder_91 body_2_0 (Sapl.Target.JS.CodeGeneratorJS.set_cs_inbody_0 state_3_1 (Data.Maybe.Just (Sapl.SaplStruct.NormalVar "__dummy" 0))) Text.StringAppender.newAppender)) (Sapl.Target.JS.CodeGeneratorJS.foldl_240 state_3_1 out_4 (Sapl.SaplParser.get_ps_genFuns_4 s_2_1)) newpst_3_0)) ) (Data.Error.Error msg_1_0 -> Data.Error.Error msg_1_0) 
Sapl.Target.JS.CodeGeneratorJS.isDependent !vs_0 !_x_1 = select _x_1 (Sapl.SaplStruct.SApplication f_1_0 as_1_1 -> StdList.any (Sapl.Target.JS.CodeGeneratorJS.isDependent vs_0) (_predefined._Cons (Sapl.SaplStruct.SVar f_1_0) as_1_1)) (Sapl.SaplStruct.SVar v_1_0 -> Data.List.elem_by Sapl.SaplStruct.eqVarByNameLevel v_1_0 vs_0) (_ -> False)
Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_78 !t_0 !s_1 !a_2 = Sapl.Target.JS.CodeGeneratorJS.termCoder_79 t_0 s_1 a_2
Sapl.Target.JS.CodeGeneratorJS.trampolineCoder_80 !t_0 !s_1 !a_2 = Sapl.Target.JS.CodeGeneratorJS.termCoder_79 t_0 s_1 a_2
Sapl.Target.JS.CodeGeneratorJS.forceTermCoder_87 !t_0 !s_1 !a_2 = Sapl.Target.JS.CodeGeneratorJS.termCoder_88 t_0 s_1 a_2
Sapl.Target.JS.CodeGeneratorJS.trampolineCoder_89 !t_0 !s_1 !a_2 = Sapl.Target.JS.CodeGeneratorJS.termCoder_88 t_0 s_1 a_2
<{Sapl.Target.JS.CodeGeneratorJS.TD;CoderState}> _x_0 = _predefined._Nil
<{Sapl.Target.JS.CodeGeneratorJS.TD;TermCoder;}> _x_0 = _predefined._Nil


|| Converted Records
:: Sapl.Target.JS.CodeGeneratorJS._CoderState = {!Sapl.Target.JS.CodeGeneratorJS.cs_inbody, !Sapl.Target.JS.CodeGeneratorJS.cs_intrfunc, !Sapl.Target.JS.CodeGeneratorJS.cs_futuredefs, !Sapl.Target.JS.CodeGeneratorJS.cs_incaseexpr, !Sapl.Target.JS.CodeGeneratorJS.cs_current_vars, !Sapl.Target.JS.CodeGeneratorJS.cs_constructors, !Sapl.Target.JS.CodeGeneratorJS.cs_functions, !Sapl.Target.JS.CodeGeneratorJS.cs_CAFs, !Sapl.Target.JS.CodeGeneratorJS.cs_builtins, !Sapl.Target.JS.CodeGeneratorJS.cs_inlinefuncs, !Sapl.Target.JS.CodeGeneratorJS.cs_trampoline, !Sapl.Target.JS.CodeGeneratorJS.cs_prefix}
Sapl.Target.JS.CodeGeneratorJS.get_cs_inbody_0 rec = select rec (Sapl.Target.JS.CodeGeneratorJS._CoderState a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 -> a1)
Sapl.Target.JS.CodeGeneratorJS.get_cs_intrfunc_1 rec = select rec (Sapl.Target.JS.CodeGeneratorJS._CoderState a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 -> a2)
Sapl.Target.JS.CodeGeneratorJS.get_cs_futuredefs_2 rec = select rec (Sapl.Target.JS.CodeGeneratorJS._CoderState a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 -> a3)
Sapl.Target.JS.CodeGeneratorJS.get_cs_incaseexpr_3 rec = select rec (Sapl.Target.JS.CodeGeneratorJS._CoderState a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 -> a4)
Sapl.Target.JS.CodeGeneratorJS.get_cs_current_vars_4 rec = select rec (Sapl.Target.JS.CodeGeneratorJS._CoderState a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 -> a5)
Sapl.Target.JS.CodeGeneratorJS.get_cs_constructors_5 rec = select rec (Sapl.Target.JS.CodeGeneratorJS._CoderState a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 -> a6)
Sapl.Target.JS.CodeGeneratorJS.get_cs_functions_6 rec = select rec (Sapl.Target.JS.CodeGeneratorJS._CoderState a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 -> a7)
Sapl.Target.JS.CodeGeneratorJS.get_cs_CAFs_7 rec = select rec (Sapl.Target.JS.CodeGeneratorJS._CoderState a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 -> a8)
Sapl.Target.JS.CodeGeneratorJS.get_cs_builtins_8 rec = select rec (Sapl.Target.JS.CodeGeneratorJS._CoderState a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 -> a9)
Sapl.Target.JS.CodeGeneratorJS.get_cs_inlinefuncs_9 rec = select rec (Sapl.Target.JS.CodeGeneratorJS._CoderState a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 -> a10)
Sapl.Target.JS.CodeGeneratorJS.get_cs_trampoline_10 rec = select rec (Sapl.Target.JS.CodeGeneratorJS._CoderState a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 -> a11)
Sapl.Target.JS.CodeGeneratorJS.get_cs_prefix_11 rec = select rec (Sapl.Target.JS.CodeGeneratorJS._CoderState a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 -> a12)
Sapl.Target.JS.CodeGeneratorJS.set_cs_inbody_0 rec !val = select rec (Sapl.Target.JS.CodeGeneratorJS._CoderState  a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 -> Sapl.Target.JS.CodeGeneratorJS._CoderState val a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12)
Sapl.Target.JS.CodeGeneratorJS.set_cs_intrfunc_1 rec !val = select rec (Sapl.Target.JS.CodeGeneratorJS._CoderState  a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 -> Sapl.Target.JS.CodeGeneratorJS._CoderState a1 val a3 a4 a5 a6 a7 a8 a9 a10 a11 a12)
Sapl.Target.JS.CodeGeneratorJS.set_cs_futuredefs_2 rec !val = select rec (Sapl.Target.JS.CodeGeneratorJS._CoderState  a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 -> Sapl.Target.JS.CodeGeneratorJS._CoderState a1 a2 val a4 a5 a6 a7 a8 a9 a10 a11 a12)
Sapl.Target.JS.CodeGeneratorJS.set_cs_incaseexpr_3 rec !val = select rec (Sapl.Target.JS.CodeGeneratorJS._CoderState  a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 -> Sapl.Target.JS.CodeGeneratorJS._CoderState a1 a2 a3 val a5 a6 a7 a8 a9 a10 a11 a12)
Sapl.Target.JS.CodeGeneratorJS.set_cs_current_vars_4 rec !val = select rec (Sapl.Target.JS.CodeGeneratorJS._CoderState  a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 -> Sapl.Target.JS.CodeGeneratorJS._CoderState a1 a2 a3 a4 val a6 a7 a8 a9 a10 a11 a12)
Sapl.Target.JS.CodeGeneratorJS.set_cs_constructors_5 rec !val = select rec (Sapl.Target.JS.CodeGeneratorJS._CoderState  a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 -> Sapl.Target.JS.CodeGeneratorJS._CoderState a1 a2 a3 a4 a5 val a7 a8 a9 a10 a11 a12)
Sapl.Target.JS.CodeGeneratorJS.set_cs_functions_6 rec !val = select rec (Sapl.Target.JS.CodeGeneratorJS._CoderState  a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 -> Sapl.Target.JS.CodeGeneratorJS._CoderState a1 a2 a3 a4 a5 a6 val a8 a9 a10 a11 a12)
Sapl.Target.JS.CodeGeneratorJS.set_cs_CAFs_7 rec !val = select rec (Sapl.Target.JS.CodeGeneratorJS._CoderState  a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 -> Sapl.Target.JS.CodeGeneratorJS._CoderState a1 a2 a3 a4 a5 a6 a7 val a9 a10 a11 a12)
Sapl.Target.JS.CodeGeneratorJS.set_cs_builtins_8 rec !val = select rec (Sapl.Target.JS.CodeGeneratorJS._CoderState  a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 -> Sapl.Target.JS.CodeGeneratorJS._CoderState a1 a2 a3 a4 a5 a6 a7 a8 val a10 a11 a12)
Sapl.Target.JS.CodeGeneratorJS.set_cs_inlinefuncs_9 rec !val = select rec (Sapl.Target.JS.CodeGeneratorJS._CoderState  a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 -> Sapl.Target.JS.CodeGeneratorJS._CoderState a1 a2 a3 a4 a5 a6 a7 a8 a9 val a11 a12)
Sapl.Target.JS.CodeGeneratorJS.set_cs_trampoline_10 rec !val = select rec (Sapl.Target.JS.CodeGeneratorJS._CoderState  a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 -> Sapl.Target.JS.CodeGeneratorJS._CoderState a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 val a12)
Sapl.Target.JS.CodeGeneratorJS.set_cs_prefix_11 rec !val = select rec (Sapl.Target.JS.CodeGeneratorJS._CoderState  a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 -> Sapl.Target.JS.CodeGeneratorJS._CoderState a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 val)

:: <{Sapl.Target.JS.CodeGeneratorJS.TermCoder;}> = {Sapl.Target.JS.CodeGeneratorJS.forceTermCoder, Sapl.Target.JS.CodeGeneratorJS.termCoder, Sapl.Target.JS.CodeGeneratorJS.trampolineCoder}
Sapl.Target.JS.CodeGeneratorJS.get_forceTermCoder_12 rec = select rec (<{Sapl.Target.JS.CodeGeneratorJS.TermCoder;}> a1 a2 a3 -> a1)
Sapl.Target.JS.CodeGeneratorJS.get_termCoder_13 rec = select rec (<{Sapl.Target.JS.CodeGeneratorJS.TermCoder;}> a1 a2 a3 -> a2)
Sapl.Target.JS.CodeGeneratorJS.get_trampolineCoder_14 rec = select rec (<{Sapl.Target.JS.CodeGeneratorJS.TermCoder;}> a1 a2 a3 -> a3)
Sapl.Target.JS.CodeGeneratorJS.set_forceTermCoder_12 rec val = select rec (<{Sapl.Target.JS.CodeGeneratorJS.TermCoder;}>  a1 a2 a3 -> <{Sapl.Target.JS.CodeGeneratorJS.TermCoder;}> val a2 a3)
Sapl.Target.JS.CodeGeneratorJS.set_termCoder_13 rec val = select rec (<{Sapl.Target.JS.CodeGeneratorJS.TermCoder;}>  a1 a2 a3 -> <{Sapl.Target.JS.CodeGeneratorJS.TermCoder;}> a1 val a3)
Sapl.Target.JS.CodeGeneratorJS.set_trampolineCoder_14 rec val = select rec (<{Sapl.Target.JS.CodeGeneratorJS.TermCoder;}>  a1 a2 a3 -> <{Sapl.Target.JS.CodeGeneratorJS.TermCoder;}> a1 a2 val)

:: <{Sapl.Target.JS.CodeGeneratorJS.JSONEncode_s;}> = {Sapl.Target.JS.CodeGeneratorJS.JSONEncode_s}
Sapl.Target.JS.CodeGeneratorJS.get_JSONEncode_s_15 rec = select rec (<{Sapl.Target.JS.CodeGeneratorJS.JSONEncode_s;}> a1 -> a1)
Sapl.Target.JS.CodeGeneratorJS.set_JSONEncode_s_15 rec val = select rec (<{Sapl.Target.JS.CodeGeneratorJS.JSONEncode_s;}>  a1 -> <{Sapl.Target.JS.CodeGeneratorJS.JSONEncode_s;}> val)

:: <{Sapl.Target.JS.CodeGeneratorJS.JSONEncode_ss;}> = {Sapl.Target.JS.CodeGeneratorJS.JSONEncode_ss}
Sapl.Target.JS.CodeGeneratorJS.get_JSONEncode_ss_16 rec = select rec (<{Sapl.Target.JS.CodeGeneratorJS.JSONEncode_ss;}> a1 -> a1)
Sapl.Target.JS.CodeGeneratorJS.set_JSONEncode_ss_16 rec val = select rec (<{Sapl.Target.JS.CodeGeneratorJS.JSONEncode_ss;}>  a1 -> <{Sapl.Target.JS.CodeGeneratorJS.JSONEncode_ss;}> val)

:: <{Sapl.Target.JS.CodeGeneratorJS.JSONEncode_sss;}> = {Sapl.Target.JS.CodeGeneratorJS.JSONEncode_sss}
Sapl.Target.JS.CodeGeneratorJS.get_JSONEncode_sss_17 rec = select rec (<{Sapl.Target.JS.CodeGeneratorJS.JSONEncode_sss;}> a1 -> a1)
Sapl.Target.JS.CodeGeneratorJS.set_JSONEncode_sss_17 rec val = select rec (<{Sapl.Target.JS.CodeGeneratorJS.JSONEncode_sss;}>  a1 -> <{Sapl.Target.JS.CodeGeneratorJS.JSONEncode_sss;}> val)

:: <{Sapl.Target.JS.CodeGeneratorJS.JSONEncode_ssss;}> = {Sapl.Target.JS.CodeGeneratorJS.JSONEncode_ssss}
Sapl.Target.JS.CodeGeneratorJS.get_JSONEncode_ssss_18 rec = select rec (<{Sapl.Target.JS.CodeGeneratorJS.JSONEncode_ssss;}> a1 -> a1)
Sapl.Target.JS.CodeGeneratorJS.set_JSONEncode_ssss_18 rec val = select rec (<{Sapl.Target.JS.CodeGeneratorJS.JSONEncode_ssss;}>  a1 -> <{Sapl.Target.JS.CodeGeneratorJS.JSONEncode_ssss;}> val)

:: <{Sapl.Target.JS.CodeGeneratorJS.JSONEncode_sssss;}> = {Sapl.Target.JS.CodeGeneratorJS.JSONEncode_sssss}
Sapl.Target.JS.CodeGeneratorJS.get_JSONEncode_sssss_19 rec = select rec (<{Sapl.Target.JS.CodeGeneratorJS.JSONEncode_sssss;}> a1 -> a1)
Sapl.Target.JS.CodeGeneratorJS.set_JSONEncode_sssss_19 rec val = select rec (<{Sapl.Target.JS.CodeGeneratorJS.JSONEncode_sssss;}>  a1 -> <{Sapl.Target.JS.CodeGeneratorJS.JSONEncode_sssss;}> val)

:: <{Sapl.Target.JS.CodeGeneratorJS.JSONEncode_ssssss;}> = {Sapl.Target.JS.CodeGeneratorJS.JSONEncode_ssssss}
Sapl.Target.JS.CodeGeneratorJS.get_JSONEncode_ssssss_20 rec = select rec (<{Sapl.Target.JS.CodeGeneratorJS.JSONEncode_ssssss;}> a1 -> a1)
Sapl.Target.JS.CodeGeneratorJS.set_JSONEncode_ssssss_20 rec val = select rec (<{Sapl.Target.JS.CodeGeneratorJS.JSONEncode_ssssss;}>  a1 -> <{Sapl.Target.JS.CodeGeneratorJS.JSONEncode_ssssss;}> val)

:: <{Sapl.Target.JS.CodeGeneratorJS.JSONDecode_s;}> = {Sapl.Target.JS.CodeGeneratorJS.JSONDecode_s}
Sapl.Target.JS.CodeGeneratorJS.get_JSONDecode_s_21 rec = select rec (<{Sapl.Target.JS.CodeGeneratorJS.JSONDecode_s;}> a1 -> a1)
Sapl.Target.JS.CodeGeneratorJS.set_JSONDecode_s_21 rec val = select rec (<{Sapl.Target.JS.CodeGeneratorJS.JSONDecode_s;}>  a1 -> <{Sapl.Target.JS.CodeGeneratorJS.JSONDecode_s;}> val)

:: <{Sapl.Target.JS.CodeGeneratorJS.JSONDecode_ss;}> = {Sapl.Target.JS.CodeGeneratorJS.JSONDecode_ss}
Sapl.Target.JS.CodeGeneratorJS.get_JSONDecode_ss_22 rec = select rec (<{Sapl.Target.JS.CodeGeneratorJS.JSONDecode_ss;}> a1 -> a1)
Sapl.Target.JS.CodeGeneratorJS.set_JSONDecode_ss_22 rec val = select rec (<{Sapl.Target.JS.CodeGeneratorJS.JSONDecode_ss;}>  a1 -> <{Sapl.Target.JS.CodeGeneratorJS.JSONDecode_ss;}> val)

:: <{Sapl.Target.JS.CodeGeneratorJS.JSONDecode_sss;}> = {Sapl.Target.JS.CodeGeneratorJS.JSONDecode_sss}
Sapl.Target.JS.CodeGeneratorJS.get_JSONDecode_sss_23 rec = select rec (<{Sapl.Target.JS.CodeGeneratorJS.JSONDecode_sss;}> a1 -> a1)
Sapl.Target.JS.CodeGeneratorJS.set_JSONDecode_sss_23 rec val = select rec (<{Sapl.Target.JS.CodeGeneratorJS.JSONDecode_sss;}>  a1 -> <{Sapl.Target.JS.CodeGeneratorJS.JSONDecode_sss;}> val)

:: <{Sapl.Target.JS.CodeGeneratorJS.JSONDecode_ssss;}> = {Sapl.Target.JS.CodeGeneratorJS.JSONDecode_ssss}
Sapl.Target.JS.CodeGeneratorJS.get_JSONDecode_ssss_24 rec = select rec (<{Sapl.Target.JS.CodeGeneratorJS.JSONDecode_ssss;}> a1 -> a1)
Sapl.Target.JS.CodeGeneratorJS.set_JSONDecode_ssss_24 rec val = select rec (<{Sapl.Target.JS.CodeGeneratorJS.JSONDecode_ssss;}>  a1 -> <{Sapl.Target.JS.CodeGeneratorJS.JSONDecode_ssss;}> val)

:: <{Sapl.Target.JS.CodeGeneratorJS.JSONDecode_sssss;}> = {Sapl.Target.JS.CodeGeneratorJS.JSONDecode_sssss}
Sapl.Target.JS.CodeGeneratorJS.get_JSONDecode_sssss_25 rec = select rec (<{Sapl.Target.JS.CodeGeneratorJS.JSONDecode_sssss;}> a1 -> a1)
Sapl.Target.JS.CodeGeneratorJS.set_JSONDecode_sssss_25 rec val = select rec (<{Sapl.Target.JS.CodeGeneratorJS.JSONDecode_sssss;}>  a1 -> <{Sapl.Target.JS.CodeGeneratorJS.JSONDecode_sssss;}> val)

:: <{Sapl.Target.JS.CodeGeneratorJS.JSONDecode_ssssss;}> = {Sapl.Target.JS.CodeGeneratorJS.JSONDecode_ssssss}
Sapl.Target.JS.CodeGeneratorJS.get_JSONDecode_ssssss_26 rec = select rec (<{Sapl.Target.JS.CodeGeneratorJS.JSONDecode_ssssss;}> a1 -> a1)
Sapl.Target.JS.CodeGeneratorJS.set_JSONDecode_ssssss_26 rec val = select rec (<{Sapl.Target.JS.CodeGeneratorJS.JSONDecode_ssssss;}>  a1 -> <{Sapl.Target.JS.CodeGeneratorJS.JSONDecode_ssssss;}> val)

:: <{Sapl.Target.JS.CodeGeneratorJS.bimap_s;}> = {Sapl.Target.JS.CodeGeneratorJS.bimap_s}
Sapl.Target.JS.CodeGeneratorJS.get_bimap_s_27 rec = select rec (<{Sapl.Target.JS.CodeGeneratorJS.bimap_s;}> a1 -> a1)
Sapl.Target.JS.CodeGeneratorJS.set_bimap_s_27 rec val = select rec (<{Sapl.Target.JS.CodeGeneratorJS.bimap_s;}>  a1 -> <{Sapl.Target.JS.CodeGeneratorJS.bimap_s;}> val)

:: <{Sapl.Target.JS.CodeGeneratorJS.bimap_ss;}> = {Sapl.Target.JS.CodeGeneratorJS.bimap_ss}
Sapl.Target.JS.CodeGeneratorJS.get_bimap_ss_28 rec = select rec (<{Sapl.Target.JS.CodeGeneratorJS.bimap_ss;}> a1 -> a1)
Sapl.Target.JS.CodeGeneratorJS.set_bimap_ss_28 rec val = select rec (<{Sapl.Target.JS.CodeGeneratorJS.bimap_ss;}>  a1 -> <{Sapl.Target.JS.CodeGeneratorJS.bimap_ss;}> val)

:: <{Sapl.Target.JS.CodeGeneratorJS.bimap_sss;}> = {Sapl.Target.JS.CodeGeneratorJS.bimap_sss}
Sapl.Target.JS.CodeGeneratorJS.get_bimap_sss_29 rec = select rec (<{Sapl.Target.JS.CodeGeneratorJS.bimap_sss;}> a1 -> a1)
Sapl.Target.JS.CodeGeneratorJS.set_bimap_sss_29 rec val = select rec (<{Sapl.Target.JS.CodeGeneratorJS.bimap_sss;}>  a1 -> <{Sapl.Target.JS.CodeGeneratorJS.bimap_sss;}> val)

:: <{Sapl.Target.JS.CodeGeneratorJS.gEq_s;}> = {Sapl.Target.JS.CodeGeneratorJS.gEq_s}
Sapl.Target.JS.CodeGeneratorJS.get_gEq_s_30 rec = select rec (<{Sapl.Target.JS.CodeGeneratorJS.gEq_s;}> a1 -> a1)
Sapl.Target.JS.CodeGeneratorJS.set_gEq_s_30 rec val = select rec (<{Sapl.Target.JS.CodeGeneratorJS.gEq_s;}>  a1 -> <{Sapl.Target.JS.CodeGeneratorJS.gEq_s;}> val)

:: <{Sapl.Target.JS.CodeGeneratorJS.gEq_ss;}> = {Sapl.Target.JS.CodeGeneratorJS.gEq_ss}
Sapl.Target.JS.CodeGeneratorJS.get_gEq_ss_31 rec = select rec (<{Sapl.Target.JS.CodeGeneratorJS.gEq_ss;}> a1 -> a1)
Sapl.Target.JS.CodeGeneratorJS.set_gEq_ss_31 rec val = select rec (<{Sapl.Target.JS.CodeGeneratorJS.gEq_ss;}>  a1 -> <{Sapl.Target.JS.CodeGeneratorJS.gEq_ss;}> val)

:: <{Sapl.Target.JS.CodeGeneratorJS.gEq_sss;}> = {Sapl.Target.JS.CodeGeneratorJS.gEq_sss}
Sapl.Target.JS.CodeGeneratorJS.get_gEq_sss_32 rec = select rec (<{Sapl.Target.JS.CodeGeneratorJS.gEq_sss;}> a1 -> a1)
Sapl.Target.JS.CodeGeneratorJS.set_gEq_sss_32 rec val = select rec (<{Sapl.Target.JS.CodeGeneratorJS.gEq_sss;}>  a1 -> <{Sapl.Target.JS.CodeGeneratorJS.gEq_sss;}> val)

:: <{Sapl.Target.JS.CodeGeneratorJS.gEq_ssss;}> = {Sapl.Target.JS.CodeGeneratorJS.gEq_ssss}
Sapl.Target.JS.CodeGeneratorJS.get_gEq_ssss_33 rec = select rec (<{Sapl.Target.JS.CodeGeneratorJS.gEq_ssss;}> a1 -> a1)
Sapl.Target.JS.CodeGeneratorJS.set_gEq_ssss_33 rec val = select rec (<{Sapl.Target.JS.CodeGeneratorJS.gEq_ssss;}>  a1 -> <{Sapl.Target.JS.CodeGeneratorJS.gEq_ssss;}> val)

:: <{Sapl.Target.JS.CodeGeneratorJS.gEq_sssss;}> = {Sapl.Target.JS.CodeGeneratorJS.gEq_sssss}
Sapl.Target.JS.CodeGeneratorJS.get_gEq_sssss_34 rec = select rec (<{Sapl.Target.JS.CodeGeneratorJS.gEq_sssss;}> a1 -> a1)
Sapl.Target.JS.CodeGeneratorJS.set_gEq_sssss_34 rec val = select rec (<{Sapl.Target.JS.CodeGeneratorJS.gEq_sssss;}>  a1 -> <{Sapl.Target.JS.CodeGeneratorJS.gEq_sssss;}> val)

:: <{Sapl.Target.JS.CodeGeneratorJS.gEq_ssssss;}> = {Sapl.Target.JS.CodeGeneratorJS.gEq_ssssss}
Sapl.Target.JS.CodeGeneratorJS.get_gEq_ssssss_35 rec = select rec (<{Sapl.Target.JS.CodeGeneratorJS.gEq_ssssss;}> a1 -> a1)
Sapl.Target.JS.CodeGeneratorJS.set_gEq_ssssss_35 rec val = select rec (<{Sapl.Target.JS.CodeGeneratorJS.gEq_ssssss;}>  a1 -> <{Sapl.Target.JS.CodeGeneratorJS.gEq_ssssss;}> val)

:: <{Sapl.Target.JS.CodeGeneratorJS.gEq_sssssss;}> = {Sapl.Target.JS.CodeGeneratorJS.gEq_sssssss}
Sapl.Target.JS.CodeGeneratorJS.get_gEq_sssssss_36 rec = select rec (<{Sapl.Target.JS.CodeGeneratorJS.gEq_sssssss;}> a1 -> a1)
Sapl.Target.JS.CodeGeneratorJS.set_gEq_sssssss_36 rec val = select rec (<{Sapl.Target.JS.CodeGeneratorJS.gEq_sssssss;}>  a1 -> <{Sapl.Target.JS.CodeGeneratorJS.gEq_sssssss;}> val)

:: <{Sapl.Target.JS.CodeGeneratorJS.gEq_ssssssss;}> = {Sapl.Target.JS.CodeGeneratorJS.gEq_ssssssss}
Sapl.Target.JS.CodeGeneratorJS.get_gEq_ssssssss_37 rec = select rec (<{Sapl.Target.JS.CodeGeneratorJS.gEq_ssssssss;}> a1 -> a1)
Sapl.Target.JS.CodeGeneratorJS.set_gEq_ssssssss_37 rec val = select rec (<{Sapl.Target.JS.CodeGeneratorJS.gEq_ssssssss;}>  a1 -> <{Sapl.Target.JS.CodeGeneratorJS.gEq_ssssssss;}> val)

:: <{Sapl.Target.JS.CodeGeneratorJS.gEq_sssssssss;}> = {Sapl.Target.JS.CodeGeneratorJS.gEq_sssssssss}
Sapl.Target.JS.CodeGeneratorJS.get_gEq_sssssssss_38 rec = select rec (<{Sapl.Target.JS.CodeGeneratorJS.gEq_sssssssss;}> a1 -> a1)
Sapl.Target.JS.CodeGeneratorJS.set_gEq_sssssssss_38 rec val = select rec (<{Sapl.Target.JS.CodeGeneratorJS.gEq_sssssssss;}>  a1 -> <{Sapl.Target.JS.CodeGeneratorJS.gEq_sssssssss;}> val)

