|| ?module? StdChar


StdChar.digitToInt !c_0 = <{StdInt.-_7}> (StdInt.toInt_20 c_0) 48
StdChar.clear_lowercase_bit !c_0 = error "no AnyCodeExpr"
<{StdChar.<_19}> !a_0 !b_1 = error "no AnyCodeExpr"
StdChar.toUpper !c_0 = if (StdChar.toUpper_select0 c_0) (StdChar.clear_lowercase_bit c_0) c_0
StdChar.toUpper_select0 !c_0 = if (StdBool.not (<{StdChar.<_19}> c_0 'a')) (StdBool.not (<{StdChar.<_19}> 'z' c_0)) False
StdChar.set_lowercase_bit !c_0 = error "no AnyCodeExpr"
StdChar.toLower !c_0 = if (StdChar.toLower_select0 c_0) (StdChar.set_lowercase_bit c_0) c_0
StdChar.toLower_select0 !c_0 = if (StdBool.not (<{StdChar.<_19}> c_0 'A')) (StdBool.not (<{StdChar.<_19}> 'Z' c_0)) False
StdChar.isUpper !c_0 = if (StdBool.not (<{StdChar.<_19}> c_0 'A')) (StdBool.not (<{StdChar.<_19}> 'Z' c_0)) False
StdChar.isLower !c_0 = if (StdBool.not (<{StdChar.<_19}> c_0 'a')) (StdBool.not (<{StdChar.<_19}> 'z' c_0)) False
StdChar.isAlpha !c_0 = let c_1_0 = StdChar.clear_lowercase_bit c_0 in if (StdBool.not (<{StdChar.<_19}> c_1_0 'A')) (StdBool.not (<{StdChar.<_19}> 'Z' c_1_0)) False
StdChar.isAlphanum !c_0 = let c_1_0 = StdChar.clear_lowercase_bit c_0 in if (StdChar.isAlphanum_select0 c_1_0 c_0) True (if (StdBool.not (<{StdChar.<_19}> c_0 '0')) (StdBool.not (<{StdChar.<_19}> '9' c_0)) False)
StdChar.isAlphanum_select0 c_1_0 !c_0 = if (StdBool.not (<{StdChar.<_19}> c_1_0 'A')) (StdBool.not (<{StdChar.<_19}> 'Z' c_1_0)) False
StdChar.isDigit !c_0 = if (StdBool.not (<{StdChar.<_19}> c_0 '0')) (StdBool.not (<{StdChar.<_19}> '9' c_0)) False
StdChar.isOctDigit !c_0 = if (StdBool.not (<{StdChar.<_19}> c_0 '0')) (StdBool.not (<{StdChar.<_19}> '7' c_0)) False
StdChar.isHexDigit !c_0 = if (StdChar.isHexDigit_select0 c_0) True (let uc_1_0 = StdChar.clear_lowercase_bit c_0 in if (StdBool.not (<{StdChar.<_19}> uc_1_0 'A')) (StdBool.not (<{StdChar.<_19}> 'F' uc_1_0)) False)
StdChar.isHexDigit_select0 !c_0 = if (StdBool.not (<{StdChar.<_19}> c_0 '0')) (StdBool.not (<{StdChar.<_19}> '9' c_0)) False
<{StdChar.==_18}> !a_0 !b_1 = error "no AnyCodeExpr"
StdChar.isSpace !c_0 = if (<{StdChar.==_18}> c_0 ' ') True (if (<{StdChar.==_18}> c_0 '\t') True (if (<{StdChar.==_18}> c_0 '\n') True (if (<{StdChar.==_18}> c_0 '\r') True (if (<{StdChar.==_18}> c_0 '\f') True (<{StdChar.==_18}> c_0 '\v')))))
StdChar.isControl !c_0 = if (<{StdChar.<_19}> c_0 ' ') True (<{StdChar.==_18}> c_0 '\x7F')
StdChar.isPrint !c_0 = if (StdBool.not (<{StdChar.<_19}> c_0 ' ')) (StdBool.not (<{StdChar.<_19}> '~' c_0)) False
StdChar.isAscii !c_0 = <{StdInt.<_17}> (StdInt.toInt_20 c_0) 128
<{StdChar.+_14}> !a_0 !b_1 = error "no AnyCodeExpr"
<{StdChar.-_15}> !a_0 !b_1 = error "no AnyCodeExpr"
StdChar.zero_16 = error "no AnyCodeExpr"
StdChar.one_17 = error "no AnyCodeExpr"
StdChar.toChar_20 !a_0 = error "no AnyCodeExpr"
StdChar.toChar_21 !a_0 = error "no AnyCodeExpr"
StdChar.fromChar_22 !a_0 = error "no AnyCodeExpr"
StdChar.fromChar_23 !a_0 = error "no AnyCodeExpr"
StdChar.fromChar_24 !a_0 = error "no AnyCodeExpr"


|| Converted Records
