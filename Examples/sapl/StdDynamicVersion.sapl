|| ?module? StdDynamicVersion


StdDynamicVersion.DefaultVersion = StdDynamicVersion._Version 0 0
StdDynamicVersion.toVersion !version_0 = let !version_1_0 = StdDynamicVersion._Version (StdInt.bitand (<{StdInt.>>}> version_0 8) 65535) (StdInt.bitand version_0 255) in version_1_0
StdDynamicVersion.fromVersion !_x_0 = select _x_0 (StdDynamicVersion._Version major_1_0 minor_1_1 -> StdInt.bitor (<{StdInt.<<}> major_1_0 8) minor_1_1) 
<{StdDynamicVersion.==_3}> !_x_0 !_x_1 = select _x_0 (StdDynamicVersion._Version major1_1_0 minor1_1_1 -> select _x_1 (StdDynamicVersion._Version major2_2_0 minor2_2_1 -> if (<{StdInt.==_16}> major1_1_0 major2_2_0) (<{StdInt.==_16}> minor1_1_1 minor2_2_1) False) ) 
<{StdDynamicVersion.TD;Version}> _x_0 = _predefined._Nil


|| Converted Records
:: StdDynamicVersion._Version = {!StdDynamicVersion.major, !StdDynamicVersion.minor}
StdDynamicVersion.get_major_0 rec = select rec (StdDynamicVersion._Version a1 a2 -> a1)
StdDynamicVersion.get_minor_1 rec = select rec (StdDynamicVersion._Version a1 a2 -> a2)
StdDynamicVersion.set_major_0 rec !val = select rec (StdDynamicVersion._Version  a1 a2 -> StdDynamicVersion._Version val a2)
StdDynamicVersion.set_minor_1 rec !val = select rec (StdDynamicVersion._Version  a1 a2 -> StdDynamicVersion._Version a1 val)

