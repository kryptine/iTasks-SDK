|| ?module? StdFunc


StdFunc.id !x_0 = x_0
StdFunc.const !x_0 y_1 = x_0
StdFunc.twice !f_0 x_1 = f_0 (f_0 x_1)
StdFunc.while !p_0 f_1 x_2 = if (p_0 x_2) (StdFunc.while p_0 f_1 (f_1 x_2)) x_2
StdFunc.until !p_0 f_1 x_2 = if (p_0 x_2) x_2 (StdFunc.until p_0 f_1 (f_1 x_2))
StdFunc.iter !_x_0 f_1 x_2 = select _x_0 (0 -> x_2) (_ -> if (<{StdInt.<_17}> 0 _x_0) (StdFunc.iter (<{StdInt.-_7}> _x_0 1) f_1 (f_1 x_2)) (StdMisc.abort "Error: Negative index given to iter."))
StdFunc.seq !_x_0 arg_1 = select _x_0 (_predefined._Cons f_1_0 fs_1_1 -> StdFunc.seq fs_1_1 (f_1_0 arg_1)) (_predefined._Nil -> arg_1) 
StdFunc.seqList !_x_0 io_1 = select _x_0 (_predefined._Cons f_1_0 fs_1_1 -> let _x_2_0 = f_1_0 io_1, _x_2_1 = StdFunc.seqList fs_1_1 (_predefined.tupsels2v1 _x_2_0) in _Tuple2 (_predefined._Cons (_predefined.tupsels2v0 _x_2_0) (_predefined.tupsels2v0 _x_2_1)) (_predefined.tupsels2v1 _x_2_1)) (_predefined._Nil -> _Tuple2 _predefined._Nil io_1) 
<{StdFunc.TD;St}> _x_0 = _predefined._Nil


|| Converted Records
