Conceptueel / wishlist

Statische flow weergave (en Dynamisch)

* basic tasks definities verzamelen per module in de statische pull-down menu

* Een extra lijn onder de parameter van een withShare in withShare param (\v ?> ...) zetten ?
Wellicht kun je ook het type van de share erbij vermelden ?


Dynamisch

* grafisch weergeven voor *iedere* taak in een dynamische blueprint: toestand + resultaat indicatie
- wat is zijn toestand (klaar / blauw, wordt aan gewerkt / groen, niet gekozen / grijs , nog te doen /wit)
- als klaar: wat was zijn resultaat (stable / blauw, unstable / groen, novalue / wit, exception /rood)
- als wordt aan gewerkt: wat is het huidige resultaat: (stable / blauw, unstable / groen, novalue / wit, exception /rood)

* let op: *iedere* taak heeft een toestand + resultaat.
Dit geldt voor bv een parallelle taak, maar ook voor iedere functie die een taak opleverd.


* als taak wordt getraced:
- bij selectie waardes van de argumenten + (huidige) waardes van het resultaat

* stepcombinator: bij het trace van een step zou je willen zien weke paden wel of niet gekozen kunnen worden op grond van de huidige waarde


Bugs:

Statische Tonic

Dynamische Tonic

- resultaat van taak die getraced wordt, wordt niet (altijd) getoond

- kleur toestand / kleur resultaat lijkt niet altijd correct, in het bijzonder bij parallelle taken

- het systeem is nog steeds erg traag



Gedaan:

* optie om alle flows te laten zien met dezelfde hoofdtaaknummer 

* Bij een bind van de vorm >>= \(v1,v2) ?> ... wordt dit tuple niet getoond maar een _x ??

* stepcombinator: eerst de conditie dan de aktie zou mooi zijn
haal de ster voor en achter de splitsing maar weg

* withShared: functie wordt niet getoond

- unfold depth werkt niet meer

- unfold depth werkt niet goed: laat dezefde flow meerdere keren zien

* geef bij iedere flow aan wat zijn taaknummer is

* optie om de Clean code te laten zien die bij een taakdefinitie hoort. (note:
  het laten zien van de code is een taak voor een IDE. Tonic bewaart nu naast
  de module- en taaknaam ook het regelnummer van een taak, zodat een IDE de
  code kan opzoeken)

* lijstcomprehensions bij parallelle constructies...

* stepcombinator plaatje ziet er nog niet in alle gevallen goed uit

* highInOutTest is problematisch...

* let op bij parallelle taken: zowel de parallelle taken als de parallel zelf heeft een resultaat!
zet een taakdoos om de parallel als geheel heen.
Dan kun je daar ok de naam van de parallel kwijt (-||-, anyTask, -&&-, parallel)

* In een predicaat staat de infix operator nog prefix (bv in seqTest)

* Deze zijn afkomstig van Experiments\SVG_tests\TicTacTop:
  - task find_players: in de return wordt "{ Players | you }" getoond in plaats van "{ Players | tic=me, tac=you}"
  - task set_up_users: 
    - soortgelijk probleem met new
    - de expressie bij de set task bevat vreemde tekens en de haakjes-structuur ontbreekt

* Ook een functie die een taak opleverd is een taak abstractie en zou je als een taak moeten laten zien (*gedaan*) 
(dus kunnen selecteren voor een trace, resultaat kunnen opvragen)
Heeft ook zin: ipv een bepaalde applicatie van een taak zou je daarmee iedere applicatie van een taak die je hebt gedefinieerd kunnen tracen
