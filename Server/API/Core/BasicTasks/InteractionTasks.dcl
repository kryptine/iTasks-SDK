definition module InteractionTasks
/*
* This module provides means to interact with users
*/
from TSt		import :: Task
from Types		import :: Role
from Html		import :: HtmlTag
from iTasks		import class iTask(..)

import GenVisualize, GenUpdate, GenMerge, StoreTasks

derive gVisualize Action
derive gUpdate Action
derive gVerify Action

derive JSONEncode Action
derive JSONDecode Action

instance == Action

/*
* To allow users to specify a followup action to their current task
* most interactive tasks allow you to specify actions that can be chosen.
* These actions are either available as a button on the bottom of the task interface
* or as an item in the task menu, or both.
* Additionally conditions can be specified when the action is allowed to be performed.
*/
:: Action	= Action !ActionName !ActionLabel 
			| ActionOk
			| ActionCancel
			| ActionYes
			| ActionNo
			| ActionNext
			| ActionPrevious
			| ActionFinish
			| ActionNew
			| ActionOpen
			| ActionSave
			| ActionSaveAs
			| ActionQuit
			| ActionClose
			| ActionHelp
			| ActionAbout
			| ActionFind
			| ActionDelete
			| ActionEdit
			
:: ActionName	:== String 					//Locally unique identifier for actions
:: ActionLabel	:== String					//Textual label for the action
:: ActionData	:== String					//Extra data to pass along with an action
:: ActionEvent	:== (Action, ActionData)	//Event generated by client including action and extra data

actionIcon 	:: !Action -> String
actionLabel	:: !Action -> String

class ActionName a
where
	actionName	:: a -> String

instance ActionName Action
instance ActionName ActionName

:: Menus		:== [Menu]
:: Menu 		= Menu !MenuLabel ![MenuItem]
:: MenuItem 	= E.action:	MenuItem !action !(Maybe Hotkey) & MenuAction action
				| 			SubMenu !MenuLabel ![MenuItem]
				| 			MenuSeparator
:: MenuLabel	:== String
				
:: Hotkey =	{ key	:: !Key
			, ctrl	:: !Bool
			, alt	:: !Bool
			, shift	:: !Bool
			}	
:: Key = A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z

class MenuAction a
where
	menuAction :: a -> MenuAction

:: MenuAction :== (ActionName, ActionLabel, ActionData)

instance MenuAction Action
instance MenuAction ActionName
instance MenuAction (actionName, ActionLabel, ActionData) | ActionName actionName

// This tuple is used to link actions to user interfaces.
// Its two parts represent the (what , when) aspects of actions.
// What: The conceptual action to be taken
// When: The condition that determine if the action can be taken
:: TaskAction a		:== (!Action, !(Verified a) -> Bool)

//Wrapper for task values that indicates if value passes the verification step
:: Verified a 		= 	Invalid
					|	Valid !a
						
//Default predicates on editor values to use with actions
always		:: (Verified a) -> Bool
ifvalid		:: (Verified a) -> Bool
ifinvalid	:: (Verified a) -> Bool

/*
* This html class makes it possible to use either strings, or html as description/message/instruction
*/
class html a  
where
	html :: a -> HtmlTag
	
instance html String
instance html [HtmlTag]
instance html Note
instance html (Maybe a) | html a

//*** Input collection tasks ***//

/*
* Ask the user to enter information.
*
* @param description 		A description of the task to display to the user
* @param (v -> a)			A view for type v is generated; This function defines how to map view v back to a value of type a. 
*							If not specified, v = a.
* @param [TaskAction a]		A list of buttons or menus, through which the user can submit the value. 
*							If not specified a default button is rendered.
*
* @return 					Resulting value with chosen action
*/
enterInformation			:: !d 						    -> Task a					| descr d & iTask a
enterInformationA			:: !d !(v -> a) ![TaskAction a] -> Task (!ActionEvent, a)	| descr d & iTask a & iTask v

/*
* Ask the user to enter information, given some additional context information
*
* @param description 		A description of the task to display to the user
* @param (v -> a)			A view for type v is generated; This function defines how to map view v back to a value of type a. 
*							If not specified, v = a.
* @param [TaskAction a]		A list of buttons or menus, through which the user can submit the value. 
*							If not specified a default button is rendered.
* @param b					Additional information to display
*
* @return 					Resulting value with chosen action
*/
enterInformationAbout		:: !d  				  		    !b -> Task a					| descr d  & iTask a & iTask b
enterInformationAboutA		:: !d !(v -> a) ![TaskAction a] !b -> Task (!ActionEvent, a)	| descr d  & iTask a & iTask b & iTask v

/*
* Ask the user to update predefined information. 
*
* @param description 		A description of the task to display to the user
* @param (a -> v, v a -> a)	Bimap defining how to convert a to the demanded view v and backwards 
*							If not specified, v = a.
* @param [TaskAction a]		A list of buttons or menus, through which the user can submit the value. 
*							If not specified a default button is rendered.
* @param a or (Shared a)	The initial value or shared value to use. 
*
* @return 					Resulting value with chosen action
*/
updateInformation			:: !d 									  a 		    -> Task a					| descr d & iTask a
updateInformationA			:: !d !(a -> v, v a -> a) ![TaskAction a] a  		    -> Task (!ActionEvent,  a)	| descr d & iTask a & iTask v
updateSharedInformationA	:: !d !(a -> v, v a -> a) ![TaskAction a] !(Shared !a)  -> Task (!ActionEvent, !a)	| descr d & iTask a & iTask v


/*
* Ask the user to update predefined information, given some additonal context information
*
* @param description 		A description of the task to display to the user
* @param (a -> v, v a -> a)	Bimap defining how to convert a to the demanded view v and backwards 
*							If not specified, v = a.
* @param [TaskAction a]		A list of buttons or menus, through which the user can submit the value. 
*							If not specified a default button is rendered.
* @param b					Additional information to display
* @param a or (Shared a)	The initial value or shared value to use. 
*
* @return 					Resulting value with chosen action
*/
updateInformationAbout			:: !d 									  !b a 			  -> Task a						| descr d & iTask a & iTask b
updateInformationAboutA			:: !d !(a -> v, v a -> a) ![TaskAction a] !b a  		  -> Task (!ActionEvent,  a)	| descr d & iTask a & iTask b & iTask v
updateSharedInformationAboutA	:: !d !(a -> v, v a -> a) ![TaskAction a] !b !(Shared !a) -> Task (!ActionEvent, !a)	| descr d & iTask a & iTask b & iTask v

/*
* Asks the user to confirm or decline a question.
*
* @param description 		A description of the task to display to the user
*
* @return 					A boolean indicating 'accepted' (True) or 'declined' (False)
*/
requestConfirmation			:: !d -> Task Bool	| descr d 

/*
* Asks the user to accept or decline a question, given some additional context information
*
* @param description 		A description of the task to display to the user
* @param a					Additional context information to show to the user
*
* @return 					A boolean indiciating 'accepted' (True) or 'declined' (False)
*/
requestConfirmationAbout	:: !d a -> Task Bool	| descr d & iTask a

/*
* Ask the user to select one item from a list of options
*
* @param description 		A description of the task to display to the user
* @param [a]				A list of options
* @param [TaskAction a]		A list of buttons or menus, through which the user can submit the value. If not specified
*							a default button is rendered.
*
* @return 					A task-form which allows the user to choose an item
*/
enterChoice					:: !d 					  				  ![a] 			-> Task a					| descr d & iTask a
enterChoiceA				:: !d !(a -> v, v a -> a) ![TaskAction a] ![a] 			-> Task (!ActionEvent, a)	| descr d & iTask a
enterSharedChoiceA			:: !d !(a -> v, v a -> a) ![TaskAction a] ![Shared a] 	-> Task (!ActionEvent, a)	| descr d & iTask a

/*
* Ask the user to select one item from a list of options with already one option pre-selected
*
* @param description 		A description of the task to display to the user
* @param [a]				A list of options
* @param Int				The index of the item which should be pre-selected
* @param [TaskAction a]		A list of buttons or menus, through which the user can submit the value. If not specified
*							a default button is rendered.
*
* @return 					A task-form which allows the user to choose an item
*/
updateChoice				:: !String !description [a] Int -> Task a									| descr d & iTask a
updateChoiceA 				:: !String !description ![TaskAction a] [a] Int -> Task (!ActionEvent,!a)	| descr d & iTask a 

/*
* Ask the user to select one item from a list of options, given some context information
*
* @param description 		A description of the task to display to the user
* @param b					Additional context information
* @param [a]				A list of options
* @param [TaskAction a]		A list of buttons or menus, through which the user can submit the value. If not specified
*							a default button is rendered.
*
* @return 					A task-form which allows the user to choose an item and displays the context information
*/
enterChoiceAbout			:: !String !description b [a] -> Task a									| descr d & iTask a & iTask b
enterChoiceAboutA			:: !String !description ![TaskAction a] b [a] -> Task (!ActionEvent,!a)	| descr d & iTask a & iTask b

/*
* Ask the user to select one item from a list of options with already one option pre-selected, given some context information
*
* @param description 		A description of the task to display to the user
* @param b					Additional context information
* @param [a]				A list of options
* @param Int				The index of the item which should be pre-selected
* @param [TaskAction a]		A list of buttons or menus, through which the user can submit the value. If not specified
*							a default button is rendered.
*
* @return 					A task-form which allows the user to choose an item and displays the context information
*/
updateChoiceAbout			:: !String !description b [a] Int -> Task a									| descr d & iTask a & iTask b
updateChoiceAboutA			:: !String !description ![TaskAction a] b [a] Int -> Task (!ActionEvent,!a)	| descr d & iTask a & iTask b

/*
* Ask the user to select one or more items from a list of options
*
* @param description 		A description of the task to display to the user
* @param [a]				A list of options
* @param [TaskAction a]		A list of buttons or menus, through which the user can submit the value. If not specified
*							a default button is rendered.
*
* @return 					A task-form which allows the user to choose items
*/
enterMultipleChoice			:: !String !description [a] -> Task [a]										| descr d & iTask a
enterMultipleChoiceA		:: !String !description ![TaskAction [a]] [a] -> Task (!ActionEvent,![a])	| descr d & iTask a

/*
* Ask the user to select one or more items from a list of options with already some options pre-selected
*
* @param description 		A description of the task to display to the user
* @param [a]				A list of options
* @param Int				The index of the item which should be pre-selected
* @param [TaskAction a]		A list of buttons or menus, through which the user can submit the value. If not specified
*							a default button is rendered.
*
* @return 					A task-form which allows the user to choose items
*/
updateMultipleChoice		:: !String !description [a] [Int] -> Task [a]									| descr d & iTask a
updateMultipleChoiceA		:: !String !description ![TaskAction [a]] [a] [Int] -> Task (!ActionEvent,![a])	| descr d & iTask a

/*
* Ask the user to select one or more items from a list of options, given additional context information
*
* @param description 		A description of the task to display to the user
* @param b					Additional context information
* @param [a]				A list of options
* @param [TaskAction a]		A list of buttons or menus, through which the user can submit the value. If not specified
*							a default button is rendered.
*
* @return 					A task-form which allows the user to choose items and displays the context information
*/
enterMultipleChoiceAbout	:: !String !description b [a] -> Task [a]									| descr d & iTask a & iTask b
enterMultipleChoiceAboutA	:: !String !description ![TaskAction [a]] b [a] -> Task (!ActionEvent,![a])	| descr d & iTask a & iTask b

/*
* Ask the user to select one or more items from a list of options with already some options pre-selected, given additional context information
*
* @param description 		A description of the task to display to the user
* @param b					Additional context information
* @param [a]				A list of options
* @param Int				The index of the item which should be pre-selected
* @param [TaskAction a]		A list of buttons or menus, through which the user can submit the value. If not specified
*							a default button is rendered.
*
* @return 					A task-form which allows the user to choose items and displays the context information
*/
updateMultipleChoiceAbout	:: !String !description b [a] [Int] -> Task [a]										| descr d & iTask a & iTask b
updateMultipleChoiceAboutA	:: !String !description ![TaskAction [a]] b [a] [Int] -> Task (!ActionEvent,![a])	| descr d & iTask a & iTask b

//*** Output tasks ***//

/*
* Show a basic message to the user. The user can end the task after reading the message. 

* @param String				A short descriptive subject
* @param message 			A message to display to the user
* @param [TaskAction a] 	A list of buttons or menus through which the user can submit the value. If not specified
*							a default button is rendered
*
* @return					a or an Action if [TaskAction a] is specified
*/
showMessage					:: !String !message a -> Task a									| html message & iTask a
showMessageA				:: !String !message ![TaskAction a] a -> Task (!ActionEvent,!a)	| html message & iTask a

/*
* Show a basic message and additional context information to the user. The user can end the task after reading the message. 
*
* @param String				A short descriptive subject
* @param message			The message to display to the user
* @param a					Additional context information
* @param [TaskAction a] 	A list of buttons or menus through which the user can submit the value. If not specified
*							a default button is rendered
*
* @return					a or an Action if [TaskAction a] is specified
*/
showMessageAbout			:: !String !message a -> Task a									| html message & iTask a
showMessageAboutA			:: !String !message ![TaskAction a] a -> Task (!ActionEvent,!a)	| html message & iTask a

/*
* Show a basic message to the user. The user cannot end the task after reading the message. 
*
* @param String				A short descriptive subject
* @param message			The message to display to the user
* @param a					The value that is returned when the task is finished
*
* @return					a
*/
showStickyMessage			:: !String !message a -> Task a	| html message & iTask a

/*
* Show a basic message and some context information to the user. The user cannot end the task after reading the message. 
*
* @param String				A short descriptive subject
* @param message			The message to display to the user
* @param a					Additional context information
*
* @return					a
*/
showStickyMessageAbout		:: !String !message a -> Task a	| html message & iTask a


//*** Instruction tasks ***//

/* 
* Shows a instruction to the user. The user can dismiss the instruction.
*
* @param String				A short descriptive subject
* @param instruction		The instruction
* @param a					The value that is returned when the task is finished		
*
* @return					a
*/
showInstruction 			:: !String !instruction	a	-> Task a	| html instruction & iTask a

/* 
* Shows a instruction and additional context information to the user. The user can dismiss the instruction.
*
* @param String				A title message
* @param instruction		The instruction
* @param a					Additional context information
*
* @return					a
*/
showInstructionAbout 		:: !String !instruction a 	-> Task a	| html instruction & iTask a

//*** Shared variable tasks ***//

/*
* Shared variables tasks allow to specify multiple views upon the same set of data (the share). These views can be either
* viewed in separate tasks, but can also be combined locally into a single editor. Typically a view is created using an instance
* of the Editor- or Listener-type, which specify how the shared data should be transformed into a single View and -in case of an editor-
* back into the original data.
*/
class SharedVariable a | gMerge{|*|} a

